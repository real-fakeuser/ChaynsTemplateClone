import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { Transition, TransitionGroup, CSSTransition } from 'react-transition-group';

var requestAnimationFrame$1 = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (cb) {
    return window.setTimeout(cb, 0);
};

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CLOSED = 5;
var CLOSE = 1;

var OPENED = 6;
var OPEN = 2;

function hasFlag(value, flag) {
    return !!(value & flag); // eslint-disable-line no-bitwise
}

var Accordion = function (_Component) {
    _inherits(Accordion, _Component);

    function Accordion(props) {
        _classCallCheck(this, Accordion);

        var _this = _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).call(this));

        _this.firstRender = true;

        _this.state = {
            currentState: props && props.defaultOpened ? OPENED : CLOSED
        };
        return _this;
    }

    _createClass(Accordion, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _props = this.props,
                open = _props.open,
                className = _props.className;


            if (open || className && className.indexOf('accordion--open') !== -1) {
                this.setState({
                    currentState: OPENED
                });
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props2 = this.props,
                className = _props2.className,
                autogrow = _props2.autogrow;
            var currentState = this.state.currentState;


            this.accordion.addEventListener('closed', this.accordionClosedListener.bind(this));
            this.accordion.addEventListener('close', this.accordionCloseListener.bind(this));
            this.accordion.addEventListener('open', this.accordionOpenListener.bind(this));
            this.accordion.addEventListener('opened', this.accordionOpenedListener.bind(this));

            if (className.indexOf('accordion--open') !== -1) {
                this.accordion.classList.add('accordion--open');
            }

            if (currentState === OPENED) {
                if (autogrow && this._body) {
                    this._body.style.setProperty('max-height', 'initial', 'important');
                }
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.open !== undefined) {
                var open = this.props.open;
                var currentState = this.state.currentState;


                if (open !== nextProps.open) {
                    this.setState({
                        currentState: nextProps.open ? OPENED : CLOSED
                    });
                }

                if (nextProps.open && !hasFlag(currentState, OPEN)) {
                    this.setState({
                        currentState: OPENED
                    });
                }

                if (!nextProps.open && !hasFlag(currentState, CLOSE)) {
                    this.setState({
                        currentState: CLOSED
                    });
                }
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var autogrow = this.props.autogrow;
            var currentState = this.state.currentState;


            if (autogrow && this._body) {
                if (currentState === OPENED) {
                    this._body.style.setProperty('max-height', 'initial', 'important');
                } else if (hasFlag(currentState, CLOSE)) {
                    this._body.style.maxHeight = null;
                }
            }
        }
    }, {
        key: '_getBody',
        value: function _getBody() {
            var _props3 = this.props,
                renderClosed = _props3.renderClosed,
                children = _props3.children;
            var currentState = this.state.currentState;


            if (hasFlag(currentState, OPEN) || currentState === CLOSE || renderClosed) {
                return children;
            }

            return null;
        }
    }, {
        key: '_renderHead',
        value: function _renderHead() {
            var _props4 = this.props,
                badge = _props4.badge,
                badgeStyle = _props4.badgeStyle,
                right = _props4.right,
                head = _props4.head;


            if (!badge && !right) {
                return head;
            }

            return [React.createElement(
                'span',
                {
                    key: 'head',
                    className: 'accordion--trigger'
                },
                head
            ), React.createElement(
                'div',
                {
                    key: 'right',
                    className: 'right',
                    style: {
                        display: 'flex',
                        flexDirection: 'row'
                    }
                },
                right,
                badge && React.createElement(
                    'div',
                    {
                        key: 'badge',
                        className: 'badge accordion--trigger',
                        style: badgeStyle
                    },
                    badge
                )
            )];
        }
    }, {
        key: 'accordionClosedListener',
        value: function accordionClosedListener(event) {
            var onClosed = this.props.onClosed;


            this.setState({
                currentState: CLOSED
            });

            if (onClosed) {
                onClosed(event);
            }
        }
    }, {
        key: 'accordionCloseListener',
        value: function accordionCloseListener(event) {
            var _this2 = this;

            var _props5 = this.props,
                onClose = _props5.onClose,
                autogrow = _props5.autogrow;


            if (autogrow && this._body) {
                this._body.style.setProperty('max-height', '9999px', 'important');
            }

            requestAnimationFrame$1(function () {
                _this2.setState({
                    currentState: CLOSE
                });

                _this2._body.style.removeProperty('max-height');
            });

            if (onClose) {
                onClose(event);
            }

            this.firstRender = false;
        }
    }, {
        key: 'accordionOpenListener',
        value: function accordionOpenListener(event) {
            var onOpen = this.props.onOpen;


            this.setState({
                currentState: OPEN
            });

            if (onOpen) {
                onOpen(event);
            }
        }
    }, {
        key: 'accordionOpenedListener',
        value: function accordionOpenedListener(event) {
            var onOpened = this.props.onOpened;


            this.setState({
                currentState: OPENED
            });

            if (onOpened) {
                onOpened(event);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props6 = this.props,
                dataGroup = _props6.dataGroup,
                id = _props6.id,
                style = _props6.style,
                isWrapped = _props6.isWrapped,
                className = _props6.className,
                ellipsis = _props6.ellipsis,
                styleBody = _props6.styleBody,
                reference = _props6.reference,
                open = _props6.open,
                badge = _props6.badge,
                badgeStyle = _props6.badgeStyle,
                right = _props6.right,
                head = _props6.head,
                defaultOpened = _props6.defaultOpened,
                children = _props6.children,
                autogrow = _props6.autogrow,
                renderClosed = _props6.renderClosed,
                onOpen = _props6.onOpen,
                onOpened = _props6.onOpened,
                onClose = _props6.onClose,
                onClosed = _props6.onClosed,
                customProps = _objectWithoutProperties(_props6, ['dataGroup', 'id', 'style', 'isWrapped', 'className', 'ellipsis', 'styleBody', 'reference', 'open', 'badge', 'badgeStyle', 'right', 'head', 'defaultOpened', 'children', 'autogrow', 'renderClosed', 'onOpen', 'onOpened', 'onClose', 'onClosed']);

            var currentState = this.state.currentState;


            var others = {};

            if (id !== '') {
                others.id = id;
            }

            if (style) {
                others.style = style;
            }

            var classNames = classnames(_defineProperty({
                accordion: true,
                'accordion--wrapped': isWrapped === true,
                'accordion--open': hasFlag(currentState, OPEN)
            }, className, className));

            var classNamesHead = classnames({
                accordion__head: true,
                ellipsis: ellipsis
            });

            var othersBody = {
                style: {}
            };

            if (styleBody) {
                othersBody.style = styleBody;
            }

            return React.createElement(
                'div',
                _extends({
                    className: classNames,
                    'data-group': dataGroup,
                    ref: function ref(_ref2) {
                        _this3.accordion = _ref2;
                        if (reference) reference(_ref2);
                    }
                }, others, customProps),
                React.createElement(
                    'div',
                    { className: classNamesHead },
                    this._renderHead()
                ),
                React.createElement(
                    'div',
                    _extends({
                        className: 'accordion__body',
                        ref: function ref(_ref) {
                            _this3._body = _ref;
                        }
                    }, othersBody),
                    this._getBody()
                )
            );
        }
    }]);

    return Accordion;
}(Component);

Accordion.defaultProps = {
    className: '',
    dataGroup: null,
    id: null,
    style: null,
    styleBody: null,
    onOpen: null,
    onOpened: null,
    onClose: null,
    onClosed: null,
    ellipsis: false,
    defaultOpened: null,
    reference: null,
    isWrapped: false,
    renderClosed: false,
    badge: null,
    right: null,
    autogrow: false,
    badgeStyle: null,
    open: undefined
};

var AccordionIntro = function AccordionIntro(_ref) {
    var children = _ref.children;

    return React.createElement(
        'div',
        { className: 'accordion__intro' },
        children
    );
};

var _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties$1(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Button = (_temp2 = _class = function (_Component) {
    _inherits$1(Button, _Component);

    function Button() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck$1(this, Button);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$1(this, (_ref = Button.__proto__ || Object.getPrototypeOf(Button)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (event) {
            var _this$props = _this.props,
                onClick = _this$props.onClick,
                disabled = _this$props.disabled;


            if (onClick && !disabled) {
                onClick(event);
            }
        }, _temp), _possibleConstructorReturn$1(_this, _ret);
    }

    _createClass$1(Button, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                chooseButton = _props.chooseButton,
                disabled = _props.disabled,
                children = _props.children,
                className = _props.className,
                style = _props.style,
                buttonRef = _props.buttonRef,
                onClick = _props.onClick,
                other = _objectWithoutProperties$1(_props, ['chooseButton', 'disabled', 'children', 'className', 'style', 'buttonRef', 'onClick']);

            var classNames = classnames(_defineProperty$1({
                button: !chooseButton,
                choosebutton: chooseButton,
                'button--disabled': disabled
            }, className, className));

            return React.createElement(
                'button',
                _extends$1({
                    type: 'button',
                    className: classNames,
                    onClick: this.handleClick,
                    style: style,
                    disabled: disabled,
                    ref: buttonRef
                }, other),
                children
            );
        }
    }]);

    return Button;
}(Component), _class.defaultProps = {
    buttonRef: null,
    style: null,
    className: null,
    onClick: null,
    disabled: false,
    chooseButton: false
}, _temp2);

var _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties$2(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var ChooseButton = function ChooseButton(_ref) {
    var children = _ref.children,
        props = _objectWithoutProperties$2(_ref, ['children']);

    return React.createElement(
        Button,
        _extends$2({
            chooseButton: true
        }, props),
        children
    );
};

ChooseButton.defaultProps = {
    style: null,
    className: null,
    onClick: null,
    disabled: false
};

var ControlButton = function ControlButton(_ref) {
    var icon = _ref.icon,
        onClick = _ref.onClick,
        className = _ref.className,
        disabled = _ref.disabled;

    return React.createElement(
        ChooseButton,
        {
            onClick: onClick,
            className: className,
            disabled: disabled
        },
        React.createElement('i', { className: 'fa ' + icon })
    );
};

ControlButton.defaultProps = {
    disabled: false
};

var dimension = {
    WIDTH: 'width',
    MIN_WIDTH: 'minWidth',
    HEIGHT: 'height',
    MIN_HEIGHT: 'minHeight'
};

/**
 * Equalizes the dimension of the specified elements.
 *
 * @param elements Elements to be equalized
 * @param d Dimension
 * @param [d2=d] Dimension that should be set
 */
function equalize(elements, d, d2) {
    var length = elements.length;

    var dimensionToSet = d2 || d;
    var max = 0;

    if (length > 1) {
        var currentDim = void 0;

        for (var i = 0; i < length; i += 1) {
            currentDim = Math.ceil(elements[i].getBoundingClientRect()[d]);

            // find maximum dimension
            if (max < currentDim) {
                max = currentDim;
            }
        }

        if (max > 0) {
            // set all elements to max dimension
            for (var _i = 0; _i < length; _i += 1) {
                var element = elements[_i];
                element.style[dimensionToSet] = max + 'px';
            }
        }
    }
}

/**
 * Initializes equalizer
 */
// eslint-disable-next-line import/prefer-default-export
function init(element) {
    var parents = Array.prototype.slice.call((element || document).querySelectorAll('[data-equalize]'));

    if (element && element.hasAttribute('data-equalize')) {
        parents.push(element);
    }

    for (var i = 0, l = parents.length; i < l; i += 1) {
        var parent = parents[i];
        var equalizeId = parent.getAttribute('data-equalize') || '';

        // equalize width
        var elements = parent.querySelectorAll('[data-cc-equalize-width="' + equalizeId + '"]');
        if (elements.length) {
            equalize(elements, dimension.WIDTH, dimension.MIN_WIDTH);
        }

        // equalize height
        elements = parent.querySelectorAll('[data-cc-equalize-height="' + equalizeId + '"]');
        if (elements.length) {
            equalize(elements, dimension.HEIGHT, dimension.MIN_HEIGHT);
        }

        // equalize both
        elements = parent.querySelectorAll('[data-cc-equalize-both="' + equalizeId + '"]');
        if (elements.length) {
            equalize(elements, dimension.WIDTH, dimension.MIN_WIDTH);
            equalize(elements, dimension.HEIGHT, dimension.MIN_HEIGHT);
        }
    }
}

var _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$1, _temp;

function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties$3(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$2(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Input = (_temp = _class$1 = function (_Component) {
    _inherits$2(Input, _Component);

    function Input(props) {
        _classCallCheck$2(this, Input);

        var _this = _possibleConstructorReturn$2(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this));

        _this.onBlur = function () {
            return _this.handleEvent(_this.props.onBlur, true);
        };

        _this.onKeyUp = function () {
            return _this.handleEvent(_this.props.onKeyUp);
        };

        _this.onChange = function () {
            return _this.handleEvent(_this.props.onChange);
        };

        _this.handleEvent = function (callback) {
            var doInvalidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var isValid = _this.validateInput(doInvalidate);

            if (callback) {
                if (isValid) {
                    callback(_this._node.value);
                } else {
                    callback(null);
                }
            }
        };

        var defaultValue = props.defaultValue,
            value = props.value,
            regExp = props.regExp;


        var testValue = value || defaultValue;

        _this.state = {
            isValid: regExp && (testValue ? testValue.match(new RegExp(regExp)) : true)
        };
        return _this;
    }

    // eslint-disable-next-line react/destructuring-assignment


    /**
     * @deprecated
     */
    // eslint-disable-next-line react/destructuring-assignment


    // eslint-disable-next-line react/destructuring-assignment


    _createClass$2(Input, [{
        key: 'validateInput',
        value: function validateInput() {
            var doInvalidate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var regExp = this.props.regExp;

            var isValid = !regExp || regExp && this._node.value.match(new RegExp(regExp));

            if (isValid || doInvalidate) {
                this.setState({
                    isValid: isValid
                });
            }

            return isValid;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                type = _props.type,
                value = _props.value,
                defaultValue = _props.defaultValue,
                placeholder = _props.placeholder,
                className = _props.className,
                style = _props.style,
                responsive = _props.responsive,
                regExp = _props.regExp,
                inputRef = _props.inputRef,
                onChange = _props.onChange,
                onBlur = _props.onBlur,
                onKeyUp = _props.onKeyUp,
                invalid = _props.invalid,
                other = _objectWithoutProperties$3(_props, ['type', 'value', 'defaultValue', 'placeholder', 'className', 'style', 'responsive', 'regExp', 'inputRef', 'onChange', 'onBlur', 'onKeyUp', 'invalid']);

            var isValid = this.state.isValid;


            var classNames = classnames(_defineProperty$2({
                'input-group': responsive,
                input: !responsive
            }, className, className));

            var inputStyles = invalid || regExp && !isValid ? {
                color: '#d23f31',
                fontWeight: '700'
            } : null;

            var responsiveInput = function responsiveInput() {
                return React.createElement(
                    'div',
                    {
                        className: classNames,
                        style: style
                    },
                    React.createElement('input', _extends$3({
                        style: inputStyles,
                        ref: function ref(_ref) {
                            if (inputRef) inputRef(_ref);
                            _this2._node = _ref;
                        },
                        value: value,
                        defaultValue: defaultValue,
                        onKeyUp: _this2.onKeyUp,
                        onChange: _this2.onChange,
                        onBlur: _this2.onBlur,
                        className: 'input',
                        type: type || 'text',
                        required: true
                    }, other)),
                    React.createElement(
                        'label',
                        null,
                        placeholder
                    )
                );
            };

            var input = function input() {
                return React.createElement('input', _extends$3({
                    className: classNames,
                    ref: function ref(_ref2) {
                        if (inputRef) inputRef(_ref2);
                        _this2._node = _ref2;
                    },
                    value: value,
                    defaultValue: defaultValue,
                    placeholder: placeholder,
                    style: _extends$3({}, style, inputStyles),
                    onKeyUp: _this2.onKeyUp,
                    onChange: _this2.onChange,
                    onBlur: _this2.onBlur,
                    type: type || 'text',
                    required: true
                }, other));
            };

            return responsive ? responsiveInput() : input();
        }
    }]);

    return Input;
}(Component), _class$1.defaultProps = {
    style: {},
    responsive: false,
    className: null,
    value: undefined,
    defaultValue: undefined,
    placeholder: null,
    onKeyUp: null,
    onChange: null,
    onBlur: null,
    regExp: null,
    inputRef: null,
    type: 'text',
    invalid: false
}, _temp);

var _createClass$3 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$2, _temp$1;

function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$3(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AUTO_HIDE_INPUT_MAX_AMOUNT = 9;

var AmountInput = (_temp$1 = _class$2 = function (_Component) {
    _inherits$3(AmountInput, _Component);

    function AmountInput() {
        _classCallCheck$3(this, AmountInput);

        var _this = _possibleConstructorReturn$3(this, (AmountInput.__proto__ || Object.getPrototypeOf(AmountInput)).call(this));

        _this.onButtonClick = function () {
            var _this$props = _this.props,
                amount = _this$props.amount,
                onAdd = _this$props.onAdd;


            if (amount > 0) {
                _this.setState({
                    showInput: true
                });
            } else {
                onAdd();
            }
        };

        _this.onInputChange = function (value) {
            var inputValue = value.replace(/[\D\s]+/g, '');
            inputValue = parseInt(inputValue, 10);

            if (!window.chayns.utils.isNumber(inputValue)) {
                inputValue = null;
            }

            _this.setState({
                value: inputValue
            });

            var onInput = _this.props.onInput;


            if (onInput) {
                onInput(inputValue);
            }
        };

        _this.onInputBlur = function () {
            var onChange = _this.props.onChange;
            var value = _this.state.value;


            if (onChange) {
                onChange(value);
            }

            _this.setState({
                showInput: false
            });
        };

        _this.state = {
            showInput: false
        };
        return _this;
    }

    _createClass$3(AmountInput, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var amount = this.props.amount;


            if (window.chayns.utils.isNumber(amount)) {
                this.setState({
                    value: amount
                });
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var equalize = this.props.equalize;


            if (equalize) {
                init();
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var amount = this.props.amount;
            var value = this.state.value;


            if (nextProps.amount !== amount && value !== nextProps.amount) {
                this.setState({
                    value: nextProps.amount
                });
            }

            if (nextProps.equalize) {
                init();
            }
        }
    }, {
        key: 'getButtonValue',
        value: function getButtonValue() {
            var _props = this.props,
                amount = _props.amount,
                buttonText = _props.buttonText,
                buttonFormatHandler = _props.buttonFormatHandler;


            if (buttonFormatHandler) {
                return buttonFormatHandler({ amount: amount, buttonText: buttonText });
            }

            if (amount > 0) {
                return '' + amount;
            }

            return buttonText;
        }
    }, {
        key: 'getInputValue',
        value: function getInputValue() {
            var amount = this.props.amount;
            var inputValue = this.state.value;


            if (inputValue || inputValue === 0 || inputValue === '') {
                return inputValue;
            }

            if (window.chayns.utils.isNumber(amount) && parseInt(amount, 10) !== 0) {
                return amount;
            }

            return '';
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                amount = _props2.amount,
                equalize = _props2.equalize,
                disabled = _props2.disabled,
                disableInput = _props2.disableInput,
                autoInput = _props2.autoInput,
                showInputProp = _props2.showInput,
                shopStyle = _props2.shopStyle;
            var showInput = this.state.showInput;


            if ((!autoInput || amount <= AUTO_HIDE_INPUT_MAX_AMOUNT) && !showInput && !showInputProp || disableInput || disabled) {
                var buttonClassName = classnames('cc__amount-control__button', {
                    'cc__amount-control__button--price': !amount,
                    'cc__amount-control__button--amount': amount
                });

                return React.createElement(
                    ChooseButton,
                    {
                        onClick: this.onButtonClick,
                        className: buttonClassName,
                        'data-cc-equalize-width': equalize,
                        disabled: disabled
                    },
                    this.getButtonValue()
                );
            }

            return React.createElement(Input, {
                type: 'number',
                value: this.getInputValue(),
                onChange: this.onInputChange,
                className: 'cc__amount-control__input',
                onBlur: this.onInputBlur,
                'data-cc-equalize-width': equalize,
                disabled: disabled,
                autoFocus: !shopStyle && window.chayns.env.isDesktop
            });
        }
    }]);

    return AmountInput;
}(Component), _class$2.defaultProps = {
    equalize: null,
    disabled: false,
    disableInput: false,
    autoInput: false,
    shopStyle: false,
    buttonFormatHandler: undefined
}, _temp$1);

var _createClass$4 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$3, _temp$2;

function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$4(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$4(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AmountControl = (_temp$2 = _class$3 = function (_Component) {
    _inherits$4(AmountControl, _Component);

    function AmountControl() {
        _classCallCheck$4(this, AmountControl);

        var _this = _possibleConstructorReturn$4(this, (AmountControl.__proto__ || Object.getPrototypeOf(AmountControl)).call(this));

        _this.onInput = function (value) {
            _this.setState({
                tempValue: value
            });

            var onInput = _this.props.onInput;


            if (onInput && (value || value === 0)) {
                onInput(value);
            }
        };

        _this.addItem = function () {
            var _this$props = _this.props,
                amount = _this$props.amount,
                onAdd = _this$props.onAdd;


            if (onAdd) onAdd();

            _this.changeAmount(amount + 1);
        };

        _this.removeItem = function () {
            var _this$props2 = _this.props,
                amount = _this$props2.amount,
                onRemove = _this$props2.onRemove;


            if (onRemove) onRemove();

            if (amount - 1 >= 0) {
                _this.changeAmount(amount - 1);
            }
        };

        _this.changeAmount = function (amount) {
            var _this$props3 = _this.props,
                onChange = _this$props3.onChange,
                onInput = _this$props3.onInput;


            if (onChange) {
                onChange(amount);
            }

            if (onInput) {
                onInput(amount);
            }
        };

        _this.state = {
            tempValue: null
        };
        return _this;
    }

    _createClass$4(AmountControl, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps() {
            this.setState({
                tempValue: null
            });
        }
    }, {
        key: 'getRemoveIcon',
        value: function getRemoveIcon() {
            var amount = this.props.amount;
            var tempValue = this.state.tempValue;


            if (amount > 1 && tempValue > 1) {
                return 'fa-minus';
            }

            if (tempValue > 1) {
                return 'fa-minus';
            }

            if (amount > 1 && tempValue === null) {
                return 'fa-minus';
            }

            return 'fa-trash fa-2x';
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                amount = _props.amount,
                buttonText = _props.buttonText,
                equalize = _props.equalize,
                disabled = _props.disabled,
                disableInput = _props.disableInput,
                disableAdd = _props.disableAdd,
                disableRemove = _props.disableRemove,
                className = _props.className,
                autoInput = _props.autoInput,
                buttonFormatHandler = _props.buttonFormatHandler,
                showInput = _props.showInput,
                shopStyle = _props.shopStyle;


            if (window.debugLevel >= 3) {
                console.debug('render amount-control component', this.props, this.state);
            }

            var classNames = classnames('cc__amount-control', _defineProperty$3({
                'cc__amount-control--active': amount > 0,
                'cc__amount-control--shop': shopStyle
            }, className, className));

            return React.createElement(
                'div',
                {
                    className: classNames,
                    ref: function ref(node) {
                        _this2.node = node;
                    }
                },
                React.createElement(ControlButton, {
                    icon: this.getRemoveIcon(),
                    onClick: this.removeItem,
                    disabled: disabled || disableRemove,
                    className: 'cc__amount-control__remove'
                }),
                React.createElement(AmountInput, {
                    autoInput: autoInput,
                    amount: amount,
                    onChange: this.changeAmount,
                    onInput: this.onInput,
                    onAdd: this.addItem,
                    buttonText: buttonText,
                    disabled: disabled,
                    disableInput: disableInput,
                    equalize: equalize,
                    buttonFormatHandler: buttonFormatHandler,
                    showInput: !!showInput,
                    shopStyle: shopStyle
                }),
                React.createElement(ControlButton, {
                    icon: 'fa-plus',
                    onClick: this.addItem,
                    disabled: disabled || disableAdd,
                    className: 'cc__amount-control__add'
                })
            );
        }
    }]);

    return AmountControl;
}(Component), _class$3.defaultProps = {
    amount: 0,
    onChange: null,
    onInput: null,
    onAdd: null,
    onRemove: null,
    equalize: null,
    disabled: false,
    disableInput: false,
    disableAdd: false,
    disableRemove: false,
    className: '',
    autoInput: false,
    buttonFormatHandler: undefined,
    showInput: false,
    shopStyle: false
}, _temp$2);

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component$$1) {
  var prototype = Component$$1.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component$$1.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component$$1;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component$$1.displayName || Component$$1.name;
    var newApiName =
      typeof Component$$1.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component$$1.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component$$1;
}

var reactLifecyclesCompat_es = /*#__PURE__*/Object.freeze({
    polyfill: polyfill
});

var ChildMapping = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;
exports.getInitialChildMapping = getInitialChildMapping;
exports.getNextChildMapping = getNextChildMapping;



/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, React.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) React.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}

/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  }

  // For each key of `next`, the list of keys to insert before that key in
  // the combined list
  var nextKeysPending = Object.create(null);

  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i = void 0;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }

  // Finally, add the keys which didn't appear before any key in `next`
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, React.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}

function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);

  Object.keys(children).forEach(function (key) {
    var child = children[key];

    if (!(0, React.isValidElement)(child)) return;

    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;

    var prevChild = prevChildMapping[key];
    var isLeaving = (0, React.isValidElement)(prevChild) && !prevChild.props.in;

    // item is new (entering)
    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, React.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, React.cloneElement)(child, { in: false });
    } else if (hasNext && hasPrev && (0, React.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, React.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });

  return children;
}
});

unwrapExports(ChildMapping);
var ChildMapping_1 = ChildMapping.getChildMapping;
var ChildMapping_2 = ChildMapping.mergeChildMappings;
var ChildMapping_3 = ChildMapping.getInitialChildMapping;
var ChildMapping_4 = ChildMapping.getNextChildMapping;

var TransitionGroup_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



var _propTypes2 = _interopRequireDefault(PropTypes);



var _react2 = _interopRequireDefault(React);





function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var propTypes = {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: _propTypes2.default.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   */
  children: _propTypes2.default.node,

  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: _propTypes2.default.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: _propTypes2.default.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: _propTypes2.default.bool,

  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: _propTypes2.default.func
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }

  /**
   * The `<TransitionGroup>` component manages a set of `<Transition>` components
   * in a list. Like with the `<Transition>` component, `<TransitionGroup>`, is a
   * state machine for managing the mounting and unmounting of components over
   * time.
   *
   * Consider the example below using the `Fade` CSS transition from before.
   * As items are removed or added to the TodoList the `in` prop is toggled
   * automatically by the `<TransitionGroup>`. You can use _any_ `<Transition>`
   * component in a `<TransitionGroup>`, not just css.
   *
   * ## Example
   *
   * <iframe src="https://codesandbox.io/embed/00rqyo26kn?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual `<Transition>`
   * components. This means you can mix and match animations across different
   * list items.
   */
};
var TransitionGroup$$1 = function (_React$Component) {
  _inherits(TransitionGroup$$1, _React$Component);

  function TransitionGroup$$1(props, context) {
    _classCallCheck(this, TransitionGroup$$1);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

    var handleExited = _this.handleExited.bind(_this);

    // Initial children should all be entering, dependent on appear
    _this.state = {
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  TransitionGroup$$1.prototype.getChildContext = function getChildContext() {
    return {
      transitionGroup: { isMounting: !this.appeared }
    };
  };

  TransitionGroup$$1.prototype.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };

  TransitionGroup$$1.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;

    return {
      children: firstRender ? (0, ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };

  TransitionGroup$$1.prototype.handleExited = function handleExited(child, node) {
    var currentChildMapping = (0, ChildMapping.getChildMapping)(this.props.children);

    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    this.setState(function (state) {
      var children = _extends({}, state.children);

      delete children[child.key];
      return { children: children };
    });
  };

  TransitionGroup$$1.prototype.render = function render() {
    var _props = this.props,
        Component$$1 = _props.component,
        childFactory = _props.childFactory,
        props = _objectWithoutProperties(_props, ['component', 'childFactory']);

    var children = values(this.state.children).map(childFactory);

    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component$$1 === null) {
      return children;
    }
    return _react2.default.createElement(
      Component$$1,
      props,
      children
    );
  };

  return TransitionGroup$$1;
}(_react2.default.Component);

TransitionGroup$$1.childContextTypes = {
  transitionGroup: _propTypes2.default.object.isRequired
};


TransitionGroup$$1.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
TransitionGroup$$1.defaultProps = defaultProps;

exports.default = (0, reactLifecyclesCompat_es.polyfill)(TransitionGroup$$1);
module.exports = exports['default'];
});

var ReactTransitionGroup = unwrapExports(TransitionGroup_1);

var DIRECTION_LEFT = 0;
var DIRECTION_RIGHT = 1;

function setOverlay(enabled, _ref) {
    var color = _ref.color,
        transition = _ref.transition,
        mode = _ref.mode;

    window.chayns.invokeCall({
        action: 116,
        value: {
            enabled: enabled,
            color: color,
            transition: transition,
            mode: mode,
            callback: 'window._chaynsCallbacks.showOverlay'
        }
    });

    return new Promise(function (resolve) {
        window._chaynsCallbacks.showOverlay = resolve;
    });
}

function showOverlay(config) {
    return setOverlay(true, config);
}

function hideOverlay(config) {
    if (config) {
        // eslint-disable-next-line no-param-reassign
        delete config.color;
    }

    return setOverlay(false, config);
}

var _createClass$5 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$4, _temp$3;

function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$5(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$5(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';

var Modal = (_temp$3 = _class$4 = function (_Component) {
    _inherits$5(Modal, _Component);

    function Modal() {
        _classCallCheck$5(this, Modal);

        var _this = _possibleConstructorReturn$5(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this));

        _this.state = {};
        return _this;
    }

    _createClass$5(Modal, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var status = this.props.status;

            var nextStatus = nextProps.status;

            if (status !== ENTERING && nextStatus === ENTERING) {
                return this.componentWillEnter();
            }

            if (status !== ENTERED && nextStatus === ENTERED) {
                return this.componentDidEnter();
            }

            if (status !== EXITING && nextStatus === EXITING) {
                return this.componentWillLeave();
            }

            return null;
        }
    }, {
        key: 'getModalWidth',
        value: function getModalWidth() {
            var _props = this.props,
                width = _props.width,
                left = _props.left,
                right = _props.right,
                direction = _props.direction;


            if (direction === DIRECTION_LEFT) {
                return parseFloat(width) + 2 * parseFloat(right) + 'px';
            }

            return parseFloat(width) + 2 * parseFloat(left) + 'px';
        }
    }, {
        key: 'getWidth',
        value: function getWidth() {
            var _props2 = this.props,
                width = _props2.width,
                expandedWidth = _props2.expandedWidth;
            var _state = this.state,
                didLeave = _state.didLeave,
                willEnter = _state.willEnter,
                willEnterActive = _state.willEnterActive,
                didEnter = _state.didEnter,
                willLeave = _state.willLeave,
                willLeaveActive = _state.willLeaveActive;


            if (!didLeave && !didEnter && !willEnterActive && !willEnter && !willLeave && !willLeaveActive) {
                return width;
            }

            if (willEnter || willLeaveActive) {
                return width;
            }

            return window.chayns.utils.isString(expandedWidth) ? expandedWidth : expandedWidth + 'px';
        }
    }, {
        key: 'componentWillEnter',
        value: function componentWillEnter() {
            var _this2 = this;

            var closeOverlay = this.props.closeOverlay;


            if (window.debugLevel >= 2) {
                console.debug('inspect-element (Modal) component: componentWillEnter', this.props, this.state);
            }

            this.setState({
                willEnter: true,
                willEnterActive: false,
                didEnter: false,
                willLeave: false,
                willLeaveActive: false,
                didLeave: false
            });

            window.setTimeout(function () {
                showOverlay({
                    color: 'rgba(0, 0, 0, 0.8)',
                    transition: '.55s',
                    mode: 1
                }).then(function () {
                    if (closeOverlay) {
                        closeOverlay();
                    }
                }).catch(function () {});

                _this2.setState({
                    willEnter: false,
                    willEnterActive: true,
                    didEnter: false,
                    willLeave: false,
                    willLeaveActive: false,
                    didLeave: false
                });
            }, 100);
        }
    }, {
        key: 'componentDidEnter',
        value: function componentDidEnter() {
            if (window.debugLevel >= 2) {
                console.debug('inspect-element (Modal) component: componentDidEnter', this.props, this.state);
            }

            this.setState({
                willEnter: false,
                willEnterActive: false,
                didEnter: true,
                willLeave: false,
                willLeaveActive: false,
                didLeave: false
            });

            if (this._content) {
                var _content$getBoundingC = this._content.getBoundingClientRect(),
                    bottom = _content$getBoundingC.bottom;

                var _document$body$getBou = document.body.getBoundingClientRect(),
                    height = _document$body$getBou.height;

                var newPadding = bottom - height + 25;
                var tapp = document.querySelector('.tapp') || document.body;

                if (tapp && bottom > height && tapp.style.borderBottomWidth < newPadding) {
                    tapp.style.borderBottomWidth = newPadding + 'px';
                    tapp.style.borderBottomStyle = 'solid';
                    tapp.style.borderBottomColor = 'transparent';
                }
            }
        }
    }, {
        key: 'componentWillLeave',
        value: function componentWillLeave() {
            var _this3 = this;

            if (window.debugLevel >= 2) {
                console.debug('inspect-element (Modal) component: componentWillLeave', this.props, this.state);
            }

            this.setState({
                willEnter: false,
                willEnterActive: false,
                didEnter: false,
                willLeave: true,
                willLeaveActive: false,
                didLeave: false
            });

            window.setTimeout(function () {
                _this3.setState({
                    willEnter: false,
                    willEnterActive: false,
                    didEnter: false,
                    willLeave: false,
                    willLeaveActive: true,
                    didLeave: false
                });

                hideOverlay({
                    transition: '.55s',
                    mode: 1
                });
            }, 100);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props3 = this.props,
                top = _props3.top,
                renderComponent = _props3.renderComponent,
                closeOverlay = _props3.closeOverlay,
                direction = _props3.direction;
            var _state2 = this.state,
                willEnter = _state2.willEnter,
                willEnterActive = _state2.willEnterActive,
                willLeave = _state2.willLeave,
                willLeaveActive = _state2.willLeaveActive,
                didEnter = _state2.didEnter;


            if (window.debugLevel >= 2) {
                console.debug('render inspect-element (Modal) component', this.props, this.state);
            }

            return React.createElement(
                'span',
                {
                    className: classnames('modal', {
                        'modal--visible': didEnter,
                        'modal--enter': willEnter,
                        'modal--enter--active': willEnterActive,
                        'modal--leave': willLeave,
                        'modal--leave--active': willLeaveActive,
                        'modal--left': direction === DIRECTION_LEFT,
                        'modal--right': direction === DIRECTION_RIGHT
                    }),
                    style: {
                        top: top,
                        left: direction === DIRECTION_RIGHT ? 0 : null,
                        right: direction === DIRECTION_LEFT ? 0 : null,
                        width: this.getModalWidth()
                    }
                },
                React.createElement('div', {
                    className: 'modal--overlay',
                    onClick: closeOverlay
                }),
                React.createElement(
                    'div',
                    {
                        className: 'modal--content',
                        style: {
                            width: this.getWidth()
                        },
                        ref: function ref(_ref) {
                            _this4._content = _ref;
                        }
                    },
                    renderComponent({
                        visible: didEnter,
                        enter: willEnter,
                        enterActive: willEnterActive,
                        leave: willLeave,
                        leaveActive: willLeaveActive
                    })
                )
            );
        }
    }]);

    return Modal;
}(Component), _class$4.defaultProps = {
    top: undefined,
    left: undefined,
    right: undefined,
    direction: undefined,
    width: undefined,
    expandedWidth: undefined
}, _temp$3);

var _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass$6 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$6(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$6(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ModalTransition = function (_Component) {
    _inherits$6(ModalTransition, _Component);

    function ModalTransition() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck$6(this, ModalTransition);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$6(this, (_ref = ModalTransition.__proto__ || Object.getPrototypeOf(ModalTransition)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _temp), _possibleConstructorReturn$6(_this, _ret);
    }

    _createClass$6(ModalTransition, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            return React.createElement(
                Transition,
                _extends$4({
                    timeout: 650,
                    mountOnEnter: true,
                    unmountOnExit: true,
                    appear: true
                }, this.props),
                function (status) {
                    return React.createElement(Modal, _extends$4({
                        status: status
                    }, _this2.props));
                }
            );
        }
    }]);

    return ModalTransition;
}(Component);

var _extends$5 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass$7 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$5, _temp$4;

function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$7(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$7(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InspectElement = (_temp$4 = _class$5 = function (_Component) {
    _inherits$7(InspectElement, _Component);

    function InspectElement() {
        _classCallCheck$7(this, InspectElement);

        var _this = _possibleConstructorReturn$7(this, (InspectElement.__proto__ || Object.getPrototypeOf(InspectElement)).call(this));

        _this.openOverlay = function () {
            window.clearTimeout(_this.closeTimeout);

            if (window.debugLevel >= 1) {
                console.debug('inspect-element component: openOverlay', _this.props, _this.state);
            }

            var boundingClientRect = _this._container.getBoundingClientRect();
            var bodyWidth = document.body.getBoundingClientRect().width;

            var tileMiddle = boundingClientRect.left + boundingClientRect.width / 2;
            var bodyMiddle = bodyWidth / 2;

            _this.setState({
                modalTop: boundingClientRect.top + 'px',
                modalLeft: boundingClientRect.left + 'px',
                modalRight: bodyWidth - boundingClientRect.right + 'px',
                modalWidth: boundingClientRect.width + 'px',
                modalDirection: tileMiddle < bodyMiddle ? DIRECTION_LEFT : DIRECTION_RIGHT,
                showModal: true,
                showTile: false
            });
        };

        _this.closeOverlay = function () {
            var _this$props = _this.props,
                onClose = _this$props.onClose,
                onClosed = _this$props.onClosed;


            if (window.debugLevel >= 1) {
                console.debug('inspect-element component: closeOverlay', _this.props, _this.state);
            }

            _this.setState({
                showModal: false
            });

            if (onClose) {
                onClose();
            }

            _this.closeTimeout = window.setTimeout(function () {
                _this.setState({
                    showTile: true
                });

                if (onClosed) {
                    onClosed();
                }
            }, 650);
        };

        _this.renderComponent = function (props) {
            var _this$props2 = _this.props,
                WrapperComponent = _this$props2.component,
                children = _this$props2.children;


            if (!WrapperComponent) {
                return null;
            }

            return React.createElement(
                WrapperComponent,
                _extends$5({}, _this.props, _this.getCustomProps(), props),
                children
            );
        };

        _this.state = {
            showModal: false,
            showTile: true
        };
        return _this;
    }

    _createClass$7(InspectElement, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var expanded = this.props.expanded;


            if (expanded) {
                this.openOverlay();
            } else {
                this.closeOverlay();
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var expanded = this.props.expanded;
            var showModal = this.state.showModal;


            if (expanded !== nextProps.expanded && nextProps.expanded !== showModal) {
                if (nextProps.expanded) {
                    this.openOverlay();
                } else {
                    this.closeOverlay();
                }
            }
        }
    }, {
        key: 'getCustomProps',
        value: function getCustomProps() {
            return {
                openOverlay: this.openOverlay,
                closeOverlay: this.closeOverlay
            };
        }
    }, {
        key: 'renderTile',
        value: function renderTile() {
            var _this2 = this;

            var _state = this.state,
                showTile = _state.showTile,
                modalWidth = _state.modalWidth;


            return React.createElement(
                'span',
                {
                    style: {
                        visibility: !showTile ? 'hidden' : 'visible',
                        width: modalWidth
                    },
                    className: 'inspect-element-animation__tile',
                    ref: function ref(_ref) {
                        _this2._container = _ref;
                    }
                },
                this.renderComponent()
            );
        }
    }, {
        key: 'renderModal',
        value: function renderModal() {
            var expandedWidth = this.props.expandedWidth;
            var _state2 = this.state,
                showModal = _state2.showModal,
                modalTop = _state2.modalTop,
                modalLeft = _state2.modalLeft,
                modalRight = _state2.modalRight,
                modalWidth = _state2.modalWidth,
                modalDirection = _state2.modalDirection;


            return React.createElement(
                ReactTransitionGroup,
                null,
                showModal && React.createElement(ModalTransition, {
                    show: showModal,
                    top: modalTop,
                    left: modalLeft,
                    right: modalRight,
                    width: modalWidth,
                    direction: modalDirection,
                    expandedWidth: expandedWidth,
                    renderComponent: this.renderComponent,
                    closeOverlay: this.closeOverlay
                })
            );
        }
    }, {
        key: 'render',
        value: function render() {
            if (window.debugLevel >= 1) {
                console.debug('render inspect-element component', this.props, this.state);
            }

            return React.createElement(
                'span',
                { className: 'inspect-element-animation' },
                this.renderTile(),
                this.renderModal()
            );
        }
    }]);

    return InspectElement;
}(Component), _class$5.defaultProps = {
    expanded: false,
    children: null,
    expandedWidth: null,
    onClose: null,
    onClosed: null
}, _temp$4);

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

var _createClass$8 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$8(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$8(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ccPortals = {};

var Portal = /* #__PURE__ */(function () {
    var _class, _temp2;

    return _temp2 = _class = function (_Component) {
        _inherits$8(Portal, _Component);

        function Portal() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck$8(this, Portal);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn$8(this, (_ref = Portal.__proto__ || Object.getPrototypeOf(Portal)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                children: null
            }, _temp), _possibleConstructorReturn$8(_this, _ret);
        }

        _createClass$8(Portal, [{
            key: 'componentDidMount',
            value: function componentDidMount() {
                var _props = this.props,
                    children = _props.children,
                    name = _props.name,
                    preventPortal = _props.preventPortal;


                if (!children && name && !preventPortal) {
                    ccPortals[name] = this;
                }

                if (children && name && ccPortals[name]) {
                    ccPortals[name].setChildren(children);
                }
            }
        }, {
            key: 'componentWillReceiveProps',
            value: function componentWillReceiveProps(nextProps) {
                var name = nextProps.name,
                    children = nextProps.children;


                if (children && name && ccPortals[name]) {
                    ccPortals[name].setChildren(children);
                }
            }
        }, {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
                var _props2 = this.props,
                    children = _props2.children,
                    name = _props2.name,
                    preventPortal = _props2.preventPortal;


                if (!children && !preventPortal && name && ccPortals[name] === this) {
                    delete ccPortals[name];
                }

                if ((children || preventPortal) && name && ccPortals[name]) {
                    ccPortals[name].setChildren(null);
                }
            }
        }, {
            key: 'setChildren',
            value: function setChildren(children) {
                this.setState({ children: children });
            }
        }, {
            key: 'render',
            value: function render() {
                var children = this.props.children;
                var childrenState = this.state.children;


                if (children || !childrenState) {
                    return null;
                }

                return React.createElement(
                    'div',
                    { className: 'cc__portal' },
                    childrenState
                );
            }
        }]);

        return Portal;
    }(Component), _class.defaultProps = {
        preventPortal: false,
        children: null
    }, _temp2;
})();

var _extends$6 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass$9 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$9(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$9(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var POSITION_LEFT = 0;
var POSITION_MIDDLE = 1;
var POSITION_RIGHT = 2;
var POSITION_UNKNOWN = POSITION_LEFT;

var ANIMATION_CSS_TIMEOUT = 10;
var ANIMATION_TIME = 300;

var TAPP_MARGIN = 0;

var ScaleIn = function (_Component) {
    _inherits$9(ScaleIn, _Component);

    function ScaleIn() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck$9(this, ScaleIn);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$9(this, (_ref = ScaleIn.__proto__ || Object.getPrototypeOf(ScaleIn)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            position: POSITION_UNKNOWN,
            show: false,
            animationActive: false
        }, _temp), _possibleConstructorReturn$9(_this, _ret);
    }

    _createClass$9(ScaleIn, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                animate = _props.animate,
                show = _props.in;


            animate.setAnimationListener(this);

            if (show) {
                this.show();
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var show = this.props.in;


            if (nextProps.in !== show) {
                if (nextProps.in) {
                    this.show();
                } else {
                    this.hide();
                }
            }
        }
    }, {
        key: 'setWrapperReference',
        value: function setWrapperReference(ref) {
            this.updateClasses(ref);
        }
    }, {
        key: 'show',
        value: function show() {
            var _this2 = this;

            this.setState({
                render: true
            });

            window.setTimeout(function () {
                _this2.setState({
                    show: true,
                    animationActive: true
                });

                window.setTimeout(function () {
                    _this2.setState({
                        animationActive: false
                    });
                }, ANIMATION_TIME);
            }, ANIMATION_CSS_TIMEOUT);
        }
    }, {
        key: 'hide',
        value: function hide() {
            var _this3 = this;

            window.setTimeout(function () {
                _this3.setState({
                    show: false,
                    animationActive: true
                });

                window.setTimeout(function () {
                    _this3.setState({
                        render: false,
                        animationActive: false
                    });
                }, ANIMATION_TIME);
            }, ANIMATION_CSS_TIMEOUT);
        }
    }, {
        key: 'updateClasses',
        value: function updateClasses(wrapper) {
            var bodyWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

            var _wrapper$getBoundingC = wrapper.getBoundingClientRect(),
                left = _wrapper$getBoundingC.left,
                right = _wrapper$getBoundingC.right,
                wrapperTop = _wrapper$getBoundingC.top;

            var diffRight = bodyWidth - right;

            var top = wrapperTop;
            if (chayns.env.isApp) {
                var _document = document,
                    body = _document.body,
                    documentElement = _document.documentElement;


                if (body.scrollTop) {
                    top += body.scrollTop;
                } else if (documentElement.scrollTop) {
                    top += documentElement.scrollTop;
                }
            }

            var position = left > diffRight ? POSITION_RIGHT : POSITION_LEFT;

            if (right < 3 / 4 * bodyWidth) {
                var partWidth = 1 / 3 * bodyWidth;
                position = Math.floor(left / partWidth);
            }

            this.setState({
                position: position,
                top: top
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                props = _props2.props,
                BaseComponent = _props2.component;
            var _state = this.state,
                animationActive = _state.animationActive,
                top = _state.top,
                render = _state.render,
                show = _state.show,
                position = _state.position;


            var classNames = classnames('cc__animation__scale-in', {
                'cc__animation__scale-in--left': position === POSITION_LEFT,
                'cc__animation__scale-in--right': position === POSITION_RIGHT,
                'cc__animation__scale-in--middle': position === POSITION_MIDDLE,
                'cc__animation__scale-in--show': show
            });

            if (!render) {
                return null;
            }

            var tappMargin = ScaleIn.getTappMargin();

            return React.createElement(
                Portal,
                { name: 'scale-in' },
                React.createElement(
                    'div',
                    {
                        className: classNames,
                        style: {
                            top: top + 'px',
                            left: tappMargin + 'px',
                            width: 'calc(100% - ' + 2 * tappMargin + 'px)'
                        }
                    },
                    React.createElement(BaseComponent, _extends$6({}, props, {
                        animationActive: animationActive
                    }))
                )
            );
        }
    }], [{
        key: 'getTappMargin',
        value: function getTappMargin() {
            if (TAPP_MARGIN) {
                return TAPP_MARGIN;
            }

            var tapp = document.querySelector('.tapp') || document.body;

            if (tapp) {
                var _window$getComputedSt = window.getComputedStyle(tapp),
                    marginLeft = _window$getComputedSt.marginLeft,
                    paddingLeft = _window$getComputedSt.paddingLeft;

                TAPP_MARGIN = (parseInt(marginLeft, 10) || 0) + (parseInt(paddingLeft, 10) || 0);
            }

            return TAPP_MARGIN || 0;
        }
    }]);

    return ScaleIn;
}(Component);

window.onresize = function () {
    TAPP_MARGIN = 0;
    ScaleIn.getTappMargin();
};

ScaleIn.duplicate = true;
ScaleIn.wrapperClassName = 'cc__animate--scale-in';

var _extends$7 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass$a = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty$4(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$a(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$a(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$a(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var animate = function animate(AnimationComponent, config) {
    return function (BaseComponent) {
        var _class, _temp;

        return _temp = _class = function (_Component) {
            _inherits$a(AnimateComponent, _Component);

            function AnimateComponent() {
                _classCallCheck$a(this, AnimateComponent);

                return _possibleConstructorReturn$a(this, (AnimateComponent.__proto__ || Object.getPrototypeOf(AnimateComponent)).apply(this, arguments));
            }

            _createClass$a(AnimateComponent, [{
                key: 'componentDidMount',
                value: function componentDidMount() {
                    this.updateRefs();
                }
            }, {
                key: 'componentDidUpdate',
                value: function componentDidUpdate() {
                    this.updateRefs();
                }
            }, {
                key: 'setAnimationListener',
                value: function setAnimationListener(animation) {
                    this._animation = animation;

                    this.updateRefs();
                }
            }, {
                key: 'updateRefs',
                value: function updateRefs() {
                    if (!this._wrapper || !this._animation) {
                        return;
                    }

                    if (this._animation.setWrapperReference) {
                        this._animation.setWrapperReference(this._wrapper);
                    }
                }
            }, {
                key: 'render',
                value: function render() {
                    var _this2 = this;

                    var show = this.props.in;


                    if (AnimationComponent.duplicate) {
                        var classNames = classnames('cc__animate', _defineProperty$4({}, AnimationComponent.wrapperClassName, AnimationComponent.wrapperClassName));

                        return React.createElement(
                            'div',
                            {
                                className: classNames,
                                ref: function ref(_ref) {
                                    _this2._wrapper = _ref;
                                }
                            },
                            React.createElement(AnimationComponent, {
                                key: 'shadow',
                                component: BaseComponent,
                                config: config,
                                'in': show,
                                props: objectAssign({
                                    animationClone: true
                                }, this.props),
                                animate: this
                            }),
                            React.createElement(BaseComponent, _extends$7({
                                key: 'base'
                            }, this.props))
                        );
                    }

                    return React.createElement(AnimationComponent, {
                        key: 'shadow',
                        component: BaseComponent,
                        config: config,
                        'in': show,
                        props: this.props,
                        animate: this
                    });
                }
            }]);

            return AnimateComponent;
        }(Component), _class.defaultProps = {
            in: false
        }, _temp;
    };
};

var index = {
    SCALE_IN: ScaleIn
};

var overlay = document.createElement('div');
var closeListener = null;

// Timeouts
var hideTimeout = void 0;
var removeChildTimeout = void 0;
var showTimeout = void 0;
var setListenerTimeout = void 0;

function initOverlay() {
    overlay.style.position = 'fixed';

    overlay.style.top = '0';
    overlay.style.left = '0';
    overlay.style.right = '0';
    overlay.style.bottom = '0';

    document.body.appendChild(overlay);
}

function hideOverlay$1() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        transitionTime = _ref.transitionTime,
        color = _ref.color;

    clearInterval(showTimeout);
    clearInterval(setListenerTimeout);

    requestAnimationFrame(function () {
        hideOverlay({
            color: color,
            transition: transitionTime + 'ms',
            mode: 1
        });

        overlay.style.transition = 'background-color ' + (transitionTime || 0) + 'ms ease';

        hideTimeout = window.setTimeout(function () {
            requestAnimationFrame(function () {
                overlay.style.backgroundColor = 'transparent';
            });
        }, transitionTime ? 10 : 0);

        removeChildTimeout = window.setTimeout(function () {
            if (overlay.parentNode) {
                overlay.parentNode.removeChild(overlay);
            }
        }, transitionTime || 0);
    });
}

function showOverlay$1() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        transitionTime = _ref2.transitionTime,
        zIndex = _ref2.zIndex,
        color = _ref2.color,
        onClose = _ref2.onClose;

    initOverlay();

    clearInterval(hideTimeout);
    clearInterval(removeChildTimeout);

    closeListener = onClose;

    requestAnimationFrame(function () {
        showOverlay({
            color: color,
            transition: transitionTime + 'ms',
            mode: 1
        }).then(function () {
            if (closeListener) {
                closeListener();
            }
        });

        overlay.style.zIndex = zIndex;
        overlay.style.transition = 'background-color ' + (transitionTime || 0) + 'ms ease';

        overlay.onclick = null;
        setListenerTimeout = window.setTimeout(function () {
            overlay.onclick = function () {
                if (closeListener) {
                    closeListener();
                }
            };
        }, transitionTime || 0);

        showTimeout = window.setTimeout(function () {
            requestAnimationFrame(function () {
                overlay.style.backgroundColor = color;
            });
        }, transitionTime ? 10 : 0);
    });
}

var OverlayHelper = {
    showOverlay: showOverlay$1,
    hideOverlay: hideOverlay$1
};

var _extends$8 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var connectToOverlay = function connectToOverlay() {
    return function (BaseComponent) {
        return function (props) {
            return React.createElement(BaseComponent, _extends$8({
                showOverlay: showOverlay$1,
                hideOverlay: hideOverlay$1
            }, props));
        };
    };
};

/**
 * Compares two dates with year, month and date (looser equality than == operator)
 * @param {Date} date1 - First date for comparison
 * @param {Date} date2 - First date for comparison
 */
function areDatesEqual(date1, date2) {
  return date1.getUTCFullYear() === date2.getUTCFullYear() && date1.getUTCMonth() === date2.getUTCMonth() && date1.getUTCDate() === date2.getUTCDate();
}

var _createClass$b = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$6, _temp$5;

function _classCallCheck$b(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$b(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$b(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DayItem = (_temp$5 = _class$6 = function (_Component) {
    _inherits$b(DayItem, _Component);

    function DayItem() {
        _classCallCheck$b(this, DayItem);

        var _this = _possibleConstructorReturn$b(this, (DayItem.__proto__ || Object.getPrototypeOf(DayItem)).call(this));

        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }

    _createClass$b(DayItem, [{
        key: 'onClick',
        value: function onClick() {
            var _props = this.props,
                onDateSelect = _props.onDateSelect,
                day = _props.day;


            if (onDateSelect) {
                onDateSelect(day.date);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                day = _props2.day,
                activateAll = _props2.activateAll,
                activated = _props2.activated,
                selected = _props2.selected,
                highlighted = _props2.highlighted;


            var _active = activateAll;
            var _selected = false;
            var _marked = false;
            var _highlighted = false;
            var _onClick = false;
            var _className = 'day__item day-in-month';
            var _style = {};

            if (_active) {
                _onClick = true;
            }

            if (activated) {
                for (var i = 0; i < activated.length; i += 1) {
                    if (areDatesEqual(activated[i], day.date)) {
                        _active = true;
                        _marked = true;
                        _onClick = true;
                        break;
                    }
                }
            }

            if (selected && areDatesEqual(selected, day.date)) {
                _active = true;
                _selected = true; // `-is-active-is-selected${_marked} chayns__color--100`;
            }

            if (highlighted instanceof Array) {
                // TODO: Merge data in MonthTable
                for (var k = 0; k < highlighted.length; k += 1) {
                    for (var l = 0; highlighted[k].dates && l < highlighted[k].dates.length; l += 1) {
                        if (areDatesEqual(highlighted[k].dates[l], day.date)) {
                            _active = true;
                            _marked = true;
                            _onClick = true;
                            _highlighted = true;
                            if (highlighted[k].color) {
                                _style.backgroundColor = '' + highlighted[k].color;
                            }
                        }
                    }
                }
            } else if (highlighted && highlighted.dates) {
                for (var _k = 0; _k < highlighted.dates.length; _k += 1) {
                    if (areDatesEqual(highlighted.dates[_k], day.date)) {
                        _active = true;
                        _marked = true;
                        _onClick = true;
                        _highlighted = true;
                        if (highlighted.color) {
                            _style.backgroundColor = '' + highlighted.color;
                        }
                        break;
                    }
                }
            }

            if (day.inMonth) {
                _className = classnames('day__item day-in-month', {
                    'is-active': _active,
                    'is-deactive': !_active,
                    'is-selected': _selected,
                    'is-marked': _marked,
                    'is-marked-is-highlighted': _marked && _highlighted,
                    'chayns__background-color--80 chayns__color--5': _active && _marked,
                    'chayns__background-color--80': !_active && _marked && !_selected

                });

                return React.createElement(
                    'div',
                    {
                        className: _className,
                        style: _style,
                        onClick: _onClick && this.onClick
                    },
                    day.date.getDate()
                );
            }

            return React.createElement(
                'div',
                {
                    className: 'day__item day-out-month'
                },
                day.date.getDate()
            );
        }
    }]);

    return DayItem;
}(Component), _class$6.defaultProps = {
    selected: null,
    activated: false,
    highlighted: false,
    activateAll: null
}, _temp$5);

var _createClass$c = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$7, _temp$6;

function _classCallCheck$c(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$c(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$c(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DAYS = ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'];

var MonthTable = (_temp$6 = _class$7 = function (_Component) {
    _inherits$c(MonthTable, _Component);

    function MonthTable() {
        _classCallCheck$c(this, MonthTable);

        return _possibleConstructorReturn$c(this, (MonthTable.__proto__ || Object.getPrototypeOf(MonthTable)).apply(this, arguments));
    }

    _createClass$c(MonthTable, [{
        key: 'createTable',
        value: function createTable() {
            var startDate = this.props.startDate;


            var _table = [];
            var normalWeekStart = void 0;

            if (startDate.getDay() > 0) {
                normalWeekStart = new Date(startDate.getFullYear(), startDate.getMonth(), 9 - startDate.getDay());
            } else {
                normalWeekStart = new Date(startDate.getFullYear(), startDate.getMonth(), 2 - startDate.getDay());
            }

            for (var i = 0; i < 6; i += 1) {
                var _row = [];

                if (i === 0) {
                    if (startDate.getDay() > 0) {
                        for (var j = 2; j <= startDate.getDay(); j += 1) {
                            _row.push({
                                date: new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDay() * -1 + j),
                                inMonth: false
                            });
                        }
                        for (var k = 1; k <= 8 - startDate.getDay(); k += 1) {
                            _row.push({
                                date: new Date(startDate.getFullYear(), startDate.getMonth(), k),
                                inMonth: true
                            });
                        }
                    } else {
                        for (var _j = 6; _j > 0; _j -= 1) {
                            _row.push({
                                date: new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDay() - _j),
                                inMonth: false
                            });
                        }

                        _row.push({
                            date: new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate()),
                            inMonth: true
                        });
                    }
                } else {
                    for (var _j2 = 0; _j2 < 7; _j2 += 1) {
                        var _date = new Date(normalWeekStart.getFullYear(), normalWeekStart.getMonth(), normalWeekStart.getDate() + _j2);
                        if (_date.getMonth() === startDate.getMonth()) {
                            _row.push({
                                date: _date,
                                inMonth: true
                            });
                        } else {
                            _row.push({
                                date: _date,
                                inMonth: false
                            });
                        }
                    }
                    normalWeekStart = new Date(normalWeekStart.getFullYear(), normalWeekStart.getMonth(), normalWeekStart.getDate() + 7);
                }
                _table.push(_row);
            }
            return _table;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                activateAll = _props.activateAll,
                activated = _props.activated,
                selected = _props.selected,
                highlighted = _props.highlighted,
                onDateSelect = _props.onDateSelect;

            var _table = this.createTable();

            return React.createElement(
                'div',
                { className: 'month__table noselect' },
                React.createElement(
                    'div',
                    { className: 'day__row' },
                    DAYS.map(function (day, index) {
                        return React.createElement(
                            'div',
                            {
                                className: 'day__item day-text chayns__color--100',
                                key: index
                            },
                            day
                        );
                    })
                ),
                _table.map(function (row, index) {
                    return React.createElement(
                        'div',
                        {
                            className: 'day__row',
                            key: index
                        },
                        row.map(function (day) {
                            return React.createElement(DayItem, {
                                key: day.date.getTime(),
                                day: day,
                                activateAll: activateAll,
                                activated: activated,
                                selected: selected,
                                highlighted: highlighted,
                                onDateSelect: onDateSelect
                            });
                        })
                    );
                })
            );
        }
    }]);

    return MonthTable;
}(Component), _class$7.defaultProps = {
    selected: null,
    activated: false,
    highlighted: false,
    activateAll: null
}, _temp$6);

var Month = function Month(_ref) {
    var title = _ref.title,
        className = _ref.className,
        onDateSelect = _ref.onDateSelect,
        startDate = _ref.startDate,
        endDate = _ref.endDate,
        selected = _ref.selected,
        activated = _ref.activated,
        highlighted = _ref.highlighted,
        activateAll = _ref.activateAll;
    return React.createElement(
        'div',
        { className: 'month__item ' + (className || '') },
        React.createElement(
            'div',
            { className: 'month__title' },
            title || ''
        ),
        React.createElement(MonthTable, {
            onDateSelect: onDateSelect,
            startDate: startDate,
            endDate: endDate,
            selected: selected,
            activated: activated,
            highlighted: highlighted,
            activateAll: activateAll
        })
    );
};

Month.defaultProps = {
    title: '',
    className: '',
    selected: null,
    activated: false,
    highlighted: false,
    activateAll: null
};

var _createClass$d = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$8, _temp$7;

function _classCallCheck$d(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$d(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$d(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TODAY = new Date();
var TRANSITION_TIME = 300;
var MONTH_NAMES = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];

var Calendar = (_temp$7 = _class$8 = function (_Component) {
    _inherits$d(Calendar, _Component);

    function Calendar() {
        _classCallCheck$d(this, Calendar);

        var _this = _possibleConstructorReturn$d(this, (Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call(this));

        _this.state = {
            focus: new Date(),
            animationKey: 0.05,
            months: [],
            animation: ''
        };

        _this.navigateLeftOnClick = _this.navigateLeftOnClick.bind(_this);
        _this.navigateRightOnClick = _this.navigateRightOnClick.bind(_this);

        _this.handleTouchStart = _this.handleTouchStart.bind(_this);
        _this.handleTouchMove = _this.handleTouchMove.bind(_this);
        _this.handleTouchEnd = _this.handleTouchEnd.bind(_this);
        return _this;
    }

    _createClass$d(Calendar, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var selected = this.props.selected; // TODO: SELECTED SHOULD NOT BE OUTSIDE THE START AND END TIME. ADDITIONALLY SELECTED SHOULD BE THE FIRST DATE IN TIME CONTEXT, NOT THE FIRST DATE OF THE LIST

            var active = new Date(selected.getFullYear(), selected.getMonth(), selected.getDate());
            this.setMonths(active);
        }
    }, {
        key: 'setMonths',
        value: function setMonths(_focus) {
            var _leftHidden = new Date(_focus.getFullYear(), _focus.getMonth() - 1, 1);
            var _rightShown = new Date(_focus.getFullYear(), _focus.getMonth() + 1, 1);
            var _rightHidden = new Date(_focus.getFullYear(), _focus.getMonth() + 2, 1);

            this.setState({
                focus: _focus,
                months: [{
                    title: MONTH_NAMES[_leftHidden.getMonth()],
                    className: 'left__hidden month',
                    startDate: _leftHidden,
                    endDate: new Date(_leftHidden.getFullYear(), _leftHidden.getMonth() + 1, 0)
                }, {
                    title: MONTH_NAMES[_focus.getMonth()],
                    className: 'left__shown month',
                    startDate: new Date(_focus.getFullYear(), _focus.getMonth(), 1),
                    endDate: new Date(_focus.getFullYear(), _focus.getMonth() + 1, 0)
                }, {
                    title: MONTH_NAMES[_rightShown.getMonth()],
                    className: 'right__shown month',
                    startDate: _rightShown,
                    endDate: new Date(_rightShown.getFullYear(), _rightShown.getMonth() + 1, 0)
                }, {
                    title: MONTH_NAMES[_rightHidden.getMonth()],
                    className: 'right__hidden month',
                    startDate: _rightHidden,
                    endDate: new Date(_rightHidden.getFullYear(), _rightHidden.getMonth() + 1, 0)
                }]
            });
        }
    }, {
        key: 'getNavigateLeft',
        value: function getNavigateLeft() {
            var _props = this.props,
                activateAll = _props.activateAll,
                startDate = _props.startDate;
            var focus = this.state.focus;


            if (!startDate) {
                return !!activateAll;
            }

            if (startDate.getFullYear() < focus.getFullYear()) {
                return true;
            }

            if (startDate.getFullYear() === focus.getFullYear() && startDate.getMonth() < focus.getMonth()) {
                return true;
            }

            return false;
        }
    }, {
        key: 'getNavigateRight',
        value: function getNavigateRight() {
            var _props2 = this.props,
                activateAll = _props2.activateAll,
                endDate = _props2.endDate;
            var focus = this.state.focus;


            var FOCUS_FACTOR = window.screen.width < 450 ? 0 : 1;

            if (!endDate) {
                return !!activateAll;
            }

            if (endDate.getFullYear() > focus.getFullYear()) {
                return true;
            }

            if (endDate.getFullYear() === focus.getFullYear() && endDate.getMonth() - FOCUS_FACTOR > focus.getMonth()) {
                return true;
            }

            return false;
        }
    }, {
        key: 'navigateRightOnClick',
        value: function navigateRightOnClick() {
            if (!this.getNavigateRight()) {
                return;
            }

            var _state = this.state,
                focus = _state.focus,
                animationKey = _state.animationKey;


            var newFocus = new Date(focus.getFullYear(), focus.getMonth() + 1, 1);

            this.setMonths(newFocus);
            this.setState({
                animationKey: animationKey + 1,
                animation: 'right'
            });
        }
    }, {
        key: 'navigateLeftOnClick',
        value: function navigateLeftOnClick() {
            if (!this.getNavigateLeft()) {
                return;
            }

            var _state2 = this.state,
                focus = _state2.focus,
                animationKey = _state2.animationKey;


            var newFocus = new Date(focus.getFullYear(), focus.getMonth() - 1, 1);

            this.setMonths(newFocus);
            this.setState({
                animationKey: animationKey + 1,
                animation: 'left'
            });
        }

        /*
         TODO: DER KALENDAR MUSS SICH MIT POSITION VON HANDLE TOUCH MOVE BEWEGEN
         */

    }, {
        key: 'handleTouchStart',
        value: function handleTouchStart(event) {
            this.swipeX = event.touches[0].clientX;
        }
    }, {
        key: 'handleTouchMove',
        value: function handleTouchMove(event) {
            // console.log('ELEMENT',this.calendarMonths.offsetWidth);
            // this.move = -1*(this.swipeX-event.touches[0].clientX);
            // this.calendarMonths.style.transform= `translateX(${-1*(this.swipeX-event.touches[0].clientX)}px)`;

            this.moveSwipeX = event.touches[0].clientX;
        }
    }, {
        key: 'handleTouchEnd',
        value: function handleTouchEnd() {
            if (this.swipeX && this.moveSwipeX) {
                if (this.moveSwipeX >= this.swipeX + 60) {
                    this.navigateLeftOnClick();
                    this.swipeX = null;
                    this.moveSwipeX = null;
                    // this.move=null;
                } else if (this.moveSwipeX <= this.swipeX - 60) {
                    this.navigateRightOnClick();
                    this.swipeX = null;
                    this.moveSwipeX = null;
                }
            }
        }
    }, {
        key: 'renderMonths',
        value: function renderMonths() {
            var _props3 = this.props,
                startDate = _props3.startDate,
                activatedProp = _props3.activated,
                highlighted = _props3.highlighted,
                selected = _props3.selected,
                activateAll = _props3.activateAll,
                onDateSelect = _props3.onDateSelect;
            var _state3 = this.state,
                months = _state3.months,
                animation = _state3.animation;

            /**
             * TODO
             *
             * Hier müssen die Monate gerendert werden. Für jeden Monat sollten an dieser Stelle alle Tage in ein Array gespeichert werden.
             * Das ersparrt der 'MonthTable'-Komponente noch einmal über sämtliche Einträge eines Monats zu gehen um die aktive/highlighted/etc Tage
             * zu finden
             *
             * @type {null}
             * @private
             */

            var _startDate = startDate || null;
            var _activated = activatedProp && activatedProp.length > 0 ? activatedProp : null;
            var _highlighted = highlighted || null;

            return months.map(function (month, index) {
                var activated = [];
                var tempDates = [];
                var tempObj = [];
                var _selected = void 0;
                var tempHighlighted = [];

                if (month.startDate.getYear() === selected.getYear() && month.startDate.getMonth() === selected.getMonth()) {
                    _selected = selected;
                }

                for (var i = 0; _activated && i < _activated.length; i += 1) {
                    if (month.startDate.getYear() === _activated[i].getYear() && month.startDate.getMonth() === _activated[i].getMonth()) {
                        if (_startDate) {
                            if (_startDate.getYear() < _activated[i].getYear() || _startDate.getYear() === _activated[i].getYear() && _startDate.getMonth() < _activated[i].getMonth() || _startDate.getMonth() === _activated[i].getMonth() && _startDate.getDate() <= _activated[i].getDate()) {
                                activated.push(_activated[i]);
                            }
                        } else {
                            activated.push(_activated[i]);
                        }
                    }
                }

                if (activateAll) {
                    if (_highlighted instanceof Array) {
                        for (var j = 0; j < _highlighted.length; j += 1) {
                            var dates = [];

                            for (var k = 0; k < _highlighted[j].dates.length; k += 1) {
                                if (_highlighted[j].dates[k].getTime() >= month.startDate && _highlighted[j].dates[k].getTime() <= month.endDate) {
                                    dates.push(_highlighted[j].dates[k]);
                                }
                            }

                            if (dates.length > 0) {
                                tempObj.push({
                                    dates: dates,
                                    color: _highlighted[j].color
                                });
                            }
                        }
                    }
                } else if (activated) {
                    for (var _i = 0; _i < activated.length; _i += 1) {
                        if (_highlighted instanceof Array) {
                            for (var _j = 0; _j < _highlighted.length; _j += 1) {
                                var _dates = [];

                                for (var _k = 0; _k < _highlighted[_j].dates.length; _k += 1) {
                                    if (areDatesEqual(_highlighted[_j].dates[_k], activated[_i])) {
                                        _dates.push(_highlighted[_j].dates[_k]);
                                    }
                                }

                                if (_dates.length > 0) {
                                    tempObj.push({
                                        dates: _dates,
                                        color: _highlighted[_j].color
                                    });
                                }
                            }
                        } else if (_highlighted && _highlighted.dates) {
                            for (var _j2 = 0; _highlighted.dates.length < _j2; _j2 += 1) {
                                if (areDatesEqual(_highlighted.dates[_j2], activated[_i])) {
                                    tempDates.push(_highlighted.dates[_j2]);
                                }
                            }
                        }
                    }
                }

                if (tempDates.length > 0) {
                    tempHighlighted = {
                        dates: tempDates,
                        color: _highlighted.color
                    };
                }

                if (tempObj.length > 0) {
                    tempHighlighted = tempObj;
                }

                return React.createElement(
                    CSSTransition,
                    {
                        classNames: animation,
                        timeout: {
                            enter: TRANSITION_TIME
                        },
                        appear: true,
                        exit: false,
                        key: month.startDate.getTime() * (index + 1)
                    },
                    React.createElement(Month, {
                        onDateSelect: onDateSelect,
                        title: month.title,
                        className: month.className,
                        startDate: month.startDate,
                        endDate: month.endDate,
                        selected: _selected,
                        activated: activated,
                        highlighted: tempHighlighted,
                        activateAll: activateAll,
                        key: month.startDate.getTime() * (index + 1)
                    })
                );
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _navigateLeft = !this.getNavigateLeft();
            var _navigateRight = !this.getNavigateRight();

            var _months = this.renderMonths();

            return React.createElement(
                'div',
                {
                    className: 'buffer',
                    onTouchMove: this.handleTouchMove,
                    onTouchStart: this.handleTouchStart,
                    onTouchEnd: this.handleTouchEnd
                },
                React.createElement(
                    'div',
                    { className: 'absolute' },
                    React.createElement(
                        'div',
                        { className: 'calendar__navigation' },
                        React.createElement(
                            'div',
                            {
                                onClick: this.navigateLeftOnClick,
                                className: 'calendar__navigate left',
                                hidden: _navigateLeft
                            },
                            React.createElement('i', { className: 'fa fa-chevron-left' })
                        ),
                        React.createElement(
                            'div',
                            {
                                onClick: this.navigateRightOnClick,
                                className: 'calendar__navigate right',
                                hidden: _navigateRight
                            },
                            React.createElement('i', { className: 'fa fa-chevron-right' })
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'calendar__months' },
                    React.createElement(
                        TransitionGroup,
                        null,
                        _months
                    )
                )
            );
        }
    }]);

    return Calendar;
}(Component), _class$8.defaultProps = {
    selected: TODAY,
    activateAll: true,
    activated: null,
    highlighted: null
}, _temp$7);

var _createClass$e = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$9, _temp$8;

function _defineProperty$5(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$e(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$e(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$e(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Checkbox = (_temp$8 = _class$9 = function (_Component) {
    _inherits$e(Checkbox, _Component);

    function Checkbox() {
        _classCallCheck$e(this, Checkbox);

        var _this = _possibleConstructorReturn$e(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this));

        _this.onChange = function () {
            var _this$props = _this.props,
                onChange = _this$props.onChange,
                disabled = _this$props.disabled;


            if (!disabled && onChange) {
                onChange(_this._node.checked);
            }
        };

        _this.id = Math.random();
        return _this;
    }

    _createClass$e(Checkbox, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var tooltip = this.props.tooltip;


            if (tooltip) {
                this._container.setAttribute('tooltip', tooltip);
                window.chayns.ui.tooltip.init(null, this._container.parentNode);
            }
        }
    }, {
        key: 'renderCheckbox',
        value: function renderCheckbox(classNames) {
            var _this2 = this;

            var _props = this.props,
                style = _props.style,
                disabled = _props.disabled,
                children = _props.children,
                label = _props.label,
                checked = _props.checked,
                defaultChecked = _props.defaultChecked,
                dangerouslySetLabel = _props.dangerouslySetLabel;


            return React.createElement(
                'div',
                {
                    style: style,
                    className: classNames,
                    ref: function ref(_ref2) {
                        _this2._container = _ref2;
                    }
                },
                React.createElement('input', {
                    type: 'checkbox',
                    className: 'checkbox',
                    ref: function ref(_ref) {
                        _this2._node = _ref;
                    },
                    onChange: this.onChange,
                    id: this.id,
                    disabled: disabled,
                    checked: checked,
                    defaultChecked: defaultChecked
                }),
                React.createElement(
                    'label',
                    {
                        htmlFor: this.id,
                        dangerouslySetInnerHTML: dangerouslySetLabel
                    },
                    !dangerouslySetLabel ? children || label || '' : null
                )
            );
        }
    }, {
        key: 'renderToggleButton',
        value: function renderToggleButton(classNames) {
            var _this3 = this;

            var _props2 = this.props,
                style = _props2.style,
                disabled = _props2.disabled,
                children = _props2.children,
                label = _props2.label,
                checked = _props2.checked,
                defaultChecked = _props2.defaultChecked;


            return React.createElement(
                'div',
                {
                    style: style,
                    className: classNames,
                    ref: function ref(_ref4) {
                        _this3._container = _ref4;
                    }
                },
                React.createElement('input', {
                    type: 'checkbox',
                    className: 'switch',
                    ref: function ref(_ref3) {
                        _this3._node = _ref3;
                    },
                    onChange: this.onChange,
                    id: this.id,
                    disabled: disabled,
                    checked: checked,
                    defaultChecked: defaultChecked
                }),
                React.createElement('label', {
                    htmlFor: this.id,
                    style: label ? { marginRight: '10px' } : null
                }),
                children || label || ''
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                className = _props3.className,
                toggleButton = _props3.toggleButton;

            var classNames = classnames(_defineProperty$5({}, className, className));

            return toggleButton ? this.renderToggleButton(classNames) : this.renderCheckbox(classNames);
        }
    }]);

    return Checkbox;
}(Component), _class$9.defaultProps = {
    style: null,
    className: null,
    label: null,
    children: null,
    onChange: null,
    toggleButton: false,
    checked: undefined,
    defaultChecked: undefined,
    disabled: false,
    tooltip: null,
    dangerouslySetLabel: null
}, _temp$8);

/* eslint-disable jsx-a11y/click-events-have-key-events */

var ContextMenuItem = function ContextMenuItem(_ref) {
    var iconClassName = _ref.iconClassName,
        onClick = _ref.onClick,
        text = _ref.text;

    return React.createElement(
        'li',
        { className: 'context-menu__item', onClick: onClick },
        React.createElement('i', { className: iconClassName }),
        React.createElement(
            'span',
            { className: 'context-menu__item-text' },
            text
        )
    );
};

ContextMenuItem.defaultProps = {
    iconClassName: '',
    onClick: function onClick() {},
    text: ''
};

/* eslint-disable jsx-a11y/click-events-have-key-events */

var ContextMenu = function ContextMenu(_ref) {
    var hide = _ref.hide,
        onLayerClick = _ref.onLayerClick,
        x = _ref.x,
        y = _ref.y,
        items = _ref.items;

    var contextMenuClass = hide ? 'context-menu' : 'context-menu context-menu--active';

    return React.createElement(
        'div',
        { className: contextMenuClass },
        React.createElement('div', {
            className: 'context-menu__page-block',
            onClick: !chayns.env.isMobile ? onLayerClick : null,
            onTouchStart: chayns.env.isMobile ? onLayerClick : null
        }),
        React.createElement(
            'div',
            {
                className: 'context-menu__body',
                style: {
                    position: 'absolute',
                    left: x,
                    top: y
                }
            },
            React.createElement(
                'ul',
                { className: 'context-menu__item-list' },
                items.map(function (item, index) {
                    return React.createElement(ContextMenuItem, {
                        key: item.className + '-' + index.text,
                        iconClassName: item.className,
                        text: item.text,
                        onClick: item.onClick
                    });
                })
            )
        )
    );
};

ContextMenu.defaultProps = {
    hide: true,
    onLayerClick: function onLayerClick() {},
    x: undefined,
    y: undefined,
    items: []
};

var _extends$9 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty$6(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties$4(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var DetailView = function DetailView(_ref) {
    var children = _ref.children,
        className = _ref.className,
        props = _objectWithoutProperties$4(_ref, ['children', 'className']);

    var classNames = classnames('cc__detail-view', _defineProperty$6({}, className, className));

    return React.createElement(
        'div',
        _extends$9({
            className: classNames
        }, props),
        children
    );
};

DetailView.defaultProps = {
    children: null,
    className: ''
};

var _createClass$f = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$f(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ORIENTATION_PORTRAIT = 0;
var ORIENTATION_LANDSCAPE = 1;

var HTML = document.documentElement;

var OrientationHelper = function () {
    function OrientationHelper() {
        var _this = this;

        _classCallCheck$f(this, OrientationHelper);

        this.update = function () {
            var orientation = _this.getOrientation();

            if (orientation === ORIENTATION_LANDSCAPE) {
                HTML.classList.add('chayns--landscape');
                HTML.classList.remove('chayns--portrait');
            } else {
                HTML.classList.add('chayns--portrait');
                HTML.classList.remove('chayns--landscape');
            }
        };

        if (chayns.env.isMobile || chayns.env.isApp) {
            window.addEventListener('orientationchange', this.update);
            this.update();
        }
    }

    // eslint-disable-next-line class-methods-use-this


    _createClass$f(OrientationHelper, [{
        key: 'getOrientation',
        value: function getOrientation() {
            if (window.screen && window.screen.orientation && (window.screen.orientation.angle || window.screen.orientation.angle === 0)) {
                var angle = window.screen.orientation.angle % 360;

                if (angle === 90 || angle === 270 || angle === -90) {
                    return ORIENTATION_LANDSCAPE;
                }

                return ORIENTATION_PORTRAIT;
            }

            if (window.orientation || window.orientation === 0) {
                return window.orientation === -90 || window.orientation === 90 ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT;
            }

            if (window.innerHeight > window.innerWidth) {
                return ORIENTATION_LANDSCAPE;
            }

            return ORIENTATION_PORTRAIT;
        }
    }]);

    return OrientationHelper;
}();

var OrientationHelper$1 = new OrientationHelper();

var _extends$a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty$7(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties$5(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

OrientationHelper$1.update();

var DetailViewGroup = function DetailViewGroup(_ref) {
    var children = _ref.children,
        className = _ref.className,
        props = _objectWithoutProperties$5(_ref, ['children', 'className']);

    var classNames = classnames('cc__detail-view__group', _defineProperty$7({}, className, className));

    return React.createElement(
        'div',
        _extends$a({
            className: classNames
        }, props),
        children
    );
};

DetailViewGroup.defaultProps = {
    className: ''
};

var _extends$b = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties$6(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var DetailViewItem = function DetailViewItem(_ref) {
    var children = _ref.children,
        className = _ref.className,
        props = _objectWithoutProperties$6(_ref, ['children', 'className']);

    var classNames = classnames('cc__detail-view__item', className);

    return React.createElement(
        'div',
        _extends$b({
            className: classNames
        }, props),
        children
    );
};

DetailViewItem.defaultProps = {
    className: ''
};

var _extends$c = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties$7(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var DetailViewHeader = function DetailViewHeader(_ref) {
    var children = _ref.children,
        className = _ref.className,
        expanded = _ref.expanded,
        props = _objectWithoutProperties$7(_ref, ['children', 'className', 'expanded']);

    var classNames = classnames('cc__detail-view__header', className, {
        'cc__detail-view__header--expanded': expanded
    });

    return React.createElement(
        DetailViewItem,
        _extends$c({
            className: classNames
        }, props),
        React.createElement(
            'div',
            { className: 'cc__detail-view__header__wrapper' },
            React.createElement(
                'div',
                { className: 'cc__detail-view__header__content-wrapper' },
                children
            )
        )
    );
};

DetailViewHeader.defaultProps = {
    className: '',
    expanded: false
};

var _extends$d = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty$8(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties$8(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var DetailViewFooter = function DetailViewFooter(_ref) {
    var children = _ref.children,
        className = _ref.className,
        props = _objectWithoutProperties$8(_ref, ['children', 'className']);

    var classNames = classnames('cc__detail-view__footer', _defineProperty$8({}, className, className));

    return React.createElement(
        DetailViewItem,
        _extends$d({
            className: classNames
        }, props),
        children
    );
};

DetailViewFooter.defaultProps = {
    className: ''
};

var scriptMap = new Map();

function loadScript(id, src) {
    return new Promise(function (resolve, reject) {
        var scriptTag = scriptMap.get(id);
        if (scriptTag) {
            return resolve();
        }

        scriptTag = document.createElement('script');
        scriptTag.type = 'application/javascript';
        document.body.appendChild(scriptTag);

        scriptMap.set(id, scriptTag);

        if (scriptTag.src) {
            scriptTag.src = src;
        } else {
            scriptTag.setAttribute('src', src);
        }

        scriptTag.onload = resolve;
        scriptTag.onerror = reject;

        return null;
    });
}

var styleMap = new Map();

function loadStyle(id, src) {
    return new Promise(function (resolve, reject) {
        var styleTag = styleMap.get(id);
        if (styleTag) {
            return resolve();
        }

        if (!styleTag) {
            styleTag = document.createElement('link');
            styleTag.rel = 'stylesheet';
            styleTag.type = 'text/css';
            document.head.appendChild(styleTag);

            styleMap.set(id, styleTag);
        }

        if (styleTag.href) {
            styleTag.href = src;
        } else {
            styleTag.setAttribute('href', src);
        }

        styleTag.onload = resolve;
        styleTag.onerror = reject;

        return null;
    });
}

function loadOptionalDependency(module, windowModule, jsArray, cssArray) {
    var returnPromise = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

    var emojione = null;
    try {
        // eslint-disable-next-line global-require,import/no-dynamic-require
        emojione = require(module);
    } catch (ex) {
        emojione = window[windowModule];
    }

    if (emojione) {
        if (returnPromise) {
            return Promise.resolve(emojione);
        }

        return emojione;
    }

    var loadArray = [];

    if (!emojione) {
        for (var i = 0, z = jsArray.length; i < z; i += 1) {
            loadArray.push(loadScript(jsArray[i], jsArray[i]));
        }

        for (var _i = 0, _z = cssArray.length; _i < _z; _i += 1) {
            loadArray.push(loadStyle(cssArray[_i], cssArray[_i]));
        }
    }

    if (returnPromise) {
        return Promise.all(loadArray);
    }

    return emojione;
}

var _createClass$g = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$a, _temp2$1;

function _classCallCheck$g(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$f(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$f(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function requireEmojione(returnPromise) {
    return loadOptionalDependency('emojione', 'emojione', ['https://cdn.jsdelivr.net/npm/emojione@3.1.7/lib/js/emojione.min.js'], ['https://cdn.jsdelivr.net/npm/emojione@3.1.7/extras/css/emojione.min.css'], returnPromise);
}

var EmojiInput = (_temp2$1 = _class$a = function (_Component) {
    _inherits$f(EmojiInput, _Component);

    function EmojiInput() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck$g(this, EmojiInput);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$f(this, (_ref = EmojiInput.__proto__ || Object.getPrototypeOf(EmojiInput)).call.apply(_ref, [this].concat(args))), _this), _this.lastKeyPressed = null, _this.firstRender = true, _this.activeNode = 0, _this.cursorPos = 0, _this.getActiveChildNode = function () {
            var inputDiv = _this.input;
            var selection = window.getSelection();
            var anchorNode = selection.anchorNode;
            var childNodes = inputDiv.childNodes;

            var activeChildNode = -1;

            if (anchorNode && anchorNode !== inputDiv) {
                for (var i = 0; i < childNodes.length; i += 1) {
                    var curNode = childNodes[i];

                    if (chayns.env.isIOS && curNode.nodeName.toUpperCase() === 'I') {
                        // eslint-disable-next-line prefer-destructuring
                        curNode = curNode.childNodes[0];
                    }

                    if (curNode === anchorNode || curNode.wholeText === anchorNode.wholeText && curNode.nextElementSibling === anchorNode.nextElementSibling && curNode.previousElementSibling === anchorNode.previousElementSibling) {
                        activeChildNode = curNode.nodeType === 1 ? i + 1 : i;
                        break;
                    }
                }
            } else {
                activeChildNode = _this.activeNode;
            }

            return activeChildNode;
        }, _this.setCursorPos = function () {
            var inputDiv = _this.input;
            var _this2 = _this,
                activeNode = _this2.activeNode,
                cursorPos = _this2.cursorPos;


            if (cursorPos > -1) {
                inputDiv.focus();
                var inputChildNodes = inputDiv.childNodes;

                var range = document.createRange();

                if (activeNode > -1) {
                    var cursorNode = inputChildNodes[activeNode];

                    if (cursorNode) {
                        if (cursorNode.nodeType === 1 || cursorNode.length < cursorPos) {
                            var nextSibling = cursorNode.nextSibling ? cursorNode.nextSibling.nextSibling : undefined;

                            if (nextSibling && nextSibling.nodeType === 3) {
                                range.setStart(nextSibling, 0);
                                range.setEnd(nextSibling, 0);
                            } else {
                                var newTextNode = document.createTextNode('');

                                inputDiv.insertBefore(newTextNode, nextSibling);

                                range.setStart(newTextNode, 0);
                                range.setEnd(newTextNode, 0);
                            }
                        } else {
                            range.setStart(cursorNode, cursorPos);
                            range.setEnd(cursorNode, cursorPos);
                        }
                    }
                } else {
                    var _newTextNode = document.createTextNode('');
                    inputDiv.appendChild(_newTextNode);

                    range.setStart(_newTextNode, 0);
                    range.setEnd(_newTextNode, 0);
                }

                var sel = window.getSelection();

                sel.removeAllRanges();
                sel.addRange(range);
            }
        }, _this.getPureInnerText = function (elem) {
            var emojione = requireEmojione(false);

            var textLines = [''];
            var lineIndex = 0;
            var curChild = elem.firstChild;

            var isInDavid = navigator.userAgent.toLowerCase().indexOf('david client') >= 0;

            while (curChild !== null) {
                if (curChild.nodeType === 1) {
                    switch (curChild.tagName) {
                        case 'IMG':
                            textLines[lineIndex] += curChild.getAttribute('alt');
                            break;
                        case 'DIV':
                            textLines.push('');
                            lineIndex += 1;
                            break;
                        case 'BR':
                            if (chayns.env.browser.name.toLowerCase() !== 'chrome' || isInDavid) {
                                textLines[lineIndex] += '\n';
                            }
                            break;
                        default:
                            break;
                    }
                } else if (curChild.nodeType === 3) {
                    textLines[lineIndex] += curChild.nodeValue;
                }

                if (curChild.hasChildNodes()) {
                    curChild = curChild.firstChild;
                } else {
                    while (curChild.nextSibling === null) {
                        curChild = curChild.parentNode;

                        if (curChild === elem) {
                            return textLines.join('\n');
                        }
                    }
                    curChild = curChild.nextSibling;
                }
            }

            if (!emojione) {
                return emojione.shortnameToUnicode(textLines.join('\n'));
            }

            return textLines.join('\n');
        }, _this.handleInput = function (event) {
            var onInput = _this.props.onInput;

            // eslint-disable-next-line no-param-reassign

            event.target.pureInnerText = _this.getPureInnerText(event.target);

            onInput(event);
        }, _this.handleKeyDown = function (event) {
            var onKeyDown = _this.props.onKeyDown;


            _this.lastKeyPressed = event.keyCode;

            if (onKeyDown) {
                onKeyDown(event);
            }
        }, _this.handleKeyUp = function (event) {
            if (chayns.env.browser.name.toLowerCase() === 'ie' && event.keyCode !== 16) {
                _this.handleInput(event);
            }
            if (chayns.env.browser.name.toLowerCase() === 'edge' && event.keyCode === 13 && event.shiftKey) {
                _this.handleInput(event);
            }
        }, _this.handleFocus = function (event) {
            var onFocus = _this.props.onFocus;


            if (onFocus) {
                onFocus(event);
            }
        }, _this.handleBlur = function (event) {
            var onBlur = _this.props.onBlur;


            if (onBlur) {
                onBlur(event);
            }
        }, _this.scrollToCursor = function (scrollTop, scrollHeight) {
            var inputDiv = _this.input;
            var elemScrollHeight = inputDiv.scrollHeight;
            var elemClientHeight = inputDiv.clientHeight;

            if (!(elemScrollHeight <= elemClientHeight)) {
                var diff = elemScrollHeight - scrollHeight;
                _this.input.scrollTop = (scrollTop || 0) + diff;
            }
        }, _this.formatText = function (text) {
            var emojione = requireEmojione(false);

            var result = '';
            var newText = text.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/™/g, '&#153;').replace(/©/g, '&copy;').replace(/®/g, '&reg;').replace(/\(y\)/g, '👍').replace(/\(n\)/g, '👎');

            if (emojione) {
                newText = emojione.toImage(newText);
            }

            newText = newText.replace(/(<img[^<]*)\/>/g, '$1>').replace(/&#153;/g, '™').replace(/&copy;/g, '©').replace(/&reg;/g, '®');

            var lines = newText.split('\n');
            var isInDavid = navigator.userAgent.toLowerCase().indexOf('david client') >= 0;

            if (chayns.env.browser.name.toLowerCase() === 'chrome' && !isInDavid) {
                if (lines[lines.length - 1] === '' && _this.lastKeyPressed === 8 && lines.length > 1) {
                    lines[lines.length - 1] = '<br>';
                }

                result = lines.join('\n');
            } else {
                if (lines.length === 1 && chayns.env.browser.name.toLowerCase() === 'edge' && lines[0] === '') {
                    lines[0] = '<br>';
                }

                result = lines.join('<br>');
            }

            return result.replace(String.fromCharCode(160), String.fromCharCode(32)).replace(/&nbsp;/gm, String.fromCharCode(32)).replace(/&amp;/gm, String.fromCharCode(38));
        }, _this.updateDOM = function (newProps) {
            var inputDiv = _this.input;
            var newHtml = _this.formatText(newProps.value);
            var oldHtml = inputDiv.innerHTML.replace(/&nbsp;/gm, String.fromCharCode(32)).replace(/&amp;/gm, String.fromCharCode(38)).replace(String.fromCharCode(160), String.fromCharCode(32));

            if (newHtml !== oldHtml) {
                _this.activeNode = _this.getActiveChildNode();
                var activeElem = inputDiv.childNodes[_this.activeNode];
                if (activeElem) {
                    _this.cursorPos = EmojiInput.getCaretCharacterOffsetWithin(activeElem);

                    var _inputDiv$scrollTop = inputDiv.scrollTop,
                        scrollTop = _inputDiv$scrollTop.scrollTop,
                        scrollHeight = _inputDiv$scrollTop.scrollHeight;


                    inputDiv.innerHTML = newHtml;

                    _this.scrollToCursor(scrollTop, scrollHeight);
                    _this.setCursorPos();
                } else {
                    inputDiv.innerHTML = newHtml;
                }
            }
        }, _temp), _possibleConstructorReturn$f(_this, _ret);
    }

    _createClass$g(EmojiInput, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            requireEmojione().then(function (emojione) {
                emojione.ascii = true; // eslint-disable-line no-param-reassign
                emojione.imageTitleTag = false; // eslint-disable-line no-param-reassign
                emojione.blacklistChars = '*,#'; // eslint-disable-line no-param-reassign
                emojione.imagePathPNG = 'https://sub54.tobit.com/frontend/assets/emojione/3.1/png/64/'; // eslint-disable-line no-param-reassign
            });
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _props = this.props,
                placeholder = _props.placeholder,
                disabled = _props.disabled,
                value = _props.value;


            if (nextProps.value.trim() === '') {
                this.placeholder.classList.remove('emoji-input__placeholder--hidden');
            } else {
                this.placeholder.classList.add('emoji-input__placeholder--hidden');
            }

            if (nextProps.placeholder !== placeholder) {
                this.placeholder.innerText = nextProps.placeholder;
            }

            if (nextProps.disabled !== disabled) {
                this.input.contentEditable = !nextProps.disabled;
            }

            if (nextProps.value !== value || this.firstRender) {
                this.updateDOM(nextProps);
                this.firstRender = false;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                id = _props2.id,
                hideBorder = _props2.hideBorder,
                disabled = _props2.disabled;


            var messageInputClasses = classnames('emoji-input__message-input', {
                'emoji-input__message-input--hide-border': hideBorder,
                'emoji-input__message-input--disabled': disabled,
                input: !disabled
            });

            return React.createElement(
                'div',
                { className: 'emoji-input' },
                React.createElement('div', {
                    dangerouslySetInnerHTML: { __html: '<br />' },
                    ref: function ref(_ref2) {
                        _this3.input = _ref2;
                    },
                    className: messageInputClasses,
                    onKeyDown: this.handleKeyDown,
                    contentEditable: !disabled,
                    onKeyUp: this.handleKeyUp,
                    onInput: this.handleInput,
                    onFocus: this.handleFocus,
                    onBlur: this.handleBlur,
                    dir: 'auto',
                    id: id
                }),
                React.createElement('div', {
                    className: 'emoji-input__placeholder',
                    ref: function ref(_ref3) {
                        _this3.placeholder = _ref3;
                    }
                })
            );
        }
    }], [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate() {
            return false;
        }
    }, {
        key: 'getCaretCharacterOffsetWithin',
        value: function getCaretCharacterOffsetWithin(element) {
            var caretOffset = -1;

            if (typeof window.getSelection !== 'undefined') {
                var sel = window.getSelection();

                if (sel.anchorNode && (sel.anchorNode.nodeType === 3 || !sel.anchorNode.classList.contains('icon-smile-o'))) {
                    var range = sel.getRangeAt(0);
                    var preCaretRange = range.cloneRange();
                    preCaretRange.selectNodeContents(element);
                    preCaretRange.setEnd(range.endContainer, range.endOffset);
                    caretOffset = preCaretRange.toString().length;
                }
            } else if (typeof document.selection !== 'undefined' && document.selection.type !== 'Control') {
                var _sel = document.selection;

                if (_sel.anchorNode && (_sel.anchorNode.nodeType === 3 || !_sel.anchorNode.classList.contains('icon-smile-o'))) {
                    var textRange = document.selection.createRange();
                    var preCaretTextRange = document.body.createTextRange();
                    preCaretTextRange.moveToElementText(element);
                    preCaretTextRange.setEndPoint('EndToEnd', textRange);
                    caretOffset = preCaretTextRange.text.length;
                }
            }
            return caretOffset;
        }
    }]);

    return EmojiInput;
}(Component), _class$a.defaultProps = {
    hideBorder: false,
    onKeyDown: null,
    disabled: false,
    onFocus: null,
    onBlur: null
}, _temp2$1);

var MoreImages = function MoreImages(_ref) {
    var count = _ref.count,
        onlyIcon = _ref.onlyIcon;

    var text = count + ' weitere Bilder';
    return React.createElement(
        'div',
        { className: 'more-images' },
        React.createElement(
            'div',
            { className: 'more-images__container' },
            React.createElement(
                'div',
                { className: 'more-image__text__wrapper' },
                React.createElement('i', { className: 'more-image__icon fa fa-plus' }),
                !onlyIcon && React.createElement(
                    'div',
                    { className: 'more-image__text' },
                    text
                )
            )
        )
    );
};

MoreImages.defaultProps = {
    onlyIcon: false
};

/* eslint-disable jsx-a11y/click-events-have-key-events */

var ImageContainer = function ImageContainer(_ref) {
    var className = _ref.className,
        url = _ref.url,
        onClick = _ref.onClick,
        children = _ref.children;

    return React.createElement(
        'div',
        { className: className },
        React.createElement(
            'div',
            {
                className: 'gallery_item_inner',
                style: { backgroundImage: 'url(' + url + ')' },
                onClick: onClick
            },
            children
        )
    );
};

ImageContainer.defaultProps = {
    children: undefined
};

var _createClass$h = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$b, _temp$9;

function _classCallCheck$h(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$g(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$g(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Gallery = (_temp$9 = _class$b = function (_Component) {
    _inherits$g(Gallery, _Component);

    function Gallery() {
        _classCallCheck$h(this, Gallery);

        var _this = _possibleConstructorReturn$g(this, (Gallery.__proto__ || Object.getPrototypeOf(Gallery)).call(this));

        _this.openFirstImage = _this.openGallery.bind(_this, 0);
        _this.openSecondImage = _this.openGallery.bind(_this, 1);
        _this.openThirdImage = _this.openGallery.bind(_this, 2);
        return _this;
    }

    _createClass$h(Gallery, [{
        key: 'openGallery',
        value: function openGallery(start) {
            var _props = this.props,
                onClick = _props.onClick,
                urls = _props.urls;


            onClick(urls, start);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                urls = _props2.urls,
                onlyIcon = _props2.onlyIcon;

            var count = urls.length;

            return React.createElement(
                'div',
                { className: 'chayns-gallery' },
                React.createElement(
                    'div',
                    { className: 'gallery-grid' },
                    React.createElement(ImageContainer, {
                        className: 'gallery_item',
                        url: urls[0],
                        onClick: this.openFirstImage
                    }),
                    count > 1 && React.createElement(ImageContainer, {
                        className: 'gallery_item',
                        url: urls[1],
                        onClick: this.openSecondImage
                    }),
                    count > 2 && React.createElement(
                        ImageContainer,
                        {
                            className: 'gallery_item',
                            url: urls[2],
                            onClick: this.openThirdImage
                        },
                        count > 3 && React.createElement(MoreImages, {
                            count: count - 3,
                            onlyIcon: onlyIcon
                        })
                    )
                )
            );
        }
    }]);

    return Gallery;
}(Component), _class$b.defaultProps = {
    onlyIcon: false,
    onClick: chayns.openImage
}, _temp$9);

var _createClass$i = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$c, _temp$a;

function _classCallCheck$i(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$h(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$h(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Week = (_temp$a = _class$c = function (_Component) {
    _inherits$h(Week, _Component);

    _createClass$i(Week, null, [{
        key: 'hexToRgb',
        value: function hexToRgb(hex) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }
    }]);

    function Week() {
        _classCallCheck$i(this, Week);

        var _this = _possibleConstructorReturn$h(this, (Week.__proto__ || Object.getPrototypeOf(Week)).call(this));

        _this.schemeColor = Week.hexToRgb(chayns.getSchemeColor());
        return _this;
    }

    _createClass$i(Week, [{
        key: 'renderDays',
        value: function renderDays() {
            var _this2 = this;

            var days = [],
                i = 0;

            var _loop = function _loop() {
                var background = '',
                    day = _this2.props.data[i],
                    percentage = void 0,
                    start = void 0,
                    color = _this2.schemeColor,
                    backgroundColor = day.date.getDate() === _this2.props.focus.getDate() && day.date.getMonth() === _this2.props.focus.getMonth() && day.date.getFullYear() === _this2.props.focus.getFullYear() ? 'rgba(' + _this2.schemeColor.r + ',' + _this2.schemeColor.g + ',' + _this2.schemeColor.b + ',0.3)' : '';
                var classes = classnames('week_item', {
                    'week_item_filled': day && day.id,
                    'week_item_focused': day && day.groupId && _this2.props.groupFocus === day.groupId
                });
                if (day && day.id) {
                    start = Math.round(new Date(day.startTime).getHours() / 24 * 100);
                    percentage = Math.round((day.endTime - day.startTime) / (24 * 60 * 60 * 1000) * 100);
                    if (day.color) {
                        /**
                         * For correct calculating of the percentage it is required, that the entry is in one day
                         * @type {Date}
                         */
                        color = Week.hexToRgb(day.color);
                    }
                    background = 'linear-gradient(to right, rgba(' + color.r + ',' + color.g + ',' + color.b + ',0.5) ' + start + '%,rgba(' + color.r + ',' + color.g + ',' + color.b + ',1) ' + (start + 1) + '%,rgba(' + color.r + ',' + color.g + ',' + color.b + ',1) ' + (start + percentage) + '%,rgba(' + color.r + ',' + color.g + ',' + color.b + ',0.5) ' + (start + percentage + 1) + '%)';
                }

                days.push(React.createElement('div', { className: classes, style: { background: background, backgroundColor: backgroundColor }, key: i, onClick: function onClick(event) {
                        return _this2.props.onClick(event, day);
                    } }));
            };

            for (i; i < this.props.data.length; i++) {
                _loop();
            }
            return days;
        }
    }, {
        key: 'render',
        value: function render() {
            var days = this.renderDays();
            return React.createElement(
                'div',
                { className: 'week', style: { width: this.props.weekWidth * 0.9 + 'px', marginRight: this.props.weekWidth * 0.1 + 'px' } },
                React.createElement(
                    'div',
                    { className: 'week_table' },
                    React.createElement(
                        'div',
                        { className: 'week_row' },
                        days
                    )
                )
            );
        }
    }]);

    return Week;
}(Component), _class$c.defaultProps = {
    data: []
}, _temp$a);

/* eslint-disable */

var Navigator = function Navigator(_ref) {
    var text = _ref.text,
        _onClick = _ref.onClick,
        hidden = _ref.hidden,
        days = _ref.days;

    var schemeColor = Week.hexToRgb(chayns.getSchemeColor());
    return React.createElement(
        'div',
        { className: 'calendar__navigator no_select' },
        React.createElement(
            'div',
            { className: 'calendar__navigator_wrapper' },
            React.createElement(
                'div',
                { className: 'calendar__navigator_icon' },
                hidden.left ? '' : React.createElement('i', { className: 'fa fa-chevron-left', onClick: _onClick.left })
            ),
            text,
            React.createElement(
                'div',
                { className: 'calendar__navigator_icon' },
                hidden.right ? '' : React.createElement('i', { className: 'fa fa-chevron-right', onClick: _onClick.right })
            )
        ),
        React.createElement(
            'div',
            { className: 'calendar__navigator_days' },
            days.map(function (day, i) {
                return React.createElement(
                    'div',
                    { className: 'calendar__navigator_days_table', key: i },
                    day.map(function (value, i) {
                        var selected = value.selected ? 'bold' : 'normal';
                        return React.createElement(
                            'div',
                            { className: 'calendar__navigator_days_item ellipsis', style: { fontWeight: selected }, key: i, onClick: function onClick(event) {
                                    return _onClick.day(event, value);
                                } },
                            value.name
                        );
                    })
                );
            })
        )
    );
};

Navigator.defaultProps = {
    text: ''
};

var _createClass$j = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$d, _temp$b;

function _classCallCheck$j(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$i(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$i(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WEEK_WIDTH = 11.5 * (window.innerWidth > 450 ? 1 : 2);

var User = (_temp$b = _class$d = function (_Component) {
    _inherits$i(User, _Component);

    function User() {
        _classCallCheck$j(this, User);

        return _possibleConstructorReturn$i(this, (User.__proto__ || Object.getPrototypeOf(User)).call(this));
    }

    _createClass$j(User, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            return React.createElement(
                'div',
                { className: 'calendar__content_userEntries' },
                this.props.entries.map(function (entries, i) {
                    return React.createElement(Week, {
                        data: entries,
                        groups: _this2.props.groups,
                        key: entries[0].date.getTime() + i,
                        onClick: _this2.props.onClick,
                        focus: _this2.props.focus,
                        groupFocus: _this2.props.groupFocus,
                        weekWidth: _this2.props.weekWidth
                    });
                })
            );
        }
    }]);

    return User;
}(Component), _class$d.defaultProps = {
    entries: []
}, _temp$b);

var _createClass$k = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$k(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$j(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$j(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Groups = function (_Component) {
    _inherits$j(Groups, _Component);

    function Groups() {
        _classCallCheck$k(this, Groups);

        return _possibleConstructorReturn$j(this, (Groups.__proto__ || Object.getPrototypeOf(Groups)).call(this));
    }

    _createClass$k(Groups, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            return React.createElement(
                'div',
                { className: 'calendar__groups' },
                this.props.groups.map(function (group) {
                    var className = classnames('calendar__groups_item', {
                        'calendar__groups_notFocused': _this2.props.focus && group.id != _this2.props.focus
                    });
                    return React.createElement(
                        'div',
                        { className: className, key: group.id, onClick: function onClick(event) {
                                return _this2.props.onClick(event, group);
                            } },
                        React.createElement('div', { className: 'calendar__groups_color', style: { backgroundColor: group.color ? group.color : chayns.getSchemeColor() } }),
                        group.name
                    );
                })
            );
        }
    }]);

    return Groups;
}(Component);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass$l = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$e, _temp$c;

function _classCallCheck$l(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$k(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$k(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WEEK_WIDTH$1 = 50;

var focusWeek = void 0,
    isDesktop = window.innerWidth > 450;

var ProgressCalendar = (_temp$c = _class$e = function (_Component) {
    _inherits$k(ProgressCalendar, _Component);

    _createClass$l(ProgressCalendar, null, [{
        key: 'dateInterval',
        value: function dateInterval(dateStart, dateEnd) {
            var startDate = dateStart.getDate() < 10 ? '0' + dateStart.getDate() : dateStart.getDate(),
                startMonth = dateStart.getMonth() + 1 < 10 ? '0' + (dateStart.getMonth() + 1) : dateStart.getMonth() + 1,
                endDate = dateEnd.getDate() < 10 ? '0' + dateEnd.getDate() : dateEnd.getDate(),
                endMonth = dateEnd.getMonth() + 1 < 10 ? '0' + (dateEnd.getMonth() + 1) : dateEnd.getMonth() + 1;
            return startDate + '.' + startMonth + ' - ' + endDate + '.' + endMonth + '.' + dateEnd.getFullYear();
        }
    }, {
        key: 'getWeek',
        value: function getWeek(currentStart) {
            var monday = void 0,
                sunday = void 0;
            if (currentStart.getDay() === 0) {
                monday = new Date(currentStart.getFullYear(), currentStart.getMonth(), currentStart.getDate() - 6);
                sunday = new Date(currentStart.getFullYear(), currentStart.getMonth(), currentStart.getDate(), 23, 59);
            } else {
                monday = new Date(currentStart.getFullYear(), currentStart.getMonth(), currentStart.getDate() - (currentStart.getDay() - 1));
                sunday = new Date(currentStart.getFullYear(), currentStart.getMonth(), currentStart.getDate() + (7 - currentStart.getDay()), 23, 59);
            }
            return [monday, sunday];
        }
    }, {
        key: 'sortEntries',
        value: function sortEntries(entries) {
            if (entries) {
                var temp = entries;
                for (var j = 1; j < temp.length; j++) {
                    var entry = temp[j];
                    var i = j - 1;
                    while (i >= 0 && entry.startTime < temp[i].startTime) {
                        temp[i + 1] = temp[i];
                        i = i - 1;
                    }
                    temp[i + 1] = entry;
                }
                return temp;
            }
        }
    }, {
        key: 'realDay',
        value: function realDay(day) {
            if (day.getDay() === 0) {
                return 6;
            } else {
                return day.getDay() - 1;
            }
        }
    }]);

    function ProgressCalendar() {
        _classCallCheck$l(this, ProgressCalendar);

        var _this = _possibleConstructorReturn$k(this, (ProgressCalendar.__proto__ || Object.getPrototypeOf(ProgressCalendar)).call(this));

        _this.state = {
            week: 0,
            focusGroup: null,
            isDesktop: window.innerWidth > 450
        };

        _this.onNavigateLeft = _this.onNavigateLeft.bind(_this);
        _this.onNavigateRight = _this.onNavigateRight.bind(_this);
        _this.onClick = _this.onClick.bind(_this);
        _this.groupOnClick = _this.groupOnClick.bind(_this);
        _this.handleTouchMove = _this.handleTouchMove.bind(_this);
        _this.handleTouchStart = _this.handleTouchStart.bind(_this);
        _this.handleTouchEnd = _this.handleTouchEnd.bind(_this);

        window.addEventListener('orientationchange', function (event) {
            isDesktop = screen.availWidth > 450;
            _this.forceUpdate();
        });
        return _this;
    }

    _createClass$l(ProgressCalendar, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.entries = this.getEntries();
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setState({
                contentWidth: this.content.clientWidth
            });
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            if (this.state.contentWidth != this.content.clientWidth) {
                this.setState({
                    contentWidth: this.content.clientWidth
                });
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            for (var i in nextProps.data) {
                if (nextProps.data.length != this.props.data.length) {
                    this.entries = this.getEntries(nextProps.data, nextProps.startTime, nextProps.endTime);
                    return true;
                } else {
                    if (nextProps.data[i].entries.length != this.props.data[i].entries.length) {
                        this.entries = this.getEntries(nextProps.data, nextProps.startTime, nextProps.endTime);
                        return true;
                    }
                }
            }
            if (nextProps.columns.length != this.props.columns.length || nextProps.groups.length != this.props.groups.length || nextProps.startTime.getTime() != this.props.startTime.getTime() || nextProps.endTime.getTime() != this.props.endTime.getTime()) {
                this.entries = this.getEntries(nextProps.data, nextProps.startTime, nextProps.endTime);
                return true;
            } else if (nextProps.focus != this.props.focus) {
                return true;
            }
            return true;
        }
    }, {
        key: 'onNavigateLeft',
        value: function onNavigateLeft() {
            this.props.onNavigateLeft(this.weeks[focusWeek + (this.state.week - 1)]);
            this.setState({
                week: this.state.week - 1
            });
        }
    }, {
        key: 'onNavigateRight',
        value: function onNavigateRight() {
            var factor = isDesktop ? 2 : 1;
            var retval = this.weeks[focusWeek + (this.state.week + factor)] ? this.weeks[focusWeek + (this.state.week + factor)] : [];
            this.props.onNavigateRight(retval);
            this.setState({
                week: this.state.week + 1
            });
        }
    }, {
        key: 'onClick',
        value: function onClick(event, entry) {
            this.props.onClick({ event: event, selected: entry });
            var dateTime = entry.date.getTime(),
                weekEnd = this.weeks[focusWeek + this.state.week][1],
                buffer = 0;
            if (weekEnd < dateTime) {
                buffer = 1;
            }
            for (var i in this.weeks) {
                if (this.weeks[i][0] <= entry.date.getTime() && this.weeks[i][1] >= entry.date.getTime()) {
                    focusWeek = i - buffer;
                    break;
                }
            }
            this.setState({
                focusGroup: null,
                week: 0
            });
        }
    }, {
        key: 'groupOnClick',
        value: function groupOnClick(event, group) {
            if (this.state.focusGroup === group.id) {
                this.setState({
                    focusGroup: null
                });
            } else {
                this.setState({
                    focusGroup: group.id
                });
            }
        }
    }, {
        key: 'handleTouchStart',
        value: function handleTouchStart(event) {
            this.swipeX = event.touches[0].clientX;
        }
    }, {
        key: 'handleTouchMove',
        value: function handleTouchMove(event) {
            //console.log('ELEMENT',this.calendarMonths.offsetWidth);
            //this.move = -1*(this.swipeX-event.touches[0].clientX);
            //this.calendarMonths.style.transform= `translateX(${-1*(this.swipeX-event.touches[0].clientX)}%)`;

            this.moveSwipeX = event.touches[0].clientX;
        }
    }, {
        key: 'handleTouchEnd',
        value: function handleTouchEnd(leftHidden, rightHidden) {
            if (this.swipeX && this.moveSwipeX) {
                if (this.moveSwipeX >= this.swipeX + 60) {
                    if (!leftHidden) {
                        this.onNavigateLeft();
                    }
                    this.swipeX = null;
                    this.moveSwipeX = null;
                    //this.move=null;
                } else if (this.moveSwipeX <= this.swipeX - 60) {
                    if (!rightHidden) {
                        this.onNavigateRight();
                    }
                    this.swipeX = null;
                    this.moveSwipeX = null;
                }
            }
        }
    }, {
        key: 'getWeeks',
        value: function getWeeks(startTime, endTime) {
            var retval = [],
                currentStart = startTime;
            while (currentStart.getTime() < endTime.getTime()) {
                var _ProgressCalendar$get = ProgressCalendar.getWeek(currentStart),
                    _ProgressCalendar$get2 = _slicedToArray(_ProgressCalendar$get, 2),
                    monday = _ProgressCalendar$get2[0],
                    sunday = _ProgressCalendar$get2[1],
                    mondayTS = monday.getTime(),
                    sundayTS = sunday.getTime();

                if (this.props.focus.getTime() >= mondayTS && this.props.focus.getTime() <= sundayTS) {
                    focusWeek = retval.length;
                }
                retval.push([mondayTS, sundayTS]);
                currentStart = new Date(currentStart.getFullYear(), currentStart.getMonth(), currentStart.getDate() + 7);
            }
            /* if(retval.length === focusWeek){
                 let lastMonday = new Date(retval[retval.length-1][0]), lastSunday = new Date(retval[retval.length-1][1]);
                 lastMonday.setDate(lastMonday.getDate()+7);
                 lastSunday.setDate(lastSunday.getDate()+7);
                 retval.push([lastMonday.getTime(), lastSunday.getTime()]);
             }*/
            this.weeks = retval;
            return retval;
        }
    }, {
        key: 'getNavigatorDays',
        value: function getNavigatorDays(weekStart, weekEnd) {
            var temp = [],
                i = 0,
                date = new Date(weekStart),
                _ProgressCalendar$get3 = ProgressCalendar.getWeek(new Date(date.getFullYear(), date.getMonth(), date.getDate() + 7)),
                _ProgressCalendar$get4 = _slicedToArray(_ProgressCalendar$get3, 2),
                nextWeekStart = _ProgressCalendar$get4[0],
                nextWeekEnd = _ProgressCalendar$get4[1],
                weekDay = ProgressCalendar.realDay(this.props.focus);

            for (i; i < (isDesktop ? 2 : 1); i++) {
                var days = [],
                    j = 0;
                for (j in this.props.columns.names) {
                    if (i === 0) {
                        days.push({
                            name: this.props.columns.names[j],
                            date: new Date(weekStart.getFullYear(), weekStart.getMonth(), weekStart.getDate() + parseInt(j))
                        });
                    } else if (i === 1) {
                        days.push({
                            name: this.props.columns.names[j],
                            date: new Date(nextWeekStart.getFullYear(), nextWeekStart.getMonth(), nextWeekStart.getDate() + parseInt(j))
                        });
                    }
                }
                temp.push(days);
            }
            if (this.props.focus.getTime() >= weekStart && this.props.focus.getTime() <= weekEnd) {
                temp[0][weekDay].selected = true;
            } else if (temp[1] && this.props.focus.getTime() >= nextWeekStart.getTime() && this.props.focus.getTime() <= nextWeekEnd.getTime()) {
                temp[1][weekDay].selected = true;
            }
            return temp;
        }
    }, {
        key: 'getEntries',
        value: function getEntries(data, startTime, endTime) {
            data = data ? data : this.props.data;
            startTime = startTime ? startTime : this.props.startTime;
            endTime = endTime ? endTime : this.props.endTime;

            var convertedEntries = [],
                weeks = this.getWeeks(startTime, endTime),
                i = void 0;
            for (i in data) {
                var entries = ProgressCalendar.sortEntries(data[i].entries),
                    userEntries = [],
                    kIndex = 0,
                    j = void 0;
                if (entries) {
                    for (j in weeks) {
                        var m = 0,
                            weekEntries = [];
                        for (m; m < 7; m++) {
                            var retval = {},
                                k = void 0,
                                _startTime = new Date(weeks[j][0] + m * 24 * 60 * 60 * 1000),
                                _endTime = new Date(_startTime.getTime() + (23 * 60 * 60 * 1000 + 59 * 60 * 1000));

                            _startTime = _startTime.getTime();
                            _endTime = _endTime.getTime();
                            /*console.log('######################');
                             console.log('DAY: ');
                             console.log('Start: ', new Date(startTime), 'Offset: ', new Date(startTime).getTimezoneOffset());
                             console.log('End: ', new Date(endTime));*/
                            for (k = kIndex; k < entries.length; k++) {
                                /**
                                 * Only possible for entries, which are not longer than a day
                                 */
                                /*if(k>4) {
                                 console.log('--------------------------------------');
                                 console.log('ENTRY-START: ', new Date(entries[k].startTime), 'ENTRY-END: ', new Date(entries[k].endTime));
                                 console.log('--------------------------------------');
                                 }*/
                                if (entries[k].startTime >= _startTime && entries[k].endTime <= _endTime) {
                                    var l = void 0;
                                    if (this.props.groups.length > 0) {
                                        var isGrouped = false;
                                        for (l in this.props.groups) {
                                            if (entries[k].groupId === this.props.groups[l].id) {
                                                retval = entries[k];
                                                retval.color = this.props.groups[l].color;
                                                isGrouped = true;
                                                break;
                                            }
                                        }
                                        if (!isGrouped) {
                                            retval = entries[k];
                                        }
                                    } else {
                                        retval = entries[k];
                                    }
                                    retval.date = new Date(_startTime);
                                    retval.user = { id: data[i].id, name: data[i].name };
                                    kIndex = k + 1;
                                } else if (entries[k].endTime > _endTime) {
                                    break;
                                }
                            }
                            //console.log('######################');
                            weekEntries.push(retval.user ? retval : {
                                date: new Date(_startTime),
                                user: { id: data[i].id, name: data[i].name }
                            });
                        }
                        userEntries.push(weekEntries);
                    }
                }
                convertedEntries.push({ entries: userEntries, userId: data[i].id });
            }
            return convertedEntries;
        }
    }, {
        key: 'renderUser',
        value: function renderUser() {
            if (this.content && this.props.data) {
                return React.createElement(
                    'div',
                    { className: 'calendar__content_groups' },
                    this.props.data.map(function (user) {
                        return React.createElement(
                            'div',
                            { className: 'calendar__user ellipsis', key: user.id },
                            user.name
                        );
                    })
                );
            } else {
                return '';
            }
        }
    }, {
        key: 'renderEntries',
        value: function renderEntries() {
            var _this2 = this;

            /**
             * TODO: PROBLEM WITH REF. REF GOT OLD WIDTH
             */
            var focus = this.props.focus,
                wrapperWidth = this.weeks.length * WEEK_WIDTH$1 * (isDesktop ? 1 : 2),
                weekWidth = this.content ? this.state.contentWidth / 2 * (isDesktop ? 1 : 2) : 0;

            var content = this.content ? this.entries.map(function (entries) {
                return React.createElement(User, {
                    entries: entries.entries,
                    groups: _this2.props.groups,
                    key: entries.userId,
                    onClick: _this2.onClick,
                    focus: focus,
                    groupFocus: _this2.state.focusGroup,
                    weekWidth: weekWidth
                });
            }) : '';

            return React.createElement(
                'div',
                { className: 'calendar__content_weeks', ref: function ref(content) {
                        return _this2.content = content;
                    } },
                React.createElement(
                    'div',
                    { className: 'calendar__content_wrapper', style: {
                            width: wrapperWidth + '%',
                            transform: 'translateX(' + -1 * (focusWeek + this.state.week) * weekWidth + 'px)'
                        } },
                    content
                )
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var navText = '',
                weekStart = new Date(),
                weekEnd = new Date(),
                days = void 0;
            if (this.weeks) {
                var _weeks = _slicedToArray(this.weeks[focusWeek + this.state.week], 2);

                weekStart = _weeks[0];
                weekEnd = _weeks[1];

                weekStart = new Date(weekStart);
                weekEnd = new Date(weekEnd);
                if (isDesktop) {
                    var start = weekStart,
                        end = new Date(start.getFullYear(), start.getMonth(), start.getDate() + 13);
                    navText = '' + ProgressCalendar.dateInterval(start, end);
                } else {
                    var _start = weekStart,
                        _end = new Date(_start.getFullYear(), _start.getMonth(), _start.getDate() + 6);
                    navText = '' + ProgressCalendar.dateInterval(_start, _end);
                }
                days = this.getNavigatorDays(weekStart, weekEnd);
            }

            var leftHidden = weekStart.getTime() <= this.props.startTime,
                rightHidden = isDesktop ? new Date(weekEnd.getFullYear(), weekEnd.getMonth(), weekEnd.getDate() + 7).getTime() >= this.props.endTime : weekEnd.getTime() >= this.props.endTime;

            return React.createElement(
                'div',
                { className: 'calendar' },
                React.createElement(
                    'div',
                    { className: 'calendar_header', onTouchMove: this.handleTouchMove, onTouchStart: this.handleTouchStart, onTouchEnd: function onTouchEnd() {
                            return _this3.handleTouchEnd(leftHidden, rightHidden);
                        } },
                    React.createElement(Navigator, {
                        text: navText,
                        onClick: {
                            left: this.onNavigateLeft,
                            right: this.onNavigateRight,
                            day: this.onClick
                        },
                        hidden: {
                            left: leftHidden,
                            right: rightHidden
                        },
                        days: days
                    })
                ),
                React.createElement(
                    'div',
                    { className: 'calendar__content', onTouchMove: this.handleTouchMove, onTouchStart: this.handleTouchStart, onTouchEnd: function onTouchEnd() {
                            return _this3.handleTouchEnd(leftHidden, rightHidden);
                        } },
                    this.renderUser(),
                    this.renderEntries()
                ),
                React.createElement(Groups, {
                    groups: this.props.groups,
                    onClick: this.groupOnClick,
                    focus: this.state.focusGroup
                })
            );
        }
    }]);

    return ProgressCalendar;
}(Component), _class$e.defaultProps = {
    columns: {
        names: ['Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.', 'So.'],
        highlightedColor: chayns.getSchemeColor()
    },
    groups: [],
    focus: new Date(),
    onNavigateRight: function onNavigateRight() {},
    onNavigateLeft: function onNavigateLeft() {}
}, _temp$c);

/* eslint-disable */

if (!Array.prototype.find) {
    Array.prototype.find = function (predicate) {

        if (this == null) {
            throw new TypeError('Array.prototype.find called on null or undefined');
        }
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return value;
            }
        }
        return undefined;
    };
}

var _createClass$m = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$m(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var callbacks = [];
var allowedGroups = [];
var currentMode = null;
var initialized = false;
var managerItem = null;
var userItem = null;
var modeSwitchInitialized = false;

function callCallbacks(data) {
    callbacks.map(function (callback) {
        if (callback && window.chayns.utils.isFunction(callback)) {
            callback(data);
        }
    });
}

function getChangeListener() {
    return function (data) {
        callCallbacks(data);

        currentMode = data;
    };
}

function setDefaultGroup() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    initialized = true;

    getChangeListener()({
        id: mode
    });

    window.chayns.ui.modeSwitch.changeMode(0);
}

function getUacIds(group) {
    var retval = [];

    if (group.uacId && window.chayns.utils.isNumber(group.uacId)) {
        retval.push(group.uacId);
    }

    if (group.uacIds && window.chayns.utils.isArray(group.uacIds)) {
        retval = retval.concat(group.uacIds);
    }

    return retval;
}

function getAllowedUacIdsFromArray(uacArray) {
    var userGroups = window.chayns.env.user.groups;

    var allowedUacIds = [];

    for (var i = 0, x = userGroups.length; i < x; i += 1) {
        if (uacArray.indexOf(userGroups[i].id) !== -1) {
            allowedUacIds.push(userGroups[i].id);
        }
    }

    return allowedUacIds;
}

function convertToGroupObject(element) {
    if (window.chayns.utils.isObject(element)) {
        return element;
    }

    return {
        id: element,
        uacIds: [element]
    };
}

function getGroupObject(id, name, uacs) {
    return {
        id: id,
        uacIds: uacs,
        name: name
    };
}

function getSavedMode() {
    return window.chayns.utils.ls.get('react__modeSwitch--currentMode');
}

function setSavedMode(mode) {
    return window.chayns.utils.ls.set('react__modeSwitch--currentMode', mode.id);
}

function getDefaultMode() {
    var name = window.chayns.env.user.isAuthenticated ? window.chayns.env.user.name : '';

    return getGroupObject(0, name, null);
}

function hasAdminSwitch() {
    return !chayns.env.isApp || chayns.env.isAndroid && chayns.env.appVersion >= 5735 || chayns.env.isIOS && chayns.env.appVersion >= 5795;
}

function addAdminSwitchListener() {
    if (!hasAdminSwitch()) {
        return;
    }

    window.chayns.setAdminSwitchCallback(function (_ref) {
        var mode = _ref.mode;

        var modeSwitchMode = null;

        if (mode === 1) {
            modeSwitchMode = managerItem;
        } else {
            modeSwitchMode = userItem;
        }

        if (modeSwitchInitialized) {
            chayns.ui.modeSwitch.updateItem(0, modeSwitchMode);

            if (currentMode.id === userItem.id || currentMode.id === managerItem.id) {
                chayns.ui.modeSwitch.changeMode(modeSwitchMode);
            }
        } else {
            getChangeListener()(modeSwitchMode);
        }
    });
}

function getPermittedGroupObject(id, name, uacIds) {
    if (!uacIds || uacIds.length === 0 || uacIds.length === 1 && uacIds[0] === 0) {
        return getGroupObject(id, name, [0]);
    }

    if (hasAdminSwitch() && managerItem && id === managerItem.id) {
        return null;
    }

    var allowedUacIds = getAllowedUacIdsFromArray(uacIds);

    if (allowedUacIds.length === 0) {
        return null;
    }

    return getGroupObject(id, name, allowedUacIds);
}

function getPreferredMode(options) {
    var savedModeId = null;

    if (options.save) {
        savedModeId = getSavedMode();
    }

    if (savedModeId === null && options.defaultMode) {
        savedModeId = options.defaultMode;
    }

    return savedModeId;
}

function setModeSwitchGroups(groups, data, preferredMode) {
    var modeSwitchItems = [];
    var isChaynsIdAdmin = false;
    // Condition if adminMode ChaynsId
    var groupObject = void 0;

    if (managerItem && data && data.AppUser.AdminMode && hasAdminSwitch()) {
        groupObject = managerItem;
        isChaynsIdAdmin = true;
    } else {
        groupObject = userItem;
    }

    modeSwitchItems.push(groupObject);

    var changeGroupIndex = 0;
    var changeGroupValue = null;

    for (var i = 0, x = groups.length; i < x; i += 1) {
        var uacIds = getUacIds(groups[i]);
        var addGroupObject = getPermittedGroupObject(groups[i].id, groups[i].name, uacIds);

        if (addGroupObject) {
            modeSwitchItems.push(addGroupObject);

            if (addGroupObject.id === preferredMode) {
                changeGroupIndex = modeSwitchItems.length - 1;
                changeGroupValue = addGroupObject;
            }
        }
    }

    if (modeSwitchItems.length > 1) {
        window.chayns.ui.modeSwitch.init({
            items: modeSwitchItems,
            callback: getChangeListener()
        });

        window.init = {
            items: modeSwitchItems,
            callback: getChangeListener()
        };

        modeSwitchInitialized = true;
        initialized = true;

        if (changeGroupIndex) {
            getChangeListener()(changeGroupValue);

            window.chayns.ui.modeSwitch.changeMode(changeGroupIndex);
        } else {
            setDefaultGroup(isChaynsIdAdmin && managerItem ? managerItem.id : 0);
        }
    } else {
        setDefaultGroup(isChaynsIdAdmin && managerItem ? managerItem.id : 0);
    }
}

var ModeSwitchHelper = function () {
    function ModeSwitchHelper() {
        _classCallCheck$m(this, ModeSwitchHelper);
    }

    _createClass$m(ModeSwitchHelper, null, [{
        key: 'init',
        value: function init(options) {
            userItem = null;
            managerItem = null;

            if (options.groups) {
                if (window.chayns.utils.isFunction(options.onChange)) {
                    callbacks.push(options.onChange);
                }

                if (options.save) {
                    callbacks.push(setSavedMode);
                }

                var preferredMode = getPreferredMode(options);

                if (options.groups) {
                    options.groups.map(function (element) {
                        var group = convertToGroupObject(element);

                        allowedGroups.push(group);
                    });
                }

                if (window.chayns.env.user.isAuthenticated) {
                    userItem = getGroupObject(0, window.chayns.env.user.name, [0]);
                    userItem.default = true;

                    var managerGroup = ModeSwitchHelper.findManagerGroup(allowedGroups);
                    if (managerGroup) {
                        var id = managerGroup.id,
                            name = managerGroup.name,
                            uacIds = managerGroup.uacIds;


                        managerItem = getGroupObject(id, name, uacIds);
                    }
                }

                chayns.ready.then(function (data) {
                    if (window.chayns.env.user.isAuthenticated) {
                        setModeSwitchGroups(allowedGroups, data, preferredMode);

                        addAdminSwitchListener();
                    } else {
                        setDefaultGroup();
                    }
                });
            } else {
                console.warn('No groups specified');
            }
        }
    }, {
        key: 'getCurrentMode',
        value: function getCurrentMode() {
            if (currentMode) return currentMode;

            return getDefaultMode();
        }
    }, {
        key: 'onChange',
        value: function onChange(callback) {
            if (window.chayns.utils.isFunction(callback)) {
                callbacks.push(callback);

                return true;
            }

            return false;
        }
    }, {
        key: 'unregisterOnChange',
        value: function unregisterOnChange(callback) {
            var index = callbacks.indexOf(callback);

            if (index > -1) {
                callbacks.splice(index, 1);
            }
        }
    }, {
        key: 'isInitialized',
        value: function isInitialized() {
            return initialized;
        }
    }, {
        key: 'hide',
        value: function hide() {
            window.chayns.ui.modeSwitch.remove();
        }
    }, {
        key: 'show',
        value: function show() {
            window.chayns.ui.modeSwitch.add();
        }
    }, {
        key: 'isUserInGroup',
        value: function isUserInGroup(uacId) {
            if (!window.chayns.env.user.isAuthenticated) return false;

            return !!window.chayns.env.user.groups.find(function (element) {
                return element.id === uacId;
            });
        }
    }, {
        key: 'findManagerGroup',
        value: function findManagerGroup(groups) {
            if (!window.chayns.env.user.isAuthenticated) return false;

            return groups.find(function (uac) {
                return uac.uacIds && uac.uacIds.length === 1 && uac.uacIds[0] === 1;
            }) || groups.find(function (uac) {
                return uac.uacIds && uac.uacIds.find(function (id) {
                    return id === 1;
                });
            });
        }
    }, {
        key: 'isChaynsManager',
        value: function isChaynsManager() {
            return this.isUserInGroup(1);
        }
    }]);

    return ModeSwitchHelper;
}();

var _createClass$n = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$f, _temp$d;

function _classCallCheck$n(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$l(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$l(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ModeSwitch = (_temp$d = _class$f = function (_Component) {
    _inherits$l(ModeSwitch, _Component);

    function ModeSwitch() {
        _classCallCheck$n(this, ModeSwitch);

        return _possibleConstructorReturn$l(this, (ModeSwitch.__proto__ || Object.getPrototypeOf(ModeSwitch)).apply(this, arguments));
    }

    _createClass$n(ModeSwitch, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                groups = _props.groups,
                save = _props.save,
                onChange = _props.onChange,
                defaultMode = _props.defaultMode;


            ModeSwitchHelper.init({
                groups: groups,
                save: save,
                onChange: onChange,
                defaultMode: defaultMode
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return null;
        }
    }], [{
        key: 'init',
        value: function init(config) {
            if (!config) return false;

            ModeSwitchHelper.init(config);

            return true;
        }
    }, {
        key: 'isUserInGroup',
        value: function isUserInGroup(groupId) {
            if (!window.chayns.env.user.isAuthenticated) return false;

            for (var j = 0, userGroups = window.chayns.env.user.groups, k = userGroups.length; j < k; j += 1) {
                if (groupId === userGroups[j].id) {
                    return true;
                }
            }

            return false;
        }
    }]);

    return ModeSwitch;
}(Component), _class$f.defaultProps = {
    groups: null,
    save: false,
    onChange: null,
    defaultMode: null
}, _temp$d);


ModeSwitch.getCurrentMode = ModeSwitchHelper.getCurrentMode;
ModeSwitch.addChangeListener = ModeSwitchHelper.onChange;
ModeSwitch.removeChangeListener = ModeSwitchHelper.unregisterOnChange;
ModeSwitch.show = ModeSwitchHelper.show;
ModeSwitch.hide = ModeSwitchHelper.hide;
ModeSwitch.isUserInGroup = ModeSwitchHelper.isUserInGroup;
ModeSwitch.isChaynsManager = ModeSwitchHelper.isChaynsManager;

var _createClass$o = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$g, _temp$e;

function _classCallCheck$o(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$m(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$m(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Mode = (_temp$e = _class$g = function (_Component) {
    _inherits$m(Mode, _Component);

    function Mode() {
        _classCallCheck$o(this, Mode);

        var _this = _possibleConstructorReturn$m(this, (Mode.__proto__ || Object.getPrototypeOf(Mode)).call(this));

        _this.updatedMode = function (group) {
            _this.setState({
                modeId: group.id
            });
        };

        _this.state = {
            modeId: ModeSwitchHelper.getCurrentMode().id
        };
        return _this;
    }

    _createClass$o(Mode, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            ModeSwitchHelper.onChange(this.updatedMode);

            this.setState({
                // eslint-disable-next-line react/no-unused-state
                group: ModeSwitchHelper.getCurrentMode().id
            });
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            ModeSwitchHelper.unregisterOnChange(this.updatedMode);
        }
    }, {
        key: 'renderChildren',
        value: function renderChildren() {
            var children = this.props.children;


            if (window.chayns.utils.isArray(children)) {
                return React.createElement(
                    'div',
                    { className: 'modeswitch__mode' },
                    children.map(function (element) {
                        return element;
                    })
                );
            }

            return children;
        }
    }, {
        key: 'render',
        value: function render() {
            var modeId = this.state.modeId;
            var _props = this.props,
                mode = _props.mode,
                modes = _props.modes,
                group = _props.group;


            if (!ModeSwitchHelper.isInitialized()) return null;

            if (window.chayns.utils.isNumber(mode) && modeId === mode) {
                return this.renderChildren();
            }

            if (window.chayns.utils.isArray(modes) && modes.indexOf(modeId) !== -1) {
                return this.renderChildren();
            }

            if (window.chayns.utils.isNumber(group) && group === modeId) {
                return this.renderChildren();
            }

            if (window.chayns.utils.isArray(group) && group.indexOf(modeId) !== -1) {
                return this.renderChildren();
            }

            return null;
        }
    }]);

    return Mode;
}(Component), _class$g.defaultProps = {
    group: null,
    mode: null,
    modes: null
}, _temp$e);

var _extends$e = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass$p = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$p(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$n(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$n(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var connectToModeSwitch = (function () {
    for (var _len = arguments.length, conf = Array(_len), _key = 0; _key < _len; _key++) {
        conf[_key] = arguments[_key];
    }

    return function (WrappedComponent) {
        var _class, _temp;

        return _temp = _class = function (_Component) {
            _inherits$n(PureComponent, _Component);

            function PureComponent() {
                var _ref;

                _classCallCheck$p(this, PureComponent);

                for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    params[_key2] = arguments[_key2];
                }

                var _this = _possibleConstructorReturn$n(this, (_ref = PureComponent.__proto__ || Object.getPrototypeOf(PureComponent)).call.apply(_ref, [this].concat(params)));

                _this.update = function (mode) {
                    _this.setState({
                        mode: mode
                    });
                };

                _this.state = {
                    mode: ModeSwitchHelper.getCurrentMode().id
                };

                ModeSwitchHelper.onChange(_this.update);
                return _this;
            }

            _createClass$p(PureComponent, [{
                key: 'componentWillMount',
                value: function componentWillMount() {
                    this.setState({
                        mode: ModeSwitchHelper.getCurrentMode().id
                    });
                }
            }, {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                    ModeSwitchHelper.unregisterOnChange(this.updatedMode);
                }
            }, {
                key: '_shouldRender',
                value: function _shouldRender() {
                    var mode = this.state.mode;


                    if (window.chayns.utils.isArray(conf) && conf.indexOf(mode.id) !== -1) return true;

                    if (!conf || conf.length === 0) return true;

                    return false;
                }
            }, {
                key: 'render',
                value: function render() {
                    var mode = this.state.mode;


                    if (window.chayns.utils.isArray(conf) && !ModeSwitchHelper.isInitialized()) return null;

                    if (this._shouldRender()) {
                        var props = objectAssign({}, this.props, {
                            mode: mode
                        });

                        return React.createElement(WrappedComponent, _extends$e({}, props, this.state));
                    }

                    return null;
                }
            }]);

            return PureComponent;
        }(Component), _class.getStores = WrappedComponent.getStores, _class.getPropsFromStores = WrappedComponent.getPropsFromStores, _temp;
    };
});

var _createClass$q = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$h, _temp2$2;

function _defineProperty$9(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$q(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$o(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$o(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PersonFinder = (_temp2$2 = _class$h = function (_Component) {
    _inherits$o(PersonFinder, _Component);

    function PersonFinder() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck$q(this, PersonFinder);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$o(this, (_ref = PersonFinder.__proto__ || Object.getPrototypeOf(PersonFinder)).call.apply(_ref, [this].concat(args))), _this), _this.reference = function (node) {
            var reference = _this.props.reference;


            _this._node = node;

            if (reference) {
                reference(node);
            }
        }, _temp), _possibleConstructorReturn$o(_this, _ret);
    }

    _createClass$q(PersonFinder, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var _props = this.props,
                onChange = _props.onChange,
                required = _props.required;


            this._node.setAttribute('finder', 'person');

            this._node.addEventListener('finderChange', function (data) {
                var user = data.user;

                onChange({ user: user, node: _this2._node });
            });

            if (required) {
                this._node.setAttribute('required', '');
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                styleProp = _props2.style,
                className = _props2.className,
                placeholder = _props2.placeholder,
                defaultValue = _props2.defaultValue;


            var style = objectAssign({}, styleProp);

            var classNames = classnames(_defineProperty$9({
                input: true
            }, className, className));

            return React.createElement('input', {
                type: 'text',
                className: classNames,
                ref: function ref(node) {
                    return _this3.reference(node);
                },
                placeholder: placeholder || '',
                defaultValue: defaultValue,
                style: style
            });
        }
    }]);

    return PersonFinder;
}(Component), _class$h.defaultProps = {
    style: null,
    className: null,
    placeholder: null,
    required: null,
    reference: null,
    defaultValue: null,
    onChange: null
}, _temp2$2);

var _extends$f = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass$r = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$i, _temp$f;

function _objectWithoutProperties$9(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck$r(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$p(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$p(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var currentId = 0;
var PREFIX = 'CC_RB_';

var RadioButton = (_temp$f = _class$i = function (_Component) {
    _inherits$p(RadioButton, _Component);

    function RadioButton() {
        _classCallCheck$r(this, RadioButton);

        var _this = _possibleConstructorReturn$p(this, (RadioButton.__proto__ || Object.getPrototypeOf(RadioButton)).call(this));

        _this.handleChange = function (event) {
            var _this$props = _this.props,
                disabled = _this$props.disabled,
                onChange = _this$props.onChange,
                value = _this$props.value;

            if (!disabled && onChange) {
                if (value !== undefined) {
                    onChange(value);
                } else {
                    onChange(event.target.value);
                }
            }
        };

        currentId += 1;
        _this._id = PREFIX + currentId;
        return _this;
    }

    /**
     * Handles check event and passes the checked state to the handler.
     * @param event
     */


    _createClass$r(RadioButton, [{
        key: 'render',


        /**
         * Renders a radio button.
         * @returns {XML}
         */
        value: function render() {
            var _props = this.props,
                checked = _props.checked,
                id = _props.id,
                children = _props.children,
                disabled = _props.disabled,
                name = _props.name,
                className = _props.className,
                onChange = _props.onChange,
                props = _objectWithoutProperties$9(_props, ['checked', 'id', 'children', 'disabled', 'name', 'className', 'onChange']);

            return React.createElement(
                'div',
                { className: className },
                React.createElement('input', _extends$f({}, props, {
                    id: id || this._id,
                    type: 'radio',
                    className: 'radio',
                    checked: checked,
                    onChange: this.handleChange,
                    name: name,
                    disabled: disabled
                })),
                React.createElement(
                    'label',
                    { htmlFor: id || this._id },
                    children
                )
            );
        }
    }]);

    return RadioButton;
}(Component), _class$i.defaultProps = {
    id: null,
    name: null,
    checked: undefined,
    onChange: null,
    disabled: false,
    children: null,
    value: undefined,
    className: null
}, _temp$f);

var VALID_RFID = /^[0-9A-Z]{14}$/i;
var SPLIT_RFID = /[0-9A-Z]{1,2}/gi;
var RFID_CONTENT = /^[0-9A-Z]{0,14}$/i;

var _createClass$s = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$j, _temp2$3;

function _classCallCheck$s(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$q(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$q(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RfidInput = (_temp2$3 = _class$j = function (_Component) {
    _inherits$q(RfidInput, _Component);

    function RfidInput() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck$s(this, RfidInput);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$q(this, (_ref = RfidInput.__proto__ || Object.getPrototypeOf(RfidInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            isScanning: false
        }, _this.onConfirm = function () {
            var _this$props = _this.props,
                onConfirm = _this$props.onConfirm,
                value = _this$props.value;

            onConfirm(value);
        }, _this.onInput = function (newRfid) {
            var onInput = _this.props.onInput;


            var newValue = newRfid.toUpperCase().replace(/\s/g, '');
            if (!RFID_CONTENT.test(newValue)) {
                return;
            }

            onInput(newValue);
        }, _this.onScan = function (rfid) {
            _this.endScan();
            if (VALID_RFID.test(rfid)) {
                var newRfid = rfid.toUpperCase();
                var _this$props2 = _this.props,
                    onConfirm = _this$props2.onConfirm,
                    onInput = _this$props2.onInput;

                onInput(newRfid);
                onConfirm(newRfid);
            }
        }, _this.startScan = function () {
            _this.setState({ isScanning: true });
            chayns.setNfcCallback(_this.onScan);
            chayns.showWaitCursor();
        }, _this.endScan = function () {
            var isScanning = _this.state.isScanning;


            if (!isScanning) {
                return;
            }
            chayns.removeNfcCallback();
            chayns.hideWaitCursor();
            _this.setState({ isScanning: false });
        }, _temp), _possibleConstructorReturn$q(_this, _ret);
    }

    _createClass$s(RfidInput, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                placeholder = _props.placeholder,
                confirmNode = _props.confirmNode,
                enableScan = _props.enableScan,
                scanText = _props.scanText,
                value = _props.value;
            var isScanning = this.state.isScanning;


            var classNames = classnames(className, 'cc__rfid-input', {
                'cc__rfid-input--enable-scan': enableScan
            });
            var disabled = !VALID_RFID.test(value);

            return React.createElement(
                'div',
                { className: classNames },
                React.createElement(
                    'div',
                    { className: 'cc__rfid-input__wrapper' },
                    React.createElement(Input, {
                        className: 'cc__rfid-input__input',
                        placeholder: placeholder,
                        onChange: this.onInput,
                        value: RfidInput.pretifyRfid(value),
                        autoCorrect: 'off',
                        autoCapitalize: 'off',
                        spellCheck: 'false'
                    }),
                    enableScan && !value && React.createElement(
                        ChooseButton,
                        {
                            onClick: isScanning ? this.endScan : this.startScan,
                            className: 'cc__rfid-input__scan'
                        },
                        scanText
                    ),
                    (!enableScan || value) && React.createElement(
                        ChooseButton,
                        {
                            onClick: this.onConfirm,
                            disabled: disabled,
                            className: 'cc__rfid-input__confirm'
                        },
                        confirmNode
                    )
                )
            );
        }
    }], [{
        key: 'pretifyRfid',
        value: function pretifyRfid(rfid) {
            return rfid ? rfid.match(SPLIT_RFID).join(' ') : '';
        }
    }, {
        key: 'isNfcAvailable',
        value: function isNfcAvailable() {
            return chayns.env.isMyChaynsApp && (chayns.env.isAndroid || chayns.env.isIOS && chayns.env.appVersion >= 5764) || chayns.env.isApp && chayns.env.isAndroid;
        }
    }]);

    return RfidInput;
}(Component), _class$j.defaultProps = {
    className: null,
    placeholder: 'Kartennummer',
    confirmNode: 'OK',
    enableScan: false,
    scanText: 'Scannen'
}, _temp2$3);

var _createClass$t = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$t(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var lastPageY = void 0;

var requestAnimationFrameFallback = window.requestAnimationFrame.bind(window) || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (c) {
    return setTimeout(c, 0);
};

var ScrollViewHelper = function () {
    function ScrollViewHelper(el, _ref) {
        var wrapper = _ref.wrapper,
            content = _ref.content,
            bar = _ref.bar;

        _classCallCheck$t(this, ScrollViewHelper);

        this.target = el;
        this.bar = bar;
        this.wrapper = wrapper;
        this.content = content;

        this.direction = window.getComputedStyle(this.target).direction;

        if (this.direction === 'rtl') {
            this.content.classList.add('rtl');
        }

        this.dragDealer(this.bar);
        this.refresh();

        if (!chayns.env.isMobile) {
            this.content.addEventListener('scroll', this.moveBar.bind(this));
            this.content.addEventListener('mouseenter', this.moveBar.bind(this));
        }
    }

    _createClass$t(ScrollViewHelper, [{
        key: 'dragDealer',
        value: function dragDealer() {
            var _this = this;

            var drag = function drag(e) {
                var delta = e.pageY - lastPageY;
                lastPageY = e.pageY;

                requestAnimationFrameFallback(function () {
                    _this.content.scrollTop += delta / _this.scrollRatio;
                });
            };

            var stop = function stop() {
                _this.target.classList.remove('cc__scroll-view--grabbed');
                document.removeEventListener('mousemove', drag);
                document.removeEventListener('mouseup', stop);
            };

            this.bar.addEventListener('mousedown', function (e) {
                lastPageY = e.pageY;

                _this.target.classList.add('cc__scroll-view--grabbed');

                document.addEventListener('mousemove', drag);
                document.addEventListener('mouseup', stop);

                return false;
            });
        }
    }, {
        key: 'moveBar',
        value: function moveBar() {
            var _this2 = this;

            requestAnimationFrameFallback(function () {
                var totalHeight = _this2.content.scrollHeight;

                var _content$getBoundingC = _this2.content.getBoundingClientRect(),
                    height = _content$getBoundingC.height;

                var ownHeight = Math.ceil(height);

                _this2.scrollRatio = ownHeight / totalHeight;

                var right = (_this2.target.clientWidth - _this2.bar.clientWidth) * -1;

                if (_this2.scrollRatio >= 1) {
                    _this2.target.classList.add('cc__scroll-view--hidden');
                } else {
                    _this2.target.classList.remove('cc__scroll-view--hidden');

                    _this2.bar.style.height = Math.max(_this2.scrollRatio, 0.1) * ownHeight + 'px';
                    _this2.bar.style.top = _this2.content.scrollTop / totalHeight * ownHeight + 'px';
                    _this2.bar.style.right = right + 'px';
                }
            });
        }
    }, {
        key: 'refresh',
        value: function refresh() {
            this.moveBar();
        }
    }]);

    return ScrollViewHelper;
}();

var _createClass$u = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$k, _temp$g;

function _defineProperty$a(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$u(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$r(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$r(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScrollView = (_temp$g = _class$k = function (_Component) {
    _inherits$r(ScrollView, _Component);

    function ScrollView() {
        _classCallCheck$u(this, ScrollView);

        return _possibleConstructorReturn$r(this, (ScrollView.__proto__ || Object.getPrototypeOf(ScrollView)).apply(this, arguments));
    }

    _createClass$u(ScrollView, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.scrollView = new ScrollViewHelper(this.node, {
                wrapper: this.wrapper,
                content: this.content,
                bar: this.bar
            });
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            if (this.scrollView) {
                this.scrollView.refresh();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                style = _props.style,
                showScrollbar = _props.showScrollbar,
                className = _props.className,
                children = _props.children;


            var classNames = classnames('cc__scroll-view', _defineProperty$a({
                'cc__scroll-view--hide': !showScrollbar,
                'cc__scroll-view--mobile': chayns.env.isMobile
            }, className, className));

            return React.createElement(
                'div',
                {
                    ref: function ref(_ref4) {
                        _this2.node = _ref4;
                    },
                    style: style,
                    className: classNames
                },
                React.createElement(
                    'div',
                    {
                        className: 'cc__scroll-view__wrapper',
                        ref: function ref(_ref2) {
                            _this2.wrapper = _ref2;
                        }
                    },
                    React.createElement(
                        'div',
                        {
                            style: {
                                maxHeight: style && style.maxHeight ? style.maxHeight : undefined,
                                height: style && style.height ? style.height : undefined,
                                overflowY: 'scroll'
                            },
                            className: 'cc__scroll-view__content',
                            ref: function ref(_ref) {
                                _this2.content = _ref;
                            }
                        },
                        children
                    )
                ),
                React.createElement('div', {
                    className: 'cc__scroll-view__scrollbar',
                    ref: function ref(_ref3) {
                        _this2.bar = _ref3;
                    }
                })
            );
        }
    }]);

    return ScrollView;
}(Component), _class$k.defaultProps = {
    children: null,
    style: undefined,
    className: undefined,
    showScrollbar: false
}, _temp$g);

var _createClass$v = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$l, _temp$h;

function _defineProperty$b(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$v(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$s(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$s(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectButton = (_temp$h = _class$l = function (_Component) {
    _inherits$s(SelectButton, _Component);

    function SelectButton(props) {
        _classCallCheck$v(this, SelectButton);

        var _this = _possibleConstructorReturn$s(this, (SelectButton.__proto__ || Object.getPrototypeOf(SelectButton)).call(this, props));

        _this.state = {
            // eslint-disable-next-line react/no-unused-state
            selected: []
        };

        _this.onClick = _this.onClick.bind(_this);
        _this.onSelect = _this.onSelect.bind(_this);
        return _this;
    }

    _createClass$v(SelectButton, [{
        key: 'onSelect',
        value: function onSelect(selected) {
            var onSelect = this.props.onSelect;
            var selection = selected.selection;


            if (selection.length === 1) {
                this.setLabel(selection[0].name);
            }

            if (onSelect) {
                onSelect(this.getReturnList(selected));
            }
        }
    }, {
        key: 'onClick',
        value: function onClick() {
            var _this2 = this;

            var _props = this.props,
                quickFind = _props.quickFind,
                multiSelect = _props.multiSelect,
                title = _props.title,
                description = _props.description,
                list = _props.list,
                listKey = _props.listKey,
                listValue = _props.listValue;

            var _list = SelectButton.getDialogList(list, listKey, listValue);

            chayns.dialog.select({
                title: title,
                message: description,
                quickfind: quickFind,
                multiselect: multiSelect,
                list: _list
            }).then(function (selected) {
                _this2.onSelect(selected);
            }).catch(function (e) {
                console.error(e);
            });
        }
    }, {
        key: 'getReturnList',
        value: function getReturnList(selected) {
            var _props2 = this.props,
                list = _props2.list,
                listKey = _props2.listKey;
            var buttonType = selected.buttonType,
                selectedItems = selected.selection;

            var result = [];

            selectedItems.map(function (item) {
                list.map(function (listItem) {
                    if (listItem[listKey] === item.value) result.push(listItem);
                });
            });
            return { buttonType: buttonType, selection: result };
        }
    }, {
        key: 'setLabel',
        value: function setLabel(text) {
            var showSelection = this.props.showSelection;


            if (showSelection) {
                this._btn.innerText = text;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props3 = this.props,
                className = _props3.className,
                label = _props3.label;

            var classNames = classnames(_defineProperty$b({
                choosebutton: true
            }, className, className));

            return React.createElement(
                'div',
                {
                    className: classNames,
                    onClick: this.onClick,
                    ref: function ref(_ref) {
                        _this3._btn = _ref;
                    }
                },
                label
            );
        }
    }], [{
        key: 'getDialogList',
        value: function getDialogList(_list, listKey, listValue) {
            var list = [];

            if (_list) {
                _list.map(function (item, i) {
                    var curListKey = listKey || i;
                    if (item[curListKey] && item[listValue]) {
                        list.push({ name: item[listValue], value: item[curListKey], isSelected: !!item.isSelected });
                    }
                });
            }

            return list;
        }
    }]);

    return SelectButton;
}(Component), _class$l.defaultProps = {
    quickFind: false,
    multiSelect: false,
    title: 'Select Dialog',
    description: 'Please select an item',
    label: 'Select',
    showSelection: true,
    className: null,
    onSelect: null
}, _temp$h);

var _createClass$w = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$m, _temp$i;

function _classCallCheck$w(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$t(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$t(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ANIMATION_TIMEOUT = 500;

var SelectList = (_temp$i = _class$m = function (_Component) {
    _inherits$t(SelectList, _Component);

    function SelectList(props) {
        _classCallCheck$w(this, SelectList);

        var _this = _possibleConstructorReturn$t(this, (SelectList.__proto__ || Object.getPrototypeOf(SelectList)).call(this, props));

        _this._changeActiveItem = function (id, value) {
            var selectedId = _this.state.selectedId;


            if (id === selectedId) return;

            if (_this.changing) return;

            var _this$props = _this.props,
                onChange = _this$props.onChange,
                propValue = _this$props.value;


            if (onChange) {
                onChange(id, value);
            }

            if (propValue) {
                return;
            }

            _this.changing = true;

            window.setTimeout(function () {
                _this.changing = false;
            }, ANIMATION_TIMEOUT);

            _this.setState({
                selectedId: id
            });
        };

        _this.state = {
            selectedId: props.defaultValue || 0
        };

        if (props.defaultValue && props.onChange) {
            props.onChange(props.defaultValue);
        }
        return _this;
    }

    _createClass$w(SelectList, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.selectListId = 'cc_selectlist__' + SelectList.maxId;
            SelectList.maxId += 1;

            var _props = this.props,
                children = _props.children,
                selectFirst = _props.selectFirst;

            if (selectFirst) {
                this.calculateFirst(children);
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var value = this.props.value;


            if (nextProps.value && nextProps.value !== value) {
                this.setState({
                    selectedId: nextProps.value
                });
            }
        }
    }, {
        key: 'calculateFirst',
        value: function calculateFirst(children) {
            if (!children) {
                return;
            }

            var firstItemId = 0;

            for (var i = 0, z = children.length; i < z; i += 1) {
                var child = children[i];
                if (React.isValidElement(child)) {
                    if (child && child.props && child.props.id && !child.props.disabled) {
                        firstItemId = child.props.id;
                        break;
                    }
                }
            }

            this.setState({
                selectedId: firstItemId
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                className = _props2.className,
                children = _props2.children;
            var selectedId = this.state.selectedId;


            if (children.length > 0) {
                return React.createElement(
                    'div',
                    { className: className },
                    React.Children.map(children, function (child) {
                        if (!React.isValidElement(child)) {
                            return null;
                        }

                        return React.cloneElement(child, {
                            changeListItem: _this2._changeActiveItem,
                            selectListId: _this2.selectListId,
                            selectListSelectedId: selectedId
                        });
                    })
                );
            }

            return null;
        }
    }]);

    return SelectList;
}(Component), _class$m.maxId = 0, _class$m.defaultProps = {
    className: null,
    defaultValue: null,
    value: null,
    onChange: null,
    selectFirst: null,
    children: null
}, _temp$i);

var _createClass$x = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$n, _temp$j;

function _classCallCheck$x(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$u(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$u(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectItem = (_temp$j = _class$n = function (_Component) {
    _inherits$u(SelectItem, _Component);

    function SelectItem(props) {
        _classCallCheck$x(this, SelectItem);

        var _this = _possibleConstructorReturn$u(this, (SelectItem.__proto__ || Object.getPrototypeOf(SelectItem)).call(this, props));

        _this._handleChange = function () {
            var _this$props = _this.props,
                changeListItem = _this$props.changeListItem,
                id = _this$props.id,
                value = _this$props.value;


            if (changeListItem) {
                changeListItem(id, value);
            }
        };

        _this.radioId = _this._getRadioId(props.id);
        return _this;
    }

    _createClass$x(SelectItem, [{
        key: '_getRadioId',
        value: function _getRadioId(id) {
            var selectListId = this.props.selectListId;


            return selectListId + '-' + id;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                id = _props.id,
                className = _props.className,
                selectListId = _props.selectListId,
                disabled = _props.disabled,
                name = _props.name,
                selectListSelectedId = _props.selectListSelectedId,
                children = _props.children;


            var checked = id === selectListSelectedId;

            return React.createElement(
                'div',
                {
                    key: id,
                    className: className
                },
                React.createElement('input', {
                    name: selectListId,
                    type: 'radio',
                    className: 'radio',
                    id: this.radioId,
                    checked: checked,
                    onChange: this._handleChange,
                    disabled: disabled
                }),
                React.createElement(
                    'label',
                    { htmlFor: this.radioId },
                    name
                ),
                children && React.createElement(
                    TransitionGroup,
                    null,
                    checked && React.createElement(
                        CSSTransition,
                        {
                            key: 'children',
                            classNames: 'react-fade',
                            timeout: { enter: 500, exit: 500 }
                        },
                        React.createElement(
                            'div',
                            { className: 'selectlist__selectitem' },
                            children
                        )
                    )
                )
            );
        }
    }]);

    return SelectItem;
}(Component), _class$n.defaultProps = {
    id: null,
    className: '',
    disabled: false,
    children: null,
    changeListItem: null,
    name: '',
    value: null,
    selectListSelectedId: null
}, _temp$j);

var _createClass$y = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$o, _temp$k;

function _classCallCheck$y(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$v(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$v(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ############################
 * # HARRY, YOU ARE A WIZARD! #
 * ############################
 */
var SetupWizard = (_temp$k = _class$o = function (_Component) {
    _inherits$v(SetupWizard, _Component);

    function SetupWizard() {
        _classCallCheck$y(this, SetupWizard);

        var _this = _possibleConstructorReturn$v(this, (SetupWizard.__proto__ || Object.getPrototypeOf(SetupWizard)).call(this));

        _this.state = {
            currentStep: 0,
            maxProgress: 0,
            completedSteps: []
        };
        _this.stepComplete = _this.stepComplete.bind(_this);
        _this.previousStep = _this.previousStep.bind(_this);
        _this.nextStep = _this.nextStep.bind(_this);
        _this.toStep = _this.toStep.bind(_this);
        _this.resetToStep = _this.resetToStep.bind(_this);
        _this.ready = _this.ready.bind(_this);
        _this.notComplete = _this.notComplete.bind(_this);
        return _this;
    }

    _createClass$y(SetupWizard, [{
        key: 'getChildContext',
        value: function getChildContext() {
            return {
                stepComplete: this.stepComplete,
                previousStep: this.previousStep,
                nextStep: this.nextStep,
                toStep: this.toStep,
                resetToStep: this.resetToStep
            };
        }
    }, {
        key: 'stepComplete',
        value: function stepComplete(value) {
            var _state = this.state,
                currentStep = _state.currentStep,
                completedSteps = _state.completedSteps;

            if (value === true) {
                if (completedSteps.indexOf(currentStep) === -1) {
                    completedSteps.push(currentStep);
                    this.setState({ completedSteps: completedSteps });
                }
            } else if (completedSteps.indexOf(currentStep) >= 0) {
                var children = this.props.children;


                completedSteps.splice(completedSteps.indexOf(currentStep));
                this.setState({ completedSteps: completedSteps });

                if (children[currentStep].props.required === true) {
                    this.setState({ maxProgress: currentStep });
                }
            }
        }
    }, {
        key: 'previousStep',
        value: function previousStep() {
            var currentStep = this.state.currentStep;

            if (currentStep > 0) {
                this.updateContent(currentStep - 1);
            }
        }
    }, {
        key: 'nextStep',
        value: function nextStep() {
            var children = this.props.children;
            var currentStep = this.state.currentStep;

            if (chayns.utils.isArray(children) && children.length - 1 > currentStep) {
                this.updateContent(currentStep + 1);
            } else {
                this.ready();
            }
        }
    }, {
        key: 'toStep',
        value: function toStep(step) {
            var children = this.props.children;

            if (chayns.utils.isArray(children)) {
                if (children.length - 1 >= step) {
                    this.updateContent(step);
                } else if (children.length - 1 === step + 1) {
                    this.ready();
                }
            }
        }
    }, {
        key: 'resetToStep',
        value: function resetToStep(step) {
            var _state2 = this.state,
                completedSteps = _state2.completedSteps,
                maxProgress = _state2.maxProgress;

            for (var i = step; i < maxProgress; i += 1) {
                if (completedSteps.indexOf(i) >= 0) {
                    completedSteps.splice(completedSteps.indexOf(i));
                }
            }
            this.setState({ maxProgress: step, currentStep: step, completedSteps: completedSteps });
        }
    }, {
        key: 'ready',
        value: function ready() {
            var _props = this.props,
                ready = _props.ready,
                children = _props.children;
            var _state3 = this.state,
                completedSteps = _state3.completedSteps,
                currentStep = _state3.currentStep;

            if (!(children[currentStep].props.required === true && completedSteps.indexOf(currentStep) === -1)) {
                if (ready) {
                    ready();
                }
            } else {
                this.notComplete();
            }
        }
    }, {
        key: 'notComplete',
        value: function notComplete() {
            var notComplete = this.props.notComplete;

            if (notComplete) {
                notComplete();
            }
        }
    }, {
        key: 'updateContent',
        value: function updateContent(newCurrentStep) {
            var children = this.props.children;
            var maxProgress = this.state.maxProgress;
            var _state4 = this.state,
                completedSteps = _state4.completedSteps,
                currentStep = _state4.currentStep;

            if (!(children[currentStep].props.required === true && completedSteps.indexOf(currentStep) === -1)) {
                maxProgress = newCurrentStep > maxProgress ? newCurrentStep : maxProgress;
                this.setState({
                    currentStep: newCurrentStep,
                    maxProgress: maxProgress
                });
            } else {
                this.notComplete();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                style = _props2.style,
                contentStyle = _props2.contentStyle,
                title = _props2.title,
                description = _props2.description,
                children = _props2.children;
            var _state5 = this.state,
                maxProgress = _state5.maxProgress,
                currentStep = _state5.currentStep,
                completedSteps = _state5.completedSteps;

            return React.createElement(
                'div',
                { style: style },
                title && React.createElement(
                    'h1',
                    null,
                    title
                ),
                description && React.createElement('p', { dangerouslySetInnerHTML: { __html: description } }),
                children.map(function (child, index) {
                    return React.createElement(
                        'div',
                        {
                            className: classnames('accordion', 'accordion--fixed', {
                                'accordion--open': index === currentStep,
                                'accordion--disabled': index > maxProgress
                            })
                            // eslint-disable-next-line react/no-array-index-key
                            , key: index
                        },
                        React.createElement(
                            'div',
                            {
                                className: classnames('accordion__head', 'no-arrow', 'ellipsis', 'wizardHead', { pointer: index <= maxProgress }),
                                onClick: function onClick() {
                                    if (maxProgress >= index) {
                                        if (currentStep === index) {
                                            _this2.setState({ currentStep: -1 });
                                        } else {
                                            _this2.setState({ currentStep: index });
                                        }
                                    }
                                }
                            },
                            React.createElement(
                                'div',
                                {
                                    className: classnames('number', {
                                        numberDarkComplete: chayns.env.site.colorMode === 1 && completedSteps.indexOf(index) >= 0,
                                        numberDarkNotComplete: chayns.env.site.colorMode === 1 && completedSteps.indexOf(index) === -1,
                                        'chayns__background-color--70 chayns__color--5': chayns.env.site.colorMode !== 1 && completedSteps.indexOf(index) >= 0,
                                        'chayns__background-color--20 chayns__color--100': chayns.env.site.colorMode !== 1 && completedSteps.indexOf(index) === -1
                                    })
                                },
                                index + 1
                            ),
                            React.createElement(
                                'div',
                                { className: 'title' },
                                child.props.title
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'accordion__body', style: contentStyle },
                            child
                        )
                    );
                })
            );
        }
    }]);

    return SetupWizard;
}(Component), _class$o.childContextTypes = {
    stepComplete: PropTypes.func,
    previousStep: PropTypes.func,
    nextStep: PropTypes.func,
    toStep: PropTypes.func,
    resetToStep: PropTypes.func
}, _class$o.defaultProps = {
    ready: null,
    notComplete: null,
    children: null,
    style: null,
    contentStyle: null,
    title: null,
    description: null
}, _temp$k);

var SetupItem = function SetupItem(_ref) {
    var children = _ref.children;
    return children;
};

SetupItem.propTypes = {
    children: PropTypes.element,
    title: PropTypes.string.isRequired,
    required: PropTypes.bool
};

SetupItem.defaultProps = {
    children: null
};

function shareWithUrl(provider, link) {
    var openLink = provider.url.replace('{url}', link);
    chayns.openUrlInBrowser(openLink);
}

function shareWithApp(provider, link) {
    var value = {
        text: link,
        sharingApp: provider.providerId > -1 ? provider.providerId : -1,
        sharingAndroidApp: provider.androidIdentifier || null
    };
    chayns.share(value);
}

function copyToClipboard(provider, link) {
    var aux = document.createElement('input');
    aux.setAttribute('value', link);
    document.body.appendChild(aux);
    aux.select();
    document.execCommand('copy');
    document.body.removeChild(aux);
}

var actions = {
    0: copyToClipboard,
    1: shareWithUrl,
    2: shareWithApp
};

function share(provider, link) {
    actions[provider.action](provider, link);
}

var _createClass$z = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$z(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$w(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$w(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SharingBarItem = function (_Component) {
    _inherits$w(SharingBarItem, _Component);

    function SharingBarItem() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck$z(this, SharingBarItem);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$w(this, (_ref = SharingBarItem.__proto__ || Object.getPrototypeOf(SharingBarItem)).call.apply(_ref, [this].concat(args))), _this), _this.onClick = function () {
            var _this$props = _this.props,
                provider = _this$props.provider,
                link = _this$props.link;


            share(provider, link);
        }, _temp), _possibleConstructorReturn$w(_this, _ret);
    }

    _createClass$z(SharingBarItem, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                name = _props.name,
                icon = _props.icon;


            return React.createElement(
                'button',
                {
                    type: 'button',
                    className: 'sharing-bar__iten button',
                    title: name,
                    onClick: this.onClick
                },
                React.createElement('i', { className: icon })
            );
        }
    }]);

    return SharingBarItem;
}(Component);

var shareProvider = [{
    id: 0,
    providerId: -1,
    name: 'Zwischenablage',
    androidIdentifier: null,
    icon: 'fa-files-o',
    action: 0,
    url: null,
    available: false
}, {
    id: 1,
    providerId: 0,
    name: 'Mail',
    androidIdentifier: null,
    icon: 'fa-envelope',
    action: 2,
    url: null,
    available: false
}, {
    id: 2,
    providerId: 1,
    name: 'WhatsApp',
    androidIdentifier: 'com.whatsapp',
    icon: 'fa-whatsapp',
    action: 1,
    url: null,
    available: false
}, {
    id: 3,
    providerId: 2,
    name: 'Facebook',
    androidIdentifier: 'com.facebook.katana',
    icon: 'fa-facebook',
    action: 1,
    url: 'http://www.facebook.com/dialog/share?app_id=472449496108149&display=page&href={url}&redirect_uri=http://facebook.com',
    available: true
}, {
    id: 4,
    providerId: 4,
    name: 'GooglePlus',
    androidIdentifier: 'com.google.android.apps.plus',
    icon: 'fa-google-plus',
    action: 1,
    url: 'http://plus.google.com/share?url={url}',
    available: true
}, {
    id: 5,
    providerId: 5,
    name: 'Twitter',
    androidIdentifier: null,
    icon: 'fa-twitter',
    action: 1,
    url: 'http://twitter.com/intent/tweet?text=&url={url}&hashtags=chayns',
    available: true
}, {
    id: 6,
    providerId: -1,
    name: 'Tumblr',
    androidIdentifier: 'com.tumblr',
    icon: 'fa-tumblr-square',
    action: 1,
    url: '//tumblr.com/widgets/share/tool?canonicalUrl={url}',
    available: false
}, {
    id: 7,
    providerId: -1,
    name: 'Telegram',
    androidIdentifier: 'org.telegram.messenger',
    icon: 'fa-paper-plane',
    action: 1,
    url: null,
    available: false
},
/*    {
        'id': 8,
        'providerId': -1,
        'name': 'Snapchat',
        'androidIdentifier': 'com.snapchat.android',
        'icon': 'fa-snapchat-ghost',
        'action': 2,
        'url': null,
        'available': false
    }, */
{
    id: 9,
    providerId: -1,
    name: 'Skype',
    androidIdentifier: 'com.skype.raider',
    icon: 'fa-skype',
    action: 2,
    url: null,
    available: false
}, {
    id: 10,
    providerId: -1,
    name: 'Share',
    androidIdentifier: null,
    icon: 'fa-share-alt',
    action: 2,
    url: null,
    available: false
}];

var shareActions = {
    copyToClipboard: 0,
    shareWithUrl: 1,
    shareWithApp: 2
};

/* eslint-disable no-param-reassign,no-else-return */

function getAvailableShareProviders() {
    if (chayns.env.isApp) {
        return chayns.getAvailableSharingServices().then(function (response) {
            var sharingApps = response.availableSharingApps;
            shareProvider.forEach(function (curProvider) {
                if (curProvider.providerId < 0) {
                    return;
                }

                var shareApp = sharingApps.find(function (curApp) {
                    return curApp === curProvider.providerId;
                });

                if (shareApp !== undefined) {
                    curProvider.available = true;
                    curProvider.action = shareActions.shareWithApp;
                }
            });

            if (chayns.env.isAndroid) {
                shareProvider[0].available = true;

                var androidApps = response.availableAndroidApps;

                shareProvider.forEach(function (curProvider) {
                    if (!curProvider.androidIdentifier) {
                        return;
                    }

                    var shareApp = androidApps.find(function (curApp) {
                        return curApp === curProvider.androidIdentifier;
                    });

                    if (shareApp) {
                        curProvider.available = true;
                        curProvider.action = shareActions.shareWithApp;
                    }
                });
            }

            if (chayns.env.isIOS && chayns.env.appVersion >= 5182 || chayns.env.isAndroid && chayns.env.appVersion >= 5205) {
                shareProvider[shareProvider.length - 1].available = true;
            }

            return Promise.resolve(shareProvider);
        });
    } else {
        if (!chayns.env.isIOS) {
            shareProvider[0].available = true;
        }
        return Promise.resolve(shareProvider);
    }
}

function getDefaultShareLink() {
    if (chayns.env.isChaynsWeb) {
        return chayns.env.site.url;
    }
    var tapp = chayns.env.site.tapps.find(function (element) {
        return element.id === chayns.env.site.tapp.id;
    });

    var shareLink = 'http://' + (chayns.env.site.domain || 'chayns.net/' + chayns.env.site.id) + '/';

    if (tapp) {
        shareLink += tapp.customUrl || 'tapp/index/' + tapp.id;
    } else {
        shareLink += 'tapp/index/' + chayns.env.site.tapp.id;
    }

    return shareLink;
}

var _createClass$A = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$p, _temp$l;

function _defineProperty$c(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$A(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$x(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$x(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SharingBar = (_temp$l = _class$p = function (_Component) {
    _inherits$x(SharingBar, _Component);

    function SharingBar() {
        _classCallCheck$A(this, SharingBar);

        var _this = _possibleConstructorReturn$x(this, (SharingBar.__proto__ || Object.getPrototypeOf(SharingBar)).call(this));

        _this.state = {
            sharingProvider: []
        };
        return _this;
    }

    _createClass$A(SharingBar, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _this2 = this;

            getAvailableShareProviders().then(function (provider) {
                var link = _this2.props.link;


                var sharingItems = [];

                provider.map(function (item) {
                    if (item.available) {
                        sharingItems.push(React.createElement(SharingBarItem, {
                            icon: item.icon,
                            name: item.name,
                            provider: item,
                            key: item.id,
                            link: link || getDefaultShareLink()
                        }));
                    }
                });

                _this2.setState({
                    sharingProvider: sharingItems // TODO: save data in state and not components
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var className = this.props.className;
            var sharingProvider = this.state.sharingProvider;


            var classNames = classnames(_defineProperty$c({
                'sharing-bar__item-list': 'sharing-bar__item-list'
            }, className, className));

            return React.createElement(
                'div',
                { className: classNames },
                sharingProvider
            );
        }
    }]);

    return SharingBar;
}(Component), _class$p.defaultProps = {
    link: null,
    className: null
}, _temp$l);

var SmallWaitCursor = function SmallWaitCursor(_ref) {
    var show = _ref.show,
        style = _ref.style,
        absolute = _ref.absolute;

    var waitCursorClasses = classnames('wait--cursor--wrapper', {
        absolute: absolute,
        hidden: !show
    });

    return React.createElement(
        'div',
        { className: waitCursorClasses, style: style },
        React.createElement(
            'div',
            { className: 'small--wait--cursor chayns__background-color--10' },
            React.createElement('div', { className: 'spinner chayns__border-color--80' })
        )
    );
};

SmallWaitCursor.defaultProps = {
    absolute: false,
    show: false,
    style: null
};

var _createClass$B = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$q, _temp$m;

function _classCallCheck$B(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$y(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$y(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Slide = (_temp$m = _class$q = function (_Component) {
    _inherits$y(Slide, _Component);

    function Slide() {
        _classCallCheck$B(this, Slide);

        return _possibleConstructorReturn$y(this, (Slide.__proto__ || Object.getPrototypeOf(Slide)).apply(this, arguments));
    }

    _createClass$B(Slide, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var onClick = this.props.onClick;


            if (!window.react) {
                window.react = {};
            }

            if (!window.react.slider) {
                window.react.slider = {
                    callbacks: []
                };
            }

            if (onClick) {
                this._callbackId = window.react.slider.callbacks.length;
                window.react.slider.callbacks.push(onClick);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                image = _props.image;


            return React.createElement(
                'div',
                {
                    style: {
                        backgroundImage: 'url(\'' + image + '\')'
                    },
                    className: 'swiper-slide',
                    'data-callbackid': this._callbackId,
                    ref: function ref(div) {
                        _this2._div = div;
                    }
                },
                children
            );
        }
    }]);

    return Slide;
}(Component), _class$q.defaultProps = {
    onClick: null,
    children: null
}, _temp$m);

var _createClass$C = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$r, _temp$n;

function _defineProperty$d(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$C(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$z(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$z(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* global Swiper */

var App = (_temp$n = _class$r = function (_Component) {
    _inherits$z(App, _Component);

    function App() {
        _classCallCheck$C(this, App);

        var _this = _possibleConstructorReturn$z(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this));

        window.addEventListener('resize', function () {
            _this._onResize();
        }, true);

        _this._swiper = null;

        _this.state = {
            // eslint-disable-next-line react/no-unused-state
            swiperLoaded: false
        };
        return _this;
    }

    _createClass$C(App, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this._updateSwiper();

            var elements = this._swiperElement.querySelectorAll('.swiper-slide');

            var _loop = function _loop(i, x) {
                elements[i].addEventListener('click', function (event) {
                    if (elements[i].dataset && elements[i].dataset.callbackid) {
                        var callbackid = elements[i].dataset.callbackid;


                        if (callbackid && window.react && window.react.slider && window.react.slider.callbacks && window.react.slider.callbacks[callbackid]) {
                            window.react.slider.callbacks[callbackid](event);
                        }
                    }
                }, false);
            };

            for (var i = 0, x = elements.length; i < x; i += 1) {
                _loop(i, x);
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this._updateSwiper();
        }
    }, {
        key: '_updateSwiper',
        value: function _updateSwiper() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                length = _props.length,
                loop = _props.loop,
                autoplay = _props.autoplay,
                preloadImages = _props.preloadImages,
                lazyLoading = _props.lazyLoading;


            if (this._swiper) {
                if (this._swiper.destroy) {
                    this._swiper.destroy();
                }

                this._swiper = null;
            }

            if (window.chayns.utils.isArray(children) && children.length > 1 && (!length || length > 1)) {
                this._swiper = new Swiper(this._swiperElement, {
                    spaceBetween: 10,
                    loop: loop,
                    grabCursor: false,
                    pagination: this._paginationElement,
                    paginationClickable: true,
                    autoplay: autoplay,
                    autoplayDisableOnInteraction: false,
                    preloadImages: preloadImages,
                    lazyLoading: lazyLoading || false,
                    paginationBulletRender: function paginationBulletRender(index, className) {
                        return '<span class="swiper-pagination-bullet ' + className + '" style="background-color: ' + window.chayns.env.site.color + ' !important"></span>';
                    }
                });
            } else {
                window.setTimeout(function () {
                    _this2._swiperElement.classList.add('swiper-slide-active');
                    _this2._swiperElement.classList.add('swiper--single-slide');
                }, 0);
            }

            this._onResize();
        }
    }, {
        key: '_onResize',
        value: function _onResize() {
            if (this._swiperElement) {
                var _swiperElement$getBou = this._swiperElement.getBoundingClientRect(),
                    width = _swiperElement$getBou.width;

                var height = this._getHeight(width);

                this._swiperElement.style.height = height + 'px';
            }
        }
    }, {
        key: '_getHeight',
        value: function _getHeight(width) {
            var setHeight = this.props.setHeight;


            if (setHeight) {
                return setHeight(width);
            }

            return 9 / 16 * width;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                className = _props2.className,
                overlay = _props2.overlay,
                children = _props2.children;


            var classNames = classnames(_defineProperty$d({
                'swiper-container': true,
                'swiper-container-horizontal': true
            }, className, className));

            return React.createElement(
                'div',
                {
                    className: classNames
                },
                React.createElement(
                    'div',
                    {
                        ref: function ref(swiper) {
                            _this3._swiperElement = swiper;
                        },
                        className: 'swiper-overlay--wrapper'
                    },
                    overlay,
                    React.createElement(
                        'div',
                        { className: 'swiper-wrapper' },
                        children
                    )
                ),
                React.createElement('div', {
                    className: 'swiper-pagination',
                    ref: function ref(pagination) {
                        _this3._paginationElement = pagination;
                    }
                })
            );
        }
    }]);

    return App;
}(Component), _class$r.defaultProps = {
    loop: true,
    autoplay: null,
    lazyLoading: null,
    preloadImages: null,
    setHeight: null,
    overlay: null,
    className: null,
    children: null,
    length: null
}, _temp$n);

var _createClass$D = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$s, _temp$o;

function _defineProperty$e(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$D(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$A(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$A(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SlideOverlay = (_temp$o = _class$s = function (_Component) {
    _inherits$A(SlideOverlay, _Component);

    function SlideOverlay() {
        _classCallCheck$D(this, SlideOverlay);

        var _this = _possibleConstructorReturn$A(this, (SlideOverlay.__proto__ || Object.getPrototypeOf(SlideOverlay)).call(this));

        console.warn('SlideOverlay is marked as deprecated');
        return _this;
    }

    _createClass$D(SlideOverlay, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                position = _props.position,
                gradient = _props.gradient,
                children = _props.children;


            var className = classnames(_defineProperty$e({
                slide__overlay__text: true
            }, 'slide__overlay__text--' + position, position));

            var classNamesTop = classnames({
                slide__overlay: true,
                'slide__overlay--gradient': gradient
            });

            return React.createElement(
                'div',
                { className: classNamesTop },
                React.createElement(
                    'div',
                    { className: className },
                    children
                )
            );
        }
    }]);

    return SlideOverlay;
}(Component), _class$s.defaultProps = {
    position: null,
    gradient: null
}, _temp$o);

var _createClass$E = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$t, _temp2$4;

function _classCallCheck$E(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$B(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$B(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextArea = (_temp2$4 = _class$t = function (_Component) {
    _inherits$B(TextArea, _Component);

    function TextArea() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck$E(this, TextArea);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$B(this, (_ref = TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function () {
            var _this$props = _this.props,
                onChange = _this$props.onChange,
                autogrow = _this$props.autogrow;


            if (onChange) {
                onChange(_this._node.value);
            }

            if (autogrow) {
                if (_this._node.value === '') {
                    _this.grow(_this.initialHeight);
                } else {
                    _this.grow('0');
                }
            }
        }, _this.onBlur = function () {
            var onBlur = _this.props.onBlur;


            if (onBlur) {
                onBlur(_this._node.value); // TODO: Get data from event
            }
        }, _this.ref = function (node) {
            var reference = _this.props.reference;


            _this._node = node;

            if (reference) {
                reference(node);
            }
        }, _temp), _possibleConstructorReturn$B(_this, _ret);
    }

    _createClass$E(TextArea, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                required = _props.required,
                autogrow = _props.autogrow;


            if (required) {
                this._node.setAttribute('required', '');
            }

            this._node.setAttribute('row', '1');
            this._node.style.overflow = 'hidden';

            if (autogrow) {
                this.offset = this._node.offsetHeight - this._node.clientHeight;

                this.initialHeight = '0px';

                this.grow('0');
            }
        }
    }, {
        key: 'grow',
        value: function grow(initHeight) {
            if (initHeight) {
                this._node.style.height = initHeight;
            }

            if (this._node.scrollHeight + this.offset > 0) {
                this._node.style.height = this._node.scrollHeight + this.offset + 'px';
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                styleProp = _props2.style,
                className = _props2.className,
                placeholder = _props2.placeholder,
                defaultValue = _props2.defaultValue,
                onChange = _props2.onChange,
                autogrow = _props2.autogrow,
                onBlur = _props2.onBlur,
                onKeyUp = _props2.onKeyUp,
                onKeyDown = _props2.onKeyDown,
                value = _props2.value;


            var style = objectAssign({}, this.defaultStyle, styleProp);

            var classNames = classnames('input', className);

            return React.createElement('textarea', {
                className: classNames,
                ref: this.ref,
                placeholder: placeholder,
                style: style,
                defaultValue: defaultValue,
                onChange: onChange || autogrow ? this.onChange : null,
                onBlur: onBlur ? this.onBlur : null,
                onKeyUp: onKeyUp,
                onKeyDown: onKeyDown,
                value: value
            });
        }
    }]);

    return TextArea;
}(Component), _class$t.defaultStyle = {
    width: '100%',
    paddingBottom: '12px'
}, _class$t.defaultProps = {
    style: null,
    className: null,
    placeholder: null,
    required: null,
    onChange: null,
    onBlur: null,
    defaultValue: undefined,
    value: undefined,
    onKeyUp: null,
    onKeyDown: null,
    autogrow: null,
    reference: null
}, _temp2$4);

var _createClass$F = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$u, _temp$p;

function _classCallCheck$F(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$C(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$C(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextString = (_temp$p = _class$u = function (_Component) {
    _inherits$C(TextString, _Component);

    function TextString() {
        _classCallCheck$F(this, TextString);

        var _this = _possibleConstructorReturn$C(this, (TextString.__proto__ || Object.getPrototypeOf(TextString)).call(this));

        _this._closed = function (event) {
            var target = TextString.getEditableParent(event.target || event.srcElement || _this);
            if (target !== _this._div) {
                window.setTimeout(function () {
                    _this._textString = _this._div.innerHTML;

                    _this._div.innerHTML = _this._replacePlaceholder(_this._textString);

                    _this.setState({
                        editmode: false
                    });
                }, 100);
            }
        };

        _this.state = {
            editmode: false
        };

        _this.editorInitialized = false;
        return _this;
    }

    _createClass$F(TextString, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            this.updateTextStrings();

            this._div.addEventListener('click', function (event) {
                if (event.ctrlKey) {
                    _this2._div.innerHTML = _this2._textString;

                    _this2.setState({
                        editmode: true
                    });
                }
            });
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.updateTextStrings();
        }
    }, {
        key: 'updateTextStrings',
        value: function updateTextStrings() {
            var editmode = this.state.editmode;


            if (!this.editorInitialized && editmode && this._showTextString() && window.chayns.env.user.isAuthenticated) {
                var _props = this.props,
                    textString = _props.textString,
                    render = _props.render;


                this._div.setAttribute('chayns-lang', textString);

                if (render === null || render) {
                    window.chayns.utils.lang.renderTextStrings(this._div.parentNode);
                }

                document.addEventListener('click', this._closed);

                this.editorInitialized = true;
            }
        }
    }, {
        key: '_replacePlaceholder',
        value: function _replacePlaceholder(value) {
            var replace = this.props.replace;

            var retVal = value;

            if (retVal && replace) {
                Object.keys(replace).map(function (key) {
                    retVal = retVal.replace(new RegExp(key, 'g'), replace[key]);
                });
            }

            return retVal;
        }
    }, {
        key: '_showTextString',
        value: function _showTextString() {
            return this._textString !== null && this._textString !== '' || window.showTextStrings;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                textString = _props2.textString,
                renderHtml = _props2.renderHtml,
                classNames = _props2.classNames;


            if (textString) {
                this._textString = window.chayns.utils.lang.get(textString);

                if (this._showTextString() && this._textString !== '') {
                    if (renderHtml) {
                        return React.createElement('div', {
                            className: classNames,
                            ref: function ref(div) {
                                _this3._div = div;
                            },
                            dangerouslySetInnerHTML: { __html: this._replacePlaceholder(this._textString) }
                        });
                    }

                    return React.createElement(
                        'div',
                        {
                            className: classNames,
                            ref: function ref(div) {
                                _this3._div = div;
                            }
                        },
                        this._replacePlaceholder(this._textString)
                    );
                }

                if (this._showTextString()) {
                    return React.createElement(
                        'div',
                        {
                            className: classNames,
                            ref: function ref(div) {
                                _this3._div = div;
                            }
                        },
                        'No textstring found.'
                    );
                }
            }

            return null;
        }
    }], [{
        key: 'getEditableParent',
        value: function getEditableParent(element) {
            var $element = element;

            while ($element && !$element.hasAttribute('chayns-lang')) {
                if ($element.nodeName.toLowerCase() === 'body' || !$element) {
                    return null;
                }
                $element = $element.parentNode;
            }
            return $element;
        }
    }]);

    return TextString;
}(Component), _class$u.defaultProps = {
    render: null,
    replace: null,
    renderHtml: null,
    classNames: null
}, _temp$p);

var _createClass$G = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$v, _temp$q;

function _classCallCheck$G(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$D(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$D(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tooltip = (_temp$q = _class$v = function (_Component) {
    _inherits$D(Tooltip, _Component);

    function Tooltip() {
        _classCallCheck$G(this, Tooltip);

        var _this = _possibleConstructorReturn$D(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this));

        _this.state = {
            active: false,
            removed: true
        };

        _this.show = _this.show.bind(_this);
        _this.hide = _this.hide.bind(_this);
        return _this;
    }

    _createClass$G(Tooltip, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var bindListeners = this.props.bindListeners;


            if (bindListeners) {
                this.node.addEventListener('mouseover', this.show, false);
                this.node.addEventListener('mouseleave', this.hide, false);
            }

            this.show();
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.node.removeEventListener('mouseover', this.show, false);
            this.node.removeEventListener('mouseleave', this.hide, false);
        }
    }, {
        key: 'show',
        value: function show() {
            var _this2 = this;

            window.clearTimeout(this.timeout);

            this.setState({
                active: false,
                removed: false
            });

            this.timeout = window.setTimeout(function () {
                _this2.setState({
                    active: true,
                    removed: false
                });
            });
        }
    }, {
        key: 'hide',
        value: function hide() {
            var _this3 = this;

            this.setState({
                active: false,
                removed: false
            });

            this.timeout = window.setTimeout(function () {
                _this3.setState({
                    active: false,
                    removed: true
                });
            }, 500);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props = this.props,
                children = _props.children,
                text = _props.text;
            var _state = this.state,
                active = _state.active,
                removed = _state.removed;


            var className = classnames('cc__tooltip', {
                'cc__tooltip--active': active
            });

            return React.createElement(
                'div',
                {
                    className: className,
                    ref: function ref(node) {
                        _this4.node = node;
                    }
                },
                !removed && React.createElement(
                    'div',
                    {
                        className: 'cc__tooltip__overlay'
                    },
                    text
                ),
                children
            );
        }
    }]);

    return Tooltip;
}(Component), _class$v.defaultProps = {
    children: null,
    bindListeners: false
}, _temp$q);

/**
 * Requests a file upload from the user and returns the selected files
 * @param {{}} config - Config object that describes the behaviour of the select-dialog
 * @param {string} [config.type = *\/*] - MIME-Types that are allowed to be selected
 * @param {bool} [config.multiple = false] - Allow the selecting of multiple files
 * @returns {Promise<File>|Promise<File[]>|Promise<FileList>|Promise<null>} - Promise is resolved when user selects a file.
 * Returns the file (or file list, when multiple is set)
 */
function selectFile() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$type = _ref.type,
            type = _ref$type === undefined ? '*/*' : _ref$type,
            _ref$multiple = _ref.multiple,
            multiple = _ref$multiple === undefined ? false : _ref$multiple;

        return new Promise(function (resolve) {
                var input = document.createElement('input');
                input.type = 'file';

                if (type !== '*/*' && type) {
                        input.accept = type;
                }

                if (multiple) {
                        input.multiple = true;
                }

                input.style.visibility = 'none';
                input.style.width = '0';
                input.style.height = '0';

                document.body.appendChild(input);

                input.addEventListener('change', function (event) {
                        document.body.removeChild(input);

                        resolve(event);
                });

                input.click();
        }).then(function (event) {
                if (!event || !event.target || !event.target.files) {
                        return null;
                }

                var files = event.target.files;


                if (!(files instanceof FileList) || files.length <= 0) {
                        return null;
                }

                if (!multiple) {
                        return files[0];
                }

                return files;
        });
}

var IMAGE_MIME_TYPES = ['image/png', 'image/jpeg', 'image/gif', 'image/bmp', 'image/webp', 'image/x-icon', 'image/*'];
var AUDIO_MIME_TYPES = ['audio/mp3', 'audio/mpeg3', 'audio/x-mpeg-3', 'audio/midi', 'audio/mpeg', 'audio/webm', 'audio/ogg', 'audio/wav', 'audio/x-mpeg', 'audio/x-wav', 'audio/*'];
var VIDEO_MIME_TYPES = ['video/mp4', 'video/webm', 'video/ogg', 'video/x-flv', 'application/x-mpegURL', 'video/MP2T', 'video/3gpp', 'video/quicktime', 'video/x-msvideo', 'video/x-ms-wmv', 'video/*'];

function getMimeTypes(type) {
    switch (type) {
        case 'image':
            return IMAGE_MIME_TYPES;
        case 'audio':
            return AUDIO_MIME_TYPES;
        case 'video':
            return VIDEO_MIME_TYPES;
        default:
            return ['*/*'];
    }
}

function isOfType(types) {
    return function (file) {
        var type = (file.type || '').toLowerCase();

        return types.indexOf(type) !== -1;
    };
}

function isDoc() {
    return true;
}

function getCompareFunction(type) {
    if (type === 'image' || type === 'audio' || type === 'video') {
        return isOfType(getMimeTypes(type));
    }

    return isDoc;
}

var ROOT_URL = 'https://tsimg.space';
var TSIMG_URL = ROOT_URL + '/v1/images';

function uploadCloudImages(files) {
    if (!files || !files[0]) {
        return Promise.resolve(null);
    }

    return chayns.uploadToCloud(TSIMG_URL, files[0]).then(function (retval) {
        if (retval.response.statusCode === 200) {
            try {
                return JSON.parse(retval.response.data);
            } catch (err) {
                return null;
            }
        }
        return null;
    });
}

function normalizeUploadResponse(data) {
    if (!data || !data.imageLocations || data.imageLocations.length === 0) {
        return null;
    }

    return data.imageLocations.map(function (imageLocation) {
        return {
            location: imageLocation,
            url: '' + ROOT_URL + imageLocation
        };
    });
}

var _createClass$H = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$w, _temp$r;

function _defineProperty$f(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$H(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$E(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$E(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FileUpload = (_temp$r = _class$w = function (_Component) {
    _inherits$E(FileUpload, _Component);

    function FileUpload() {
        _classCallCheck$H(this, FileUpload);

        var _this = _possibleConstructorReturn$E(this, (FileUpload.__proto__ || Object.getPrototypeOf(FileUpload)).call(this));

        _this.state = {
            hover: false
        };

        _this.onDrop = _this.onDrop.bind(_this);
        _this.onDragOver = _this.onDragOver.bind(_this);
        _this.onDragLeave = _this.onDragLeave.bind(_this);
        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }

    _createClass$H(FileUpload, [{
        key: 'onClick',
        value: function onClick(event) {
            var _this2 = this;

            var _props = this.props,
                type = _props.type,
                multiple = _props.multiple,
                upload = _props.upload,
                onUpload = _props.onUpload,
                onClick = _props.onClick;


            if (onClick) {
                return onClick(event);
            }

            if (onClick === false) {
                return false;
            }

            if (upload && onUpload && type === FileUpload.TYPE_IMAGE) {
                return chayns.uploadCloudImage().then(function (data) {
                    if (!data.response || data.response.statusCode !== 200 || !data.response.data) {
                        return null;
                    }

                    try {
                        var responseData = JSON.parse(data.response.data);
                        return normalizeUploadResponse(responseData);
                    } catch (ex) {
                        return null;
                    }
                }).then(function (uploadData) {
                    onUpload(uploadData);
                });
            }

            return selectFile({
                type: getMimeTypes(type),
                multiple: multiple
            }).then(function (files) {
                var fileList = !multiple ? [files] : files;
                _this2.checkFiles(fileList);
            });
        }
    }, {
        key: 'onDrop',
        value: function onDrop(event) {
            var _props2 = this.props,
                onChange = _props2.onChange,
                upload = _props2.upload,
                onUpload = _props2.onUpload,
                type = _props2.type,
                onDrop = _props2.onDrop;


            if (onDrop) {
                return onDrop(event);
            }

            if (onDrop === false) {
                return false;
            }

            event.stopPropagation();
            event.preventDefault();

            this.setState({
                hover: false
            });

            var files = event.dataTransfer.files;


            if (upload && onUpload && type === FileUpload.TYPE_IMAGE) {
                return uploadCloudImages(files).then(function (data) {
                    var uploadData = normalizeUploadResponse(data);
                    onUpload(uploadData);
                });
            }

            if (onChange) {
                return this.checkFiles(files);
            }

            return null;
        }
    }, {
        key: 'onDragOver',
        value: function onDragOver(event) {
            event.stopPropagation();
            event.preventDefault();

            this.setState({
                hover: true
            });

            // eslint-disable-next-line no-param-reassign
            event.dataTransfer.dropEffect = 'copy';
        }
    }, {
        key: 'onDragLeave',
        value: function onDragLeave() {
            this.setState({
                hover: false
            });
        }
    }, {
        key: 'checkFiles',
        value: function checkFiles(files) {
            var _props3 = this.props,
                type = _props3.type,
                multiple = _props3.multiple,
                onChange = _props3.onChange;
            var length = files.length;


            var compareFunction = getCompareFunction(type);

            var invalidFiles = [];
            var validFiles = [];

            for (var i = 0; i < length; i += 1) {
                if (!multiple && i > 0) {
                    invalidFiles.push(files[i]);
                } else if (!compareFunction(files[i])) {
                    invalidFiles.push(files[i]);
                } else {
                    validFiles.push(files[i]);
                }
            }

            if (onChange) {
                onChange(files, validFiles, invalidFiles);
            }
        }
    }, {
        key: 'renderPlaceholder',
        value: function renderPlaceholder() {
            var _props4 = this.props,
                type = _props4.type,
                className = _props4.className,
                uploadText = _props4.uploadText;
            var hover = this.state.hover;


            var classNames = classnames('cc__file-upload--placeholder', _defineProperty$f({
                'chayns__color--70': chayns.env.site.colorMode !== 1,
                'cc__file-upload--image': type === 'image',
                'cc__file-upload--audio': type === 'audio',
                'cc__file-upload--video': type === 'video',
                'cc__file-upload--documents': !type || type === 'all',
                'cc__file-upload--hover': hover
            }, className, className));

            return React.createElement(
                'div',
                {
                    className: classNames
                },
                React.createElement('i', {
                    className: 'cc__file-upload__icon',
                    'aria-hidden': 'true'
                }),
                React.createElement(
                    'div',
                    {
                        className: 'cc__file-upload__message'
                    },
                    uploadText || FileUpload.getText(type)
                )
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _props5 = this.props,
                children = _props5.children,
                disableListeners = _props5.disableListeners;


            var wrapperClassNames = classnames('cc__file-upload', {
                'cc__file-upload--custom': children
            });

            return React.createElement(
                'div',
                {
                    className: wrapperClassNames,
                    onClick: !disableListeners ? this.onClick : null,
                    onDrop: !disableListeners ? this.onDrop : null,
                    onDragOver: !disableListeners ? this.onDragOver : null,
                    onDragLeave: !disableListeners ? this.onDragLeave : null
                },
                children || this.renderPlaceholder()
            );
        }
    }], [{
        key: 'getText',
        value: function getText(type) {
            switch (type) {
                case 'image':
                    return 'Bild hochladen';
                case 'video':
                    return 'Video hochladen';
                case 'audio':
                    return 'Song hochladen';
                default:
                    return 'Datei hochladen';
            }
        }
    }]);

    return FileUpload;
}(Component), _class$w.TYPE_IMAGE = 'image', _class$w.TYPE_VIDEO = 'video', _class$w.TYPE_AUDIO = 'audio', _class$w.TYPE_ALL = 'all', _class$w.defaultProps = {
    type: 'all',
    multiple: true,
    onChange: null,
    className: '',
    upload: false,
    children: null,
    uploadText: null,
    onUpload: null,
    disableListeners: false,
    onClick: null,
    onDrop: null
}, _temp$r);

function extractDomain(url) {
    var domain = void 0;
    // find & remove protocol (http, ftp, etc.) and get domain
    if (url.indexOf('://') > -1) {
        // eslint-disable-next-line prefer-destructuring
        domain = url.split('/')[2];
    } else {
        // eslint-disable-next-line prefer-destructuring
        domain = url.split('/')[0];
    }

    // find & remove port number
    // eslint-disable-next-line prefer-destructuring
    domain = domain.split(':')[0];

    return domain;
}

/**
 * This is an example that simulates an API call. Make sure to remove this function and call your own APIs instead.
 * @returns {Promise}
 */
function fetchDataFromApi(url) {
    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
    var body = arguments[2];
    var statusCodes = arguments[3];

    /* Allow urls for sending Authorization Informations */
    var allowedUrls = ['tobit.com', 'chayns.net', 'tappqa.tobit.com', 'tapp01.tobit.com'];

    var allowedStatusCodes = statusCodes;

    /* Allow custom status codes (always allowed: 200) */
    if (allowedStatusCodes === undefined || !Array.isArray(allowedStatusCodes)) {
        allowedStatusCodes = [];
    }

    var request = void 0;

    if (method === undefined || method === null || method === 'GET') {
        request = {
            headers: {
                Accept: 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                Pragma: 'no-cache',
                Expires: '0'
            },
            method: 'GET'
        };
    } else {
        request = {
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
            },
            method: method
        };

        if (body) {
            request.body = JSON.stringify(body);
        }
    }

    if (window.chayns.env.user.isAuthenticated && allowedUrls.indexOf(extractDomain(url)) !== -1) {
        request.headers.authorization = 'bearer ' + window.chayns.env.user.tobitAccessToken;
    }

    return window.fetch(url, request).then(function (response) {
        if (response.status === 200 || allowedStatusCodes.indexOf(response.status) !== -1) {
            return response.text().then(function (data) {
                // catch empty response
                if (data !== undefined && data !== null && data !== '') {
                    return JSON.parse(data);
                }

                return data;
            });
        }

        var BadStatusError = function BadStatusError(message) {
            return {
                name: 'BadStatusError',
                message: message || 'Unknown Status',
                stack: new Error().stack
            };
        };

        throw BadStatusError('Bad Status Code: ' + response.status); // send own error
    });
}

var _createClass$I = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$x, _temp2$5;

function _classCallCheck$I(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$F(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$F(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RefuelCounter = (_temp2$5 = _class$x = function (_Component) {
    _inherits$F(RefuelCounter, _Component);

    function RefuelCounter() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck$I(this, RefuelCounter);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$F(this, (_ref = RefuelCounter.__proto__ || Object.getPrototypeOf(RefuelCounter)).call.apply(_ref, [this].concat(args))), _this), _this._onClick = function () {
            var onClick = _this.props.onClick;


            if (onClick) {
                onClick();
            }
        }, _temp), _possibleConstructorReturn$F(_this, _ret);
    }

    _createClass$I(RefuelCounter, [{
        key: '_getUpper',
        value: function _getUpper() {
            var value = this.props.value;


            return React.createElement(
                'span',
                { className: 'refuel-counter refuel-counter__upper noselect' },
                (parseFloat(value) % 1).toFixed(3).substring(4)
            );
        }
    }, {
        key: '_getLower',
        value: function _getLower() {
            var value = this.props.value;


            return React.createElement(
                'span',
                { className: 'refuel-counter refuel-counter__lower noselect' },
                Math.floor(parseFloat(value)) + ',' + (parseFloat(value) % 1).toFixed(2).substring(2)
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var name = this.props.name;


            return React.createElement(
                'div',
                {
                    className: 'refuel-info',
                    onClick: this._onClick
                },
                React.createElement(
                    'div',
                    { className: 'refuel-info__name' },
                    name
                ),
                React.createElement(
                    'div',
                    { className: 'refuel-counter__container chayns__background-color--100' },
                    React.createElement(
                        'div',
                        { style: { verticalAlign: 'center' } },
                        this._getLower(),
                        this._getUpper()
                    )
                )
            );
        }
    }]);

    return RefuelCounter;
}(Component), _class$x.defaultProps = {
    onClick: null,
    value: null,
    name: null
}, _temp2$5);

var _createClass$J = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$y, _temp$s;

function _classCallCheck$J(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$G(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$G(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Refuel = (_temp$s = _class$y = function (_Component) {
    _inherits$G(Refuel, _Component);

    function Refuel() {
        _classCallCheck$J(this, Refuel);

        var _this = _possibleConstructorReturn$G(this, (Refuel.__proto__ || Object.getPrototypeOf(Refuel)).call(this));

        _this._openRefuel = function () {
            var _this$props = _this.props,
                qa = _this$props.qa,
                city = _this$props.city,
                latitude = _this$props.latitude,
                longitude = _this$props.longitude;


            var url = 'https://tapp01.tobit.com/Tapps/FuelPrice/Web/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&font=##fontid##&city=' + (city || '') + '&TappID=3'; // ${window.chayns.env.site.tapp.id}
            if (qa) {
                url = 'https://tappqa.tobit.com/Tapps/FuelStationTapp/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&font=##fontid##&city=' + (city || '') + '&TappID=3';
            }

            if (latitude && longitude) {
                url += '&lat=' + encodeURI('' + latitude) + '&lng=' + encodeURI('' + longitude);
            }

            var title = 'Tanken';
            if (city) {
                title += ' in ' + city;
            }

            window.chayns.openUrl({
                url: url,
                exclusiveView: false,
                title: title
            });
            // window.chayns.openUrl({
            //     url:`https://tappqa.tobit.com/Tapps/FuelStationTapp/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&TappID=-7&lat=52.066879362577&lng=7.0164507166667`,
            //     exclusiveView:false
            // });
        };

        _this.state = {
            isFetching: false
        };
        return _this;
    }

    _createClass$J(Refuel, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this._fetch();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            var _props = this.props,
                latitude = _props.latitude,
                longitude = _props.longitude,
                onError = _props.onError;


            if (prevProps.latitude !== latitude || prevProps.longitude !== longitude) {
                if (latitude <= 90 && longitude <= 180) {
                    this._fetch(this);
                } else if (onError) {
                    onError();
                }
            }
        }
    }, {
        key: '_fetch',
        value: function _fetch() {
            var _this2 = this;

            var _props2 = this.props,
                server = _props2.server,
                locationId = _props2.locationId,
                tappId = _props2.tappId,
                qa = _props2.qa,
                latitude = _props2.latitude,
                longitude = _props2.longitude,
                onLoaded = _props2.onLoaded,
                onError = _props2.onError,
                waitForLatLng = _props2.waitForLatLng;


            this.setState({
                isFetching: true
            });

            var url = (server || 'https://tapp01.tobit.com/Tapps/FuelPrice/API/api/Fuel') + '/?locationId=' + (locationId || window.chayns.env.site.locationId) + '&tappId=' + (tappId || window.chayns.env.site.tapp && window.chayns.env.site.tapp.id || 1);
            if (qa) {
                url = 'https://tappqa.tobit.com/Tapps/RefuelApi/api/Fuel/?locationId=' + (locationId || window.chayns.env.site.locationId) + '&tappId=' + (tappId || window.chayns.env.site.tapp && window.chayns.env.site.tapp.id || 1);
            }

            if (latitude && longitude) {
                url += '&lat=' + encodeURI('' + latitude) + '&lng=' + encodeURI('' + longitude);
            }

            if (!waitForLatLng || latitude && longitude) {
                fetchDataFromApi(url).then(function (data) {
                    _this2._refuel = data;

                    if (onLoaded) {
                        onLoaded(data);
                    }
                }).catch(function (error) {
                    console.warn('Error while fetching Fuel-Data', error);

                    if (onError) {
                        onError(error);
                    }
                }).then(function () {
                    _this2.setState({
                        isFetching: false
                    });
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            if (this._refuel) {
                return React.createElement(
                    'div',
                    { className: 'refuel' },
                    this._refuel.map(function (element) {
                        var name = element.fuelId;
                        if (name === 2) {
                            name = 'Super';
                        } else if (name === 1) {
                            name = 'Diesel';
                        } else if (name === 3) {
                            name = 'Super E10';
                        }

                        return React.createElement(RefuelCounter, {
                            name: name,
                            value: element.data[0].cost,
                            key: element.fuelId,
                            onClick: _this3._openRefuel
                        });
                    })
                );
            }

            var isFetching = this.state.isFetching;
            var isFetchingText = this.props.isFetching;


            if (isFetching) {
                return React.createElement(
                    'div',
                    null,
                    isFetchingText || 'Tankdaten werden vom Server geladen.'
                );
            }

            var noContent = this.props.noContent;


            return React.createElement(
                'div',
                null,
                noContent || 'Es konnten keine Tankdaten zu ihrem Standort gefunden werden.'
            );
        }
    }]);

    return Refuel;
}(Component), _class$y.defaultProps = {
    locationId: null,
    tappId: null,
    noContent: null,
    isFetching: null,
    onLoaded: null,
    onError: null,
    latitude: null,
    longitude: null,
    server: null,
    waitForLatLng: null,
    city: null,
    qa: null
}, _temp$s);

function parseAstronomyTime(string, parent) {
    var hour = parseInt(string.slice(0, 2), 10);
    var minutes = parseInt(string.slice(3, 5), 10);
    var type = string.slice(6, 8).toLowerCase();

    if (type === 'pm' && hour <= 12) {
        hour += 12;
    }

    var retval = parent.getDate();
    retval.setHours(hour);
    retval.setMinutes(minutes);

    return retval;
}

var _createClass$K = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$K(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Astronomy = function () {
    function Astronomy(jsonObject, parent) {
        _classCallCheck$K(this, Astronomy);

        if (jsonObject[0]) {
            // eslint-disable-next-line prefer-destructuring
            this._info = jsonObject[0];
        }

        if (parent) {
            this._parent = parent;
        }
    }

    _createClass$K(Astronomy, [{
        key: 'getMoonrise',
        value: function getMoonrise() {
            if (this._info) {
                return parseAstronomyTime(this._info.moonrise, this._parent) || null;
            }

            return null;
        }
    }, {
        key: 'getMoonset',
        value: function getMoonset() {
            if (this._info) {
                return parseAstronomyTime(this._info.moonset, this._parent) || null;
            }

            return null;
        }
    }, {
        key: 'getSunrise',
        value: function getSunrise() {
            if (this._info) {
                return parseAstronomyTime(this._info.sunrise, this._parent) || null;
            }

            return null;
        }
    }, {
        key: 'getSunset',
        value: function getSunset() {
            if (this._info) {
                return parseAstronomyTime(this._info.sunset, this._parent) || null;
            }

            return null;
        }
    }]);

    return Astronomy;
}();

function getWeatherIcon(weatherCode, isNight) {
    var icon = '';

    switch (weatherCode) {
        case 395:
        case 392:
            icon = 'wi-##daytime##-snow-thunderstorm';
            break;
        case 389:
            icon = 'wi-##daytime##-thunderstorm';
            break;
        case 386:
            icon = 'wi-##daytime##-storm-showers';
            break;
        case 377:
        case 374:
            icon = 'wi-##daytime##-sleet';
            break;
        case 371:
        case 362:
            icon = 'wi-##daytime##-snow';
            break;
        case 359:
        case 356:
            icon = 'wi-##daytime##-rain';
            break;
        case 353:
            icon = 'wi-##daytime##-sprinkle';
            break;
        case 350:
            icon = 'wi-##daytime##-hail';
            break;
        case 338:
        case 335:
        case 332:
        case 329:
        case 326:
        case 323:
            icon = 'wi-##daytime##-snow';
            break;
        case 320:
        case 317:
        case 314:
        case 311:
        case 284:
        case 281:
            icon = 'wi-##daytime##-sleet';
            break;
        case 308:
        case 305:
        case 302:
        case 299:
        case 296:
        case 293:
            icon = 'wi-##daytime##-rain';
            break;
        case 266:
        case 263:
            icon = 'wi-##daytime##-thunderstorm';
            break;
        case 260:
        case 248:
            icon = 'wi-##daytime##-fog';
            break;
        case 230:
            icon = 'wi-##daytime##-snow-thunderstorm';
            break;
        case 227:
            icon = 'wi-##daytime##-snow-wind';
            break;
        case 200:
            icon = 'wi-##daytime##-storm-showers';
            break;
        case 185:
        case 182:
        case 179:
            icon = 'wi-##daytime##-sleet';
            break;
        case 176:
            icon = 'wi-##daytime##-rain';
            break;
        case 143:
            icon = 'wi-##daytime##-fog';
            break;
        case 122:
        case 119:
            icon = 'wi-##daytime##-cloudy-windy';
            break;
        case 116:
            icon = 'wi-##daytime##-cloudy';
            break;
        case 113:
            icon = 'wi-##daytime##-sunny';
            break;
        default:
            break;
    }

    if (!isNight) {
        return 'wi ' + icon.replace(/##daytime##/g, 'day');
    }

    return 'wi ' + icon.replace(/##daytime##/g, 'night');
}

function parseHmmTime(string) {
    var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();

    if (string.length < 3) {
        date.setHours(0);date.setMinutes(0);return date;
    }

    var hour = parseInt(string.slice(0, string.length - 2), 10);
    var minutes = parseInt(string.slice(string.length - 2, string.length), 10);

    date.setHours(hour);
    date.setMinutes(minutes);

    return date;
}

var _createClass$L = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$L(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WeatherInfo = function () {
    function WeatherInfo(jsonObject) {
        _classCallCheck$L(this, WeatherInfo);

        this._info = jsonObject;
    }

    _createClass$L(WeatherInfo, [{
        key: 'getRaw',
        value: function getRaw() {
            return this._info;
        }
    }, {
        key: 'getCloudcover',
        value: function getCloudcover() {
            return this._info.cloudcover || null;
        }
    }, {
        key: 'getHumidity',
        value: function getHumidity() {
            return parseInt(this._info.humiditiy, 10) || null;
        }
    }, {
        key: 'getPressure',
        value: function getPressure() {
            return parseInt(this._info.pressure, 10) || null;
        }
    }, {
        key: 'getTemp',
        value: function getTemp(fahrenheit) {
            if (!fahrenheit) {
                return parseInt(this._info.temp_C, 10) || parseInt(this._info.tempC, 10) || null;
            }

            return parseInt(this._info.temp_F, 10) || parseInt(this._info.tempC, 10) || null;
        }
    }, {
        key: 'getWeatherIcon',
        value: function getWeatherIcon$$1(isNight) {
            return getWeatherIcon(this.getWeatherCode(), isNight);
        }
    }, {
        key: 'getWeatherCode',
        value: function getWeatherCode() {
            return parseInt(this._info.weatherCode, 10) || null;
        }
    }, {
        key: 'getWeatherText',
        value: function getWeatherText() {
            return parseInt(this._info.weatherCode, 10) || null;
        }
    }, {
        key: 'getWinddir',
        value: function getWinddir(point) {
            if (!point) {
                return parseInt(this._info.winddirDegree, 10) || null;
            }

            return this._info.winddir16Point || null;
        }
    }, {
        key: 'getWindspeed',
        value: function getWindspeed(miles) {
            if (!miles) {
                return parseInt(this._info.windspeedKmph, 10) || null;
            }

            return parseInt(this._info.windspeedMiles, 10) || null;
        }
    }, {
        key: 'getVisibility',
        value: function getVisibility() {
            return parseInt(this._info.visibility, 10) || null;
        }
    }, {
        key: 'getTime',
        value: function getTime() {
            if (!this._info.time) return null;

            return parseHmmTime(this._info.time, new Date());
        }
    }, {
        key: 'getPrecipitation',
        value: function getPrecipitation(inches) {
            if (!inches) {
                return parseFloat(this._info.precipMM) || 0;
            }

            return parseFloat(this._info.precipInches) || 0;
        }
    }]);

    return WeatherInfo;
}();

var _createClass$M = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$M(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WeatherForecast = function () {
    function WeatherForecast(jsonObject) {
        _classCallCheck$M(this, WeatherForecast);

        this._forecast = jsonObject;
    }

    _createClass$M(WeatherForecast, [{
        key: 'getMinTemp',
        value: function getMinTemp(fahrenheit) {
            if (!fahrenheit) {
                return parseInt(this._forecast.mintempC, 10) || 0;
            }

            return parseInt(this._forecast.mintempF, 10) || 0;
        }
    }, {
        key: 'getMaxTemp',
        value: function getMaxTemp(fahrenheit) {
            if (!fahrenheit) {
                return parseInt(this._forecast.maxtempC, 10) || 0;
            }

            return parseInt(this._forecast.maxtempF, 10) || 0;
        }
    }, {
        key: 'getAvgTemp',
        value: function getAvgTemp(fahrenheit) {
            var minTemp = this.getMinTemp(fahrenheit);
            var maxTemp = this.getMaxTemp(fahrenheit);

            if (minTemp !== null && maxTemp !== null) {
                return (minTemp + maxTemp) / 2;
            }

            return null;
        }
    }, {
        key: 'getAvgHoursTemp',
        value: function getAvgHoursTemp(fahrenheit) {
            var avgTemp = 0;
            var i = 0;

            this.getHours().map(function (element) {
                var temp = element.getTemp(fahrenheit);

                if (temp !== null) {
                    avgTemp += temp;
                    i += 1;
                }
            });

            if (avgTemp !== null && i) {
                return avgTemp / i;
            }

            return null;
        }
    }, {
        key: 'getUvIndex',
        value: function getUvIndex() {
            return parseInt(this._forecast.uvIndex, 10) || null;
        }
    }, {
        key: 'getAstronomy',
        value: function getAstronomy() {
            if (this._forecast.astronomy) {
                return new Astronomy(this._forecast.astronomy, this);
            }

            return null;
        }
    }, {
        key: 'getDate',
        value: function getDate() {
            if (this._forecast.date) {
                return new Date(this._forecast.date);
            }

            return null;
        }
    }, {
        key: 'getHour',
        value: function getHour(hour) {
            var hours = this.getHours();

            if (!hours) return null;

            return hours[hour];
        }
    }, {
        key: 'getHourByIndex',
        value: function getHourByIndex(index) {
            return new WeatherInfo(this._forecast.hourly[index]);
        }
    }, {
        key: 'getHours',
        value: function getHours() {
            if (this._forecast.hourly) {
                return this._forecast.hourly.map(function (element) {
                    return new WeatherInfo(element);
                });
            }

            return null;
        }
    }, {
        key: 'getPrecipitation',
        value: function getPrecipitation(inches) {
            var hours = this.getHours();
            var all = 0.0;
            var i = 0;

            hours.map(function (element) {
                var precip = element.getPrecipitation(inches);
                if (precip) {
                    i += 1;
                    all += precip;
                }
            });

            i = 0;
            if (i === 0) {
                return all;
            }

            return all / i;
        }
    }]);

    return WeatherForecast;
}();

Number.isFinite = Number.isFinite || function (value) {
    // eslint-disable-next-line no-restricted-globals
    return typeof value === 'number' && isFinite(value);
};

function isInteger(value) {
    return typeof value === 'number' && Number.isFinite(value) && Math.floor(value) === value;
}

var _createClass$N = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$N(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WorldWeatherOnline = function () {
    function WorldWeatherOnline(jsonString) {
        _classCallCheck$N(this, WorldWeatherOnline);

        if (jsonString) {
            this._error = this.parseJson(jsonString);
        } else {
            this._error = true;
        }
    }

    _createClass$N(WorldWeatherOnline, [{
        key: 'parseJson',
        value: function parseJson(json) {
            try {
                var weather = json;

                if (typeof json === 'string' || json instanceof String) {
                    weather = JSON.parse(json);
                }

                if (!weather.data) {
                    return true;
                }

                if (weather.data.current_condition) {
                    this._currentCondition = new WeatherInfo(weather.data.current_condition[0], this);
                }

                if (weather.data.weather) {
                    this._forecast = weather.data.weather;
                }

                return false;
            } catch (ex) {
                console.warn('Error while parsing Weather', ex, json);
            }

            return true;
        }
    }, {
        key: 'getCurrentCondition',
        value: function getCurrentCondition() {
            return this._currentCondition;
        }
    }, {
        key: 'getForecast',
        value: function getForecast(date) {
            if (isInteger(date) && this._forecast[date]) {
                return new WeatherForecast(this._forecast[date], this);
            }

            return null;
        }
    }, {
        key: 'getForecasts',
        value: function getForecasts() {
            var _this = this;

            return this._forecast.map(function (element) {
                return new WeatherForecast(element, _this);
            });
        }
    }, {
        key: 'setTexts',
        value: function setTexts(object) {
            this._textStrings = object;
        }
    }, {
        key: 'getWeatherString',
        value: function getWeatherString(weatherCode) {
            if (this._textStrings[weatherCode]) {
                return this._textStrings[weatherCode];
            }

            return null;
        }
    }]);

    return WorldWeatherOnline;
}();

var _createClass$O = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class$z, _temp$t;

function _classCallCheck$O(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$H(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$H(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Weather = (_temp$t = _class$z = function (_Component) {
    _inherits$H(Weather, _Component);

    function Weather() {
        _classCallCheck$O(this, Weather);

        var _this = _possibleConstructorReturn$H(this, (Weather.__proto__ || Object.getPrototypeOf(Weather)).call(this));

        _this._openWeather = function () {
            var _this$props = _this.props,
                city = _this$props.city,
                qa = _this$props.qa,
                server = _this$props.server;


            var url = 'https://tapp01.tobit.com/Tapps/Weather/Web/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&font=##fontid##&city=' + (city || '') + '&TappID=3'; // ${window.chayns.env.site.tapp.id}
            if (qa) {
                url = (server || 'https://tappqa.tobit.com/Tapps/WeatherTapp') + '/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&font=##fontid##&city=' + (city || '') + '&TappID=3';
            }

            return url;
            //
            // if(this.props.latitude && this.props.longitude) {
            //     url += `&lat=${encodeURI(this.props.latitude+"")}&lng=${encodeURI(this.props.longitude+"")}`;
            // }
            //
            // let title = 'Wetter';
            // if(this.props.city) {
            //     title += ' in ' + this.props.city;
            // }
            //
            // window.chayns.openUrl({
            //     "url": url,
            //     "exclusiveView": false,
            //     "title": title
            // });
        };

        _this.state = {};
        return _this;
    }

    _createClass$O(Weather, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                latitude = _props.latitude,
                longitude = _props.longitude;


            if (latitude && longitude) {
                this._fetch();
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            var _props2 = this.props,
                latitude = _props2.latitude,
                longitude = _props2.longitude;


            if (latitude && longitude && prevProps.latitude !== latitude && prevProps.longitude !== longitude) {
                this._fetch();
            }
        }
    }, {
        key: '_fetch',
        value: function _fetch() {
            var _this2 = this;

            var _props3 = this.props,
                lng = _props3.longitude,
                lat = _props3.latitude,
                server = _props3.server,
                locationId = _props3.locationId,
                qa = _props3.qa,
                onLoaded = _props3.onLoaded,
                onError = _props3.onError;


            this.setState({
                // eslint-disable-next-line react/no-unused-state
                isFetching: true
            });

            var url = (server || 'https://tapp01.tobit.com/Tapps/Weather/API/Weather') + '/' + (locationId || window.chayns.env.site.locationId) + '/?current=true&forecast=true';
            if (qa) {
                url = (server || 'https://tappqa.tobit.com/Tapps/WeatherProxy/Weather') + '/' + (locationId || window.chayns.env.site.locationId) + '/?current=true&forecast=true';
            }

            if (lat && lng) {
                url += '&lat=' + encodeURI('' + lat) + '&lng=' + encodeURI('' + lng);
            }

            fetchDataFromApi(url).then(function (data) {
                _this2.setState({
                    weather: new WorldWeatherOnline(data)
                });

                if (onLoaded) {
                    onLoaded(data);
                }
            }).catch(function (error) {
                console.warn('Error while fetching Weather-Data', error);

                if (onError) {
                    onError(error);
                }
            }).then(function () {
                _this2.setState({
                    // eslint-disable-next-line react/no-unused-state
                    isFetching: false
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var temp = 'no content';
            var icon = '';
            var minTemp = '';
            var maxTemp = '';

            var weather = this.state.weather;


            if (weather) {
                temp = weather.getCurrentCondition().getTemp();
                icon = weather.getCurrentCondition().getWeatherIcon();
                minTemp = weather.getForecast(1).getMinTemp();
                maxTemp = weather.getForecast(1).getMaxTemp();
            }

            if (weather && temp !== null && icon && minTemp !== null && maxTemp !== null) {
                return React.createElement(
                    'div',
                    {
                        className: 'weather-widget',
                        onClick: this._openWeather
                    },
                    React.createElement('div', { className: 'weather-widget__empty' }),
                    React.createElement(
                        'div',
                        { className: 'weather-widget__icon' },
                        React.createElement('i', { className: icon + ' chayns__color--100' })
                    ),
                    React.createElement(
                        'div',
                        { className: 'weather-widget__temp' },
                        temp || 'non content'
                    ),
                    React.createElement(
                        'div',
                        { className: 'weather-widget__celsius' },
                        '°C'
                    ),
                    React.createElement(
                        'div',
                        { className: 'weather-widget__info' },
                        React.createElement(
                            'div',
                            { className: 'weather-widget__info__max' },
                            React.createElement('i', { className: 'fa fa-caret-up' }),
                            ' ' + maxTemp + ' \xB0'
                        ),
                        React.createElement(
                            'div',
                            { className: 'weather-widget__info__min' },
                            React.createElement('i', { className: 'fa fa-caret-down' }),
                            ' ' + minTemp + ' \xB0'
                        )
                    )
                );
            }

            return null;
        }
    }]);

    return Weather;
}(Component), _class$z.defaultProps = {
    longitude: null,
    latitude: null,
    onLoaded: null,
    onError: null,
    server: null,
    city: null,
    qa: null,
    locationId: null
}, _temp$t);

var resolveAbsoluteImport = function resolveAbsoluteImport(importName) {
    var values = {
        Accordion: 'react-chayns-accordion/component/Accordion.js',
        AccordionIntro: 'react-chayns-accordion/component/AccordionIntro.js',
        AmountControl: 'react-chayns-amountcontrol/component/AmountControl.js',
        InspectElementAnimation: 'react-chayns-animations/component/InspectElement/InspectElement.js',
        animate: 'react-chayns-animations/component/animate.js',
        AnimationTypes: 'react-chayns-animations/component/index.js',
        connectToOverlay: 'react-chayns-animations/decorator/connectToOverlay.js',
        OverlayHelper: 'react-chayns-animations/utils/OverlayHelper.js',
        Button: 'react-chayns-button/component/Button.js',
        ChooseButton: 'react-chayns-button/component/ChooseButton.js',
        Calendar: 'react-chayns-calendar/component/Calendar.js',
        Checkbox: 'react-chayns-checkbox/component/Checkbox.js',
        ContextMenu: 'react-chayns-contextmenu/component/ContextMenu.js',
        DetailView: 'react-chayns-detail_view/component/DetailView.js',
        DetailViewItem: 'react-chayns-detail_view/component/DetailViewItem.js',
        DetailViewHeader: 'react-chayns-detail_view/component/DetailViewHeader.js',
        DetailViewFooter: 'react-chayns-detail_view/component/DetailViewFooter.js',
        DetailViewGroup: 'react-chayns-detail_view/component/DetailViewGroup.js',
        EmojiInput: 'react-chayns-emoji_input/component/EmojiInput.js',
        Gallery: 'react-chayns-gallery/component/Gallery.js',
        GridCalendar: 'react-chayns-gridcalendar/component/GridCalendar.js',
        Input: 'react-chayns-input/component/Input.js',
        ModeSwitch: 'react-chayns-modeswitch/component/ModeSwitch.js',
        Mode: 'react-chayns-modeswitch/component/Mode.js',
        ModeSwitchHelper: 'react-chayns-modeswitch/component/ModeSwitchHelper.js',
        connectToModeSwitch: 'react-chayns-modeswitch/component/connectToModeSwitch.js',
        OrientationHelper: 'utils/OrientationHelper.js',
        PersonFinder: 'react-chayns-personfinder/component/PersonFinder.js',
        Portal: 'react-chayns-portal/component/Portal.js',
        RadioButton: 'react-chayns-radiobutton/component/RadioButton.js',
        RfidInput: 'react-chayns-rfid_input/component/RfidInput.js',
        ScrollView: 'react-chayns-scrollview/component/ScrollView.js',
        SelectButton: 'react-chayns-selectbutton/component/SelectButton.js',
        SelectList: 'react-chayns-selectlist/component/SelectList.js',
        SelectListItem: 'react-chayns-selectlist/component/SelectItem.js',
        SetupWizard: 'react-chayns-setupwizard/component/SetupWizard.js',
        SetupWizardItem: 'react-chayns-setupwizard/component/SetupItem.js',
        SharingBar: 'react-chayns-sharingbar/component/SharingBar.js',
        SmallWaitCursor: 'react-chayns-smallwaitcursor/component/SmallWaitCursor.js',
        Swiper: 'react-chayns-swiper/component/Slider.js',
        SwipeOverlay: 'react-chayns-swiper/component/SlideOverlay.js',
        Swipe: 'react-chayns-swiper/component/Slide.js',
        TextArea: 'react-chayns-textarea/component/TextArea.js',
        TextString: 'react-chayns-textstring/component/TextString.js',
        Tooltip: 'react-chayns-tooltip/component/Tooltip.js',
        FileUpload: 'react-chayns-upload/component/FileUpload.js',
        RefuelWidget: 'react-refuel/component/Refuel.js',
        WeatherWidget: 'react-weather/component/Weather.js',
        WorldWeatherOnline: 'react-weather/component/utils/WorldWeatherOnline.js'
    };

    if (!values[importName]) {
        throw new Error('Unable to resolve ' + importName + ' from chayns-components. Please check the spelling. If it\'s not wrong please create an issue (https://github.com/TobitSoftware/chayns-components/issues).');
    }

    return 'chayns-components/lib/' + values[importName];
};

export { Accordion, AccordionIntro, AmountControl, InspectElement as InspectElementAnimation, animate, index as AnimationTypes, connectToOverlay, OverlayHelper, Button, ChooseButton, Calendar, Checkbox, ContextMenu, DetailView, DetailViewGroup, DetailViewItem, DetailViewHeader, DetailViewFooter, EmojiInput, Gallery, ProgressCalendar as GridCalendar, Input, ModeSwitch, Mode, ModeSwitchHelper, connectToModeSwitch, OrientationHelper$1 as OrientationHelper, PersonFinder, Portal, RadioButton, RfidInput, ScrollView, SelectButton, SelectList, SelectItem as SelectListItem, SetupWizard, SetupItem as SetupWizardItem, SharingBar, SmallWaitCursor, App as Swiper, SlideOverlay as SwipeOverlay, Slide as Swipe, TextArea, TextString, Tooltip, FileUpload, Refuel as RefuelWidget, Weather as WeatherWidget, WorldWeatherOnline, resolveAbsoluteImport };
