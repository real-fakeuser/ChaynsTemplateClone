var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import SharingBarItem from './SharingBarItem';
import { getAvailableShareProviders, getDefaultShareLink } from './sharingHelper';

var SharingBar = (_temp = _class = function (_Component) {
    _inherits(SharingBar, _Component);

    function SharingBar() {
        _classCallCheck(this, SharingBar);

        var _this = _possibleConstructorReturn(this, (SharingBar.__proto__ || Object.getPrototypeOf(SharingBar)).call(this));

        _this.state = {
            sharingProvider: []
        };
        return _this;
    }

    _createClass(SharingBar, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _this2 = this;

            getAvailableShareProviders().then(function (provider) {
                var link = _this2.props.link;


                var sharingItems = [];

                provider.map(function (item) {
                    if (item.available) {
                        sharingItems.push(React.createElement(SharingBarItem, {
                            icon: item.icon,
                            name: item.name,
                            provider: item,
                            key: item.id,
                            link: link || getDefaultShareLink()
                        }));
                    }
                });

                _this2.setState({
                    sharingProvider: sharingItems // TODO: save data in state and not components
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var className = this.props.className;
            var sharingProvider = this.state.sharingProvider;


            var classNames = classnames(_defineProperty({
                'sharing-bar__item-list': 'sharing-bar__item-list'
            }, className, className));

            return React.createElement(
                'div',
                { className: classNames },
                sharingProvider
            );
        }
    }]);

    return SharingBar;
}(Component), _class.defaultProps = {
    link: null,
    className: null
}, _temp);
export { SharingBar as default };