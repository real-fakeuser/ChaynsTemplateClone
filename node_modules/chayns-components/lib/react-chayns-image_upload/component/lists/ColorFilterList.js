var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

import { utils } from 'pixel-flip';
import SimpleFilterButton from '../filter-buttons/SimpleFilterButton';
import { COLORS } from '../../constants/colors';
import ScrollContainer from '../ScrollContainer';
import LayerContainer from '../../utils/LayerContainer';
import Accordion from '../../../react-chayns-accordion/component/Accordion';

var ColorFilterList = function (_Component) {
    _inherits(ColorFilterList, _Component);

    function ColorFilterList() {
        _classCallCheck(this, ColorFilterList);

        var _this = _possibleConstructorReturn(this, (ColorFilterList.__proto__ || Object.getPrototypeOf(ColorFilterList)).call(this));

        if (chayns.env.site.color) {
            var _utils$convert$hexToR = utils.convert.hexToRgb(chayns.env.site.color),
                r = _utils$convert$hexToR.r,
                g = _utils$convert$hexToR.g,
                b = _utils$convert$hexToR.b;

            _this.siteColor = {
                id: 'site',
                hex: chayns.env.site.color,
                rgb: [r, g, b]
            };
            _this.setSiteColor = _this.setColor.bind(_this, _this.siteColor);
        }

        for (var i = 0, z = COLORS.length; i < z; i += 1) {
            var color = COLORS[i];
            _this['set' + color.id] = _this.setColor.bind(_this, color);
        }
        return _this;
    }

    _createClass(ColorFilterList, [{
        key: 'setColor',
        value: function setColor(color, buttonPosition) {
            var setLayer = this.props.setLayer;


            setLayer('color', color.rgb);
            var width = this.scrollContainer.getWidth();

            this.scrollContainer.scrollTo(buttonPosition - (width - 100) / 2);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                image = _props.image,
                layer = _props.layer;


            var lastLayer = layer.getLastLayerInfo();
            var layerName = lastLayer ? lastLayer.name : null;
            var layerConfig = lastLayer ? lastLayer.config : null;

            return React.createElement(
                Accordion,
                { head: 'Einf\xE4rben', dataGroup: 'effects' },
                React.createElement(
                    'div',
                    { className: 'accordion__content color-list' },
                    React.createElement(
                        ScrollContainer,
                        {
                            ref: function ref(_ref) {
                                _this2.scrollContainer = _ref;
                            }
                        },
                        COLORS.map(function (color) {
                            return React.createElement(SimpleFilterButton, {
                                filterName: 'color',
                                onClick: _this2['set' + color.id],
                                image: image,
                                title: color.name,
                                config: color.rgb,
                                key: color.id,
                                enabled: layerName === 'color' && layerConfig === color.rgb
                            });
                        }),
                        this.siteColor && React.createElement(SimpleFilterButton, {
                            filterName: 'color',
                            onClick: this.setSiteColor,
                            image: image,
                            title: 'Seitenfarbe',
                            config: this.siteColor.rgb,
                            key: 'site',
                            enabled: layerName === 'color' && layerConfig === this.siteColor.rgb
                        })
                    )
                )
            );
        }
    }]);

    return ColorFilterList;
}(Component);

export { ColorFilterList as default };