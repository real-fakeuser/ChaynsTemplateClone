var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

import SimpleFilterButton from '../filter-buttons/SimpleFilterButton';
import LayerContainer from '../../utils/LayerContainer';
import TextFilterButton from '../filter-buttons/TextFilterButton';
import ScrollContainer from '../ScrollContainer';
import Accordion from '../../../react-chayns-accordion/component/Accordion';

var EffectList = function (_Component) {
    _inherits(EffectList, _Component);

    function EffectList() {
        _classCallCheck(this, EffectList);

        var _this = _possibleConstructorReturn(this, (EffectList.__proto__ || Object.getPrototypeOf(EffectList)).call(this));

        _this.setGrayscale = _this.onClick.bind(_this, 'grayscale', null);
        _this.setBlur = _this.onClick.bind(_this, 'blur', null);
        _this.setInvert = _this.onClick.bind(_this, 'invert', null);
        _this.setSepia = _this.onClick.bind(_this, 'sepia', null);
        _this.setThreshold = _this.onClick.bind(_this, 'threshold', null);
        _this.toggleWatermark = _this.toggleFilter.bind(_this, 'watermark', null);
        _this.toggleText = _this.toggleFilter.bind(_this, 'text', null);
        return _this;
    }

    _createClass(EffectList, [{
        key: 'onClick',
        value: function onClick(filterName, filterConfig, buttonPosition) {
            var setLayer = this.props.setLayer;


            setLayer(filterName, filterConfig);
            var width = this.scrollContainer.getWidth();

            this.scrollContainer.scrollTo(buttonPosition - (width - 100) / 2);
        }
    }, {
        key: 'toggleFilter',
        value: function toggleFilter(filterName, filterConfig) {
            var _props = this.props,
                layer = _props.layer,
                addFilter = _props.addFilter,
                removeFilter = _props.removeFilter;

            var activeFilters = layer.getActiveLayer();
            var filterActive = !(activeFilters.indexOf(filterName) === -1);

            if (filterName === 'text') {
                if (filterActive) {
                    removeFilter(filterName);
                } else {
                    window.chayns.dialog.input({
                        title: 'Gebe bitte Deinen Text ein:',
                        text: '',
                        buttons: [{
                            text: chayns.dialog.buttonText.OK,
                            buttonType: chayns.dialog.buttonType.POSITIVE
                        }, {
                            text: chayns.dialog.buttonText.CANCEL,
                            buttonType: chayns.dialog.buttonType.NEGATIVE
                        }]
                    }).then(function (data) {
                        if (data.buttonType === 1) {
                            addFilter('text', [data.text, {
                                color: '#888888'
                            }]);
                        }
                    });
                }
                return;
            }

            if (filterActive) {
                removeFilter(filterName);
            } else {
                addFilter(filterName, filterConfig);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                image = _props2.image,
                layer = _props2.layer;

            var lastLayer = layer.getLastLayerInfo();
            var activeFilters = layer.getActiveLayer();
            var layerName = lastLayer ? lastLayer.name : null;

            return React.createElement(
                Accordion,
                { head: 'Effekte', dataGroup: 'effects', defaultOpened: true },
                React.createElement(
                    'div',
                    { className: 'accordion__content effect-list' },
                    React.createElement(
                        ScrollContainer,
                        {
                            ref: function ref(_ref) {
                                _this2.scrollContainer = _ref;
                            }
                        },
                        React.createElement(SimpleFilterButton, {
                            filterName: 'grayscale',
                            onClick: this.setGrayscale,
                            image: image,
                            key: 'grayscale',
                            enabled: layerName === 'grayscale',
                            title: 'Graustufe'
                        }),
                        React.createElement(SimpleFilterButton, {
                            filterName: 'blur',
                            onClick: this.setBlur,
                            image: image,
                            key: 'blur',
                            enabled: layerName === 'blur',
                            title: 'Verwischt'
                        }),
                        React.createElement(SimpleFilterButton, {
                            filterName: 'invert',
                            onClick: this.setInvert,
                            image: image,
                            key: 'invert',
                            enabled: layerName === 'invert',
                            title: 'Invertiert'
                        }),
                        React.createElement(SimpleFilterButton, {
                            filterName: 'sepia',
                            onClick: this.setSepia,
                            image: image,
                            key: 'sepia',
                            enabled: layerName === 'sepia',
                            title: 'Sepia'
                        }),
                        React.createElement(SimpleFilterButton, {
                            filterName: 'threshold',
                            onClick: this.setThreshold,
                            image: image,
                            key: 'threshold',
                            enabled: layerName === 'threshold',
                            title: 'Schwellenwert'
                        }),
                        React.createElement(TextFilterButton, {
                            image: image,
                            key: 'text',
                            enabled: activeFilters.indexOf('text') !== -1,
                            onClick: this.toggleText,
                            title: 'Text'
                        }),
                        React.createElement(SimpleFilterButton, {
                            filterName: 'watermark',
                            title: 'Wasserzeichen',
                            image: image,
                            key: 'watermark',
                            enabled: activeFilters.indexOf('watermark') !== -1,
                            onClick: this.toggleWatermark
                        })
                    )
                )
            );
        }
    }]);

    return EffectList;
}(Component);

export { EffectList as default };