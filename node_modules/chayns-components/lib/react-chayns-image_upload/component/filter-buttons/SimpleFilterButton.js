var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/alt-text,jsx-a11y/click-events-have-key-events */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { ShadowRenderer, RenderEnvironment, ImageFilter, utils } from 'pixel-flip';

import filterNameToClass from '../../utils/filterNameToClass';
import FilterButton from './FilterButton';

var SimpleFilterButton = (_temp = _class = function (_Component) {
    _inherits(SimpleFilterButton, _Component);

    function SimpleFilterButton() {
        _classCallCheck(this, SimpleFilterButton);

        var _this = _possibleConstructorReturn(this, (SimpleFilterButton.__proto__ || Object.getPrototypeOf(SimpleFilterButton)).call(this));

        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }

    _createClass(SimpleFilterButton, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var _props = this.props,
                image = _props.image,
                filterName = _props.filterName,
                config = _props.config;

            var Filter = filterNameToClass(filterName);

            var naturalWidth = image.naturalWidth,
                naturalHeight = image.naturalHeight;

            var _utils$dimension$getC = utils.dimension.getCroppedSiteSizing({
                width: naturalWidth,
                height: naturalHeight,
                maxWidth: 100,
                maxHeight: 100
            }),
                width = _utils$dimension$getC.width,
                height = _utils$dimension$getC.height;

            this.renderEnvironment = new RenderEnvironment();
            this.renderer = new ShadowRenderer(this.renderEnvironment);

            this.imageLayer = new ImageFilter(image);
            this.imageLayer.addLevel(config ? new (Function.prototype.bind.apply(Filter, [null].concat(_toConsumableArray(config))))() : new Filter());

            this.width = width;
            this.height = height;

            this.renderEnvironment.addLevel(this.imageLayer);
            this.renderer.render({
                width: width,
                height: height
            }).then(function (canvas) {
                _this2.setImageFromCanvas(canvas);
            });
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var _this3 = this;

            this.renderer.render({
                width: this.width,
                height: this.height
            }).then(function (canvas) {
                _this3.setImageFromCanvas(canvas);
            });
        }
    }, {
        key: 'onClick',
        value: function onClick() {
            var onClick = this.props.onClick;

            onClick(this.imageContainer.offsetLeft);
        }
    }, {
        key: 'setImageFromCanvas',
        value: function setImageFromCanvas(canvas) {
            this.image.src = canvas.toDataURL('image/png');
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props2 = this.props,
                enabled = _props2.enabled,
                filterName = _props2.filterName,
                title = _props2.title;


            return React.createElement(
                FilterButton,
                {
                    label: title,
                    enabled: enabled
                },
                React.createElement(
                    'div',
                    {
                        ref: function ref(_ref) {
                            _this4.imageContainer = _ref;
                        },
                        className: 'simple-filter-button',
                        onClick: this.onClick,
                        title: title || filterName
                    },
                    React.createElement('img', {
                        ref: function ref(image) {
                            _this4.image = image;
                        }
                    })
                )
            );
        }
    }]);

    return SimpleFilterButton;
}(Component), _class.defaultProps = {
    enabled: false,
    config: undefined,
    title: null
}, _temp);
export { SimpleFilterButton as default };