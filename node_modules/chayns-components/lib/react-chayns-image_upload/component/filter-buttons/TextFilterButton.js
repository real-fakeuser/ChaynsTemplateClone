var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/click-events-have-key-events,jsx-a11y/alt-text */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { ShadowRenderer, RenderEnvironment, ImageFilter, utils } from 'pixel-flip';

import FilterButton from './FilterButton';

var TextFilterButton = (_temp = _class = function (_Component) {
    _inherits(TextFilterButton, _Component);

    function TextFilterButton() {
        _classCallCheck(this, TextFilterButton);

        return _possibleConstructorReturn(this, (TextFilterButton.__proto__ || Object.getPrototypeOf(TextFilterButton)).apply(this, arguments));
    }

    _createClass(TextFilterButton, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var image = this.props.image;
            var naturalWidth = image.naturalWidth,
                naturalHeight = image.naturalHeight;

            var _utils$dimension$getC = utils.dimension.getCroppedSiteSizing({
                width: naturalWidth,
                height: naturalHeight,
                maxWidth: 100,
                maxHeight: 100
            }),
                width = _utils$dimension$getC.width,
                height = _utils$dimension$getC.height;

            this.renderEnvironment = new RenderEnvironment();
            this.renderer = new ShadowRenderer(this.renderEnvironment);
            this.imageLayer = new ImageFilter(image);

            this.renderEnvironment.addLevel(this.imageLayer);
            this.renderer.render({
                width: width,
                height: height
            }).then(function (canvas) {
                _this2.setImageFromCanvas(canvas);
            });
        }
    }, {
        key: 'setImageFromCanvas',
        value: function setImageFromCanvas(canvas) {
            this.image.src = canvas.toDataURL('image/png');
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props = this.props,
                onClick = _props.onClick,
                enabled = _props.enabled,
                filterName = _props.filterName;


            var className = classnames('text-filter-button', {
                'filter-button--enabled': enabled
            });

            return React.createElement(
                FilterButton,
                {
                    label: 'Text',
                    enabled: enabled
                },
                React.createElement(
                    'div',
                    {
                        className: className,
                        onClick: onClick,
                        title: filterName
                    },
                    React.createElement(
                        'div',
                        { className: 'text-filter-button__text' },
                        'A'
                    ),
                    React.createElement('img', { ref: function ref(image) {
                            _this3.image = image;
                        } })
                )
            );
        }
    }]);

    return TextFilterButton;
}(Component), _class.defaultProps = {
    filterName: '',
    enabled: false
}, _temp);
export { TextFilterButton as default };