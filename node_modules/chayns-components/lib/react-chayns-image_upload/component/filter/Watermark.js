var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { TextFilter } from 'pixel-flip';
import assign from 'object-assign';

var WatermarkFilter = function (_TextFilter) {
    _inherits(WatermarkFilter, _TextFilter);

    function WatermarkFilter() {
        _classCallCheck(this, WatermarkFilter);

        var _this = _possibleConstructorReturn(this, (WatermarkFilter.__proto__ || Object.getPrototypeOf(WatermarkFilter)).call(this, '\xA9 ' + chayns.env.site.domain, {
            color: '#888888'
        }));

        _this.isEditable = false;
        return _this;
    }

    _createClass(WatermarkFilter, [{
        key: 'updateText',
        value: function updateText() {
            var _get2;

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            (_get2 = _get(WatermarkFilter.prototype.__proto__ || Object.getPrototypeOf(WatermarkFilter.prototype), 'updateText', this)).call.apply(_get2, [this].concat(args));

            this.setX(99 - this.getWidth());
            this.setY(100 - this.getHeight());
        }
    }, {
        key: 'render',
        value: function render(config) {
            _get(WatermarkFilter.prototype.__proto__ || Object.getPrototypeOf(WatermarkFilter.prototype), 'render', this).call(this, assign({}, config, {
                editMode: false
            }));
        }
    }]);

    return WatermarkFilter;
}(TextFilter);

export { WatermarkFilter as default };