var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var ScrollContainer = (_temp = _class = function (_Component) {
    _inherits(ScrollContainer, _Component);

    function ScrollContainer() {
        _classCallCheck(this, ScrollContainer);

        var _this = _possibleConstructorReturn(this, (ScrollContainer.__proto__ || Object.getPrototypeOf(ScrollContainer)).call(this));

        _this.onMouseWheel = _this.onMouseWheel.bind(_this);
        return _this;
    }

    _createClass(ScrollContainer, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.container.addEventListener('mousewheel', this.onMouseWheel, false);
            this.container.addEventListener('DOMMouseScroll', this.onMouseWheel, false);
        }
    }, {
        key: 'onMouseWheel',
        value: function onMouseWheel(event) {
            var _scrollView = this.scrollView,
                offsetLeft = _scrollView.offsetLeft,
                scrollLeft = _scrollView.scrollLeft,
                scrollWidth = _scrollView.scrollWidth,
                offsetWidth = _scrollView.offsetWidth;

            var delta = -50 * Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));

            var newScrollLeft = offsetLeft + scrollLeft + delta;

            this.scrollTo(newScrollLeft);

            if (newScrollLeft < 0) {
                return;
            }

            if (offsetWidth + newScrollLeft > scrollWidth) {
                return;
            }

            event.preventDefault();
        }
    }, {
        key: 'getScrollPosition',
        value: function getScrollPosition() {
            return this.scrollView.scrollLeft;
        }
    }, {
        key: 'getWidth',
        value: function getWidth() {
            return this.scrollView.offsetWidth;
        }
    }, {
        key: 'getScrollWidth',
        value: function getScrollWidth() {
            return this.scrollView.scrollWidth;
        }
    }, {
        key: 'scrollTo',
        value: function scrollTo(value) {
            this.scrollView.scrollLeft = value;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                className = _props.className,
                children = _props.children,
                style = _props.style;


            return React.createElement(
                'div',
                {
                    className: 'scroll-container ' + (className || ''),
                    style: style,
                    ref: function ref(_ref2) {
                        _this2.container = _ref2;
                    }
                },
                React.createElement(
                    'div',
                    {
                        className: 'scroll-container__inner',
                        ref: function ref(_ref) {
                            _this2.scrollView = _ref;
                        }
                    },
                    children
                )
            );
        }
    }]);

    return ScrollContainer;
}(Component), _class.defaultProps = {
    className: '',
    children: null,
    style: null
}, _temp);
export { ScrollContainer as default };