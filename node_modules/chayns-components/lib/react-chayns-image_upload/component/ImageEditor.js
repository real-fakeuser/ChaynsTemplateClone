var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { utils } from 'pixel-flip';

import ImageProcessor from './ImageProcessor';

import FileUpload from '../../react-chayns-upload/component/FileUpload';

import '../../polyfills/to-blob';

var ImageEditor = (_temp = _class = function (_Component) {
    _inherits(ImageEditor, _Component);

    function ImageEditor() {
        _classCallCheck(this, ImageEditor);

        var _this = _possibleConstructorReturn(this, (ImageEditor.__proto__ || Object.getPrototypeOf(ImageEditor)).call(this));

        _this.onSelectImage = function (fileList, validFiles) {
            if (!fileList || !fileList[0] || !validFiles || !validFiles[0]) {
                _this.setState({
                    image: null
                });
            }

            utils.fileToImage(validFiles[0]).then(function (image) {
                _this.setState({
                    image: image
                });
            });
        };

        _this.state = {
            image: null
        };

        _this.onAbort = _this.onSelectImage.bind(_this, null);
        _this.onUpload = _this.onUpload.bind(_this);
        return _this;
    }

    _createClass(ImageEditor, [{
        key: 'onUpload',
        value: function onUpload(data) {
            var onUpload = this.props.onUpload;


            if (onUpload) {
                onUpload(data);
            }

            this.setState({
                image: null
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var image = this.state.image;


            if (!image) {
                return React.createElement(FileUpload, {
                    type: 'image',
                    multiple: false,
                    onChange: this.onSelectImage
                });
            }

            return React.createElement(ImageProcessor, {
                image: image,
                onUpload: this.onUpload,
                onExit: this.onAbort
            });
        }
    }]);

    return ImageEditor;
}(Component), _class.defaultProps = {
    onUpload: null
}, _temp);
export { ImageEditor as default };