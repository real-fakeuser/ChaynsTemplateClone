var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { RenderEnvironment } from 'pixel-flip';

import filterNameToClass from './filterNameToClass';

var LayerContainer = function () {
    function LayerContainer() {
        _classCallCheck(this, LayerContainer);

        this.layer = {};

        this.renderEnvironment = new RenderEnvironment();
    }

    _createClass(LayerContainer, [{
        key: 'setFilter',
        value: function setFilter(filterName) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (!this.imageLayer) {
                return false;
            }

            if (this.lastFilter) {
                this.imageLayer.removeLevel(this.lastFilter);
            }

            if (!filterName) {
                this.lastFilterConfig = null;
                return null;
            }

            var Filter = filterNameToClass(filterName);
            this.lastFilter = config ? new (Function.prototype.bind.apply(Filter, [null].concat(_toConsumableArray(config))))() : new Filter();

            this.imageLayer.addLevel(this.lastFilter);
            this.lastFilterConfig = {
                name: filterName,
                config: config
            };

            return this.lastFilter;
        }
    }, {
        key: 'getLastLayerInfo',
        value: function getLastLayerInfo() {
            return this.lastFilterConfig || null;
        }
    }, {
        key: 'addFilter',
        value: function addFilter(filterName) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var layer = this.layer;

            var Filter = filterNameToClass(filterName);

            layer[filterName] = config ? new (Function.prototype.bind.apply(Filter, [null].concat(_toConsumableArray(config))))() : new Filter();
            this.renderEnvironment.addLevel(layer[filterName]);

            if (filterName === 'image') {
                this.imageLayer = layer[filterName];
            }

            return layer[filterName];
        }
    }, {
        key: 'getFilter',
        value: function getFilter(filterName) {
            if (!this.hasFilter(filterName)) {
                return null;
            }

            return this.layer[filterName].filter || null;
        }
    }, {
        key: 'hasFilter',
        value: function hasFilter(filterName) {
            return !!this.layer[filterName];
        }
    }, {
        key: 'removeFilter',
        value: function removeFilter(filterName) {
            var layer = this.layer;


            if (layer[filterName]) {
                this.renderEnvironment.removeLevel(layer[filterName]);
                delete layer[filterName];
            }

            return null;
        }
    }, {
        key: 'getActiveLayer',
        value: function getActiveLayer() {
            return this.layer ? Object.getOwnPropertyNames(this.layer) : [];
        }
    }, {
        key: 'getEnvironment',
        value: function getEnvironment() {
            return this.renderEnvironment;
        }
    }]);

    return LayerContainer;
}();

export { LayerContainer as default };