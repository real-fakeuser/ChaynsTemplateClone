var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import assign from 'object-assign';

import ScaleIn from './ScaleIn/ScaleIn';

var animate = function animate(AnimationComponent, config) {
    return function (BaseComponent) {
        var _class, _temp;

        return _temp = _class = function (_Component) {
            _inherits(AnimateComponent, _Component);

            function AnimateComponent() {
                _classCallCheck(this, AnimateComponent);

                return _possibleConstructorReturn(this, (AnimateComponent.__proto__ || Object.getPrototypeOf(AnimateComponent)).apply(this, arguments));
            }

            _createClass(AnimateComponent, [{
                key: 'componentDidMount',
                value: function componentDidMount() {
                    this.updateRefs();
                }
            }, {
                key: 'componentDidUpdate',
                value: function componentDidUpdate() {
                    this.updateRefs();
                }
            }, {
                key: 'setAnimationListener',
                value: function setAnimationListener(animation) {
                    this._animation = animation;

                    this.updateRefs();
                }
            }, {
                key: 'updateRefs',
                value: function updateRefs() {
                    if (!this._wrapper || !this._animation) {
                        return;
                    }

                    if (this._animation.setWrapperReference) {
                        this._animation.setWrapperReference(this._wrapper);
                    }
                }
            }, {
                key: 'render',
                value: function render() {
                    var _this2 = this;

                    var show = this.props.in;


                    if (AnimationComponent.duplicate) {
                        var classNames = classnames('cc__animate', _defineProperty({}, AnimationComponent.wrapperClassName, AnimationComponent.wrapperClassName));

                        return React.createElement(
                            'div',
                            {
                                className: classNames,
                                ref: function ref(_ref) {
                                    _this2._wrapper = _ref;
                                }
                            },
                            React.createElement(AnimationComponent, {
                                key: 'shadow',
                                component: BaseComponent,
                                config: config,
                                'in': show,
                                props: assign({
                                    animationClone: true
                                }, this.props),
                                animate: this
                            }),
                            React.createElement(BaseComponent, _extends({
                                key: 'base'
                            }, this.props))
                        );
                    }

                    return React.createElement(AnimationComponent, {
                        key: 'shadow',
                        component: BaseComponent,
                        config: config,
                        'in': show,
                        props: this.props,
                        animate: this
                    });
                }
            }]);

            return AnimateComponent;
        }(Component), _class.defaultProps = {
            in: false
        }, _temp;
    };
};

export { ScaleIn as SCALE_IN };

export default animate;