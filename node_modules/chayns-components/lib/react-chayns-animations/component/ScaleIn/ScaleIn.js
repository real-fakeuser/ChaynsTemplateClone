var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import Portal from '../../../react-chayns-portal/component/Portal';

var POSITION_LEFT = 0;
var POSITION_MIDDLE = 1;
var POSITION_RIGHT = 2;
var POSITION_UNKNOWN = POSITION_LEFT;

var ANIMATION_CSS_TIMEOUT = 10;
var ANIMATION_TIME = 300;

var TAPP_MARGIN = 0;

var ScaleIn = function (_Component) {
    _inherits(ScaleIn, _Component);

    function ScaleIn() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ScaleIn);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ScaleIn.__proto__ || Object.getPrototypeOf(ScaleIn)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            position: POSITION_UNKNOWN,
            show: false,
            animationActive: false
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ScaleIn, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                animate = _props.animate,
                show = _props.in;


            animate.setAnimationListener(this);

            if (show) {
                this.show();
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var show = this.props.in;


            if (nextProps.in !== show) {
                if (nextProps.in) {
                    this.show();
                } else {
                    this.hide();
                }
            }
        }
    }, {
        key: 'setWrapperReference',
        value: function setWrapperReference(ref) {
            this.updateClasses(ref);
        }
    }, {
        key: 'show',
        value: function show() {
            var _this2 = this;

            this.setState({
                render: true
            });

            window.setTimeout(function () {
                _this2.setState({
                    show: true,
                    animationActive: true
                });

                window.setTimeout(function () {
                    _this2.setState({
                        animationActive: false
                    });
                }, ANIMATION_TIME);
            }, ANIMATION_CSS_TIMEOUT);
        }
    }, {
        key: 'hide',
        value: function hide() {
            var _this3 = this;

            window.setTimeout(function () {
                _this3.setState({
                    show: false,
                    animationActive: true
                });

                window.setTimeout(function () {
                    _this3.setState({
                        render: false,
                        animationActive: false
                    });
                }, ANIMATION_TIME);
            }, ANIMATION_CSS_TIMEOUT);
        }
    }, {
        key: 'updateClasses',
        value: function updateClasses(wrapper) {
            var bodyWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

            var _wrapper$getBoundingC = wrapper.getBoundingClientRect(),
                left = _wrapper$getBoundingC.left,
                right = _wrapper$getBoundingC.right,
                wrapperTop = _wrapper$getBoundingC.top;

            var diffRight = bodyWidth - right;

            var top = wrapperTop;
            if (chayns.env.isApp) {
                var _document = document,
                    body = _document.body,
                    documentElement = _document.documentElement;


                if (body.scrollTop) {
                    top += body.scrollTop;
                } else if (documentElement.scrollTop) {
                    top += documentElement.scrollTop;
                }
            }

            var position = left > diffRight ? POSITION_RIGHT : POSITION_LEFT;

            if (right < 3 / 4 * bodyWidth) {
                var partWidth = 1 / 3 * bodyWidth;
                position = Math.floor(left / partWidth);
            }

            this.setState({
                position: position,
                top: top
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                props = _props2.props,
                BaseComponent = _props2.component;
            var _state = this.state,
                animationActive = _state.animationActive,
                top = _state.top,
                render = _state.render,
                show = _state.show,
                position = _state.position;


            var classNames = classnames('cc__animation__scale-in', {
                'cc__animation__scale-in--left': position === POSITION_LEFT,
                'cc__animation__scale-in--right': position === POSITION_RIGHT,
                'cc__animation__scale-in--middle': position === POSITION_MIDDLE,
                'cc__animation__scale-in--show': show
            });

            if (!render) {
                return null;
            }

            var tappMargin = ScaleIn.getTappMargin();

            return React.createElement(
                Portal,
                { name: 'scale-in' },
                React.createElement(
                    'div',
                    {
                        className: classNames,
                        style: {
                            top: top + 'px',
                            left: tappMargin + 'px',
                            width: 'calc(100% - ' + 2 * tappMargin + 'px)'
                        }
                    },
                    React.createElement(BaseComponent, _extends({}, props, {
                        animationActive: animationActive
                    }))
                )
            );
        }
    }], [{
        key: 'getTappMargin',
        value: function getTappMargin() {
            if (TAPP_MARGIN) {
                return TAPP_MARGIN;
            }

            var tapp = document.querySelector('.tapp') || document.body;

            if (tapp) {
                var _window$getComputedSt = window.getComputedStyle(tapp),
                    marginLeft = _window$getComputedSt.marginLeft,
                    paddingLeft = _window$getComputedSt.paddingLeft;

                TAPP_MARGIN = (parseInt(marginLeft, 10) || 0) + (parseInt(paddingLeft, 10) || 0);
            }

            return TAPP_MARGIN || 0;
        }
    }]);

    return ScaleIn;
}(Component);

window.onresize = function () {
    TAPP_MARGIN = 0;
    ScaleIn.getTappMargin();
};

ScaleIn.duplicate = true;
ScaleIn.wrapperClassName = 'cc__animate--scale-in';

export default ScaleIn;