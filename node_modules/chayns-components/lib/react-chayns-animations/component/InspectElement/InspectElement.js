var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ReactTransitionGroup from 'react-transition-group/TransitionGroup';

import * as Constants from './constants';
import ModalTransition from './ModalTransition';

var InspectElement = (_temp = _class = function (_Component) {
    _inherits(InspectElement, _Component);

    function InspectElement() {
        _classCallCheck(this, InspectElement);

        var _this = _possibleConstructorReturn(this, (InspectElement.__proto__ || Object.getPrototypeOf(InspectElement)).call(this));

        _this.openOverlay = function () {
            window.clearTimeout(_this.closeTimeout);

            if (window.debugLevel >= 1) {
                console.debug('inspect-element component: openOverlay', _this.props, _this.state);
            }

            var boundingClientRect = _this._container.getBoundingClientRect();
            var bodyWidth = document.body.getBoundingClientRect().width;

            var tileMiddle = boundingClientRect.left + boundingClientRect.width / 2;
            var bodyMiddle = bodyWidth / 2;

            _this.setState({
                modalTop: boundingClientRect.top + 'px',
                modalLeft: boundingClientRect.left + 'px',
                modalRight: bodyWidth - boundingClientRect.right + 'px',
                modalWidth: boundingClientRect.width + 'px',
                modalDirection: tileMiddle < bodyMiddle ? Constants.DIRECTION_LEFT : Constants.DIRECTION_RIGHT,
                showModal: true,
                showTile: false
            });
        };

        _this.closeOverlay = function () {
            var _this$props = _this.props,
                onClose = _this$props.onClose,
                onClosed = _this$props.onClosed;


            if (window.debugLevel >= 1) {
                console.debug('inspect-element component: closeOverlay', _this.props, _this.state);
            }

            _this.setState({
                showModal: false
            });

            if (onClose) {
                onClose();
            }

            _this.closeTimeout = window.setTimeout(function () {
                _this.setState({
                    showTile: true
                });

                if (onClosed) {
                    onClosed();
                }
            }, 650);
        };

        _this.renderComponent = function (props) {
            var _this$props2 = _this.props,
                WrapperComponent = _this$props2.component,
                children = _this$props2.children;


            if (!WrapperComponent) {
                return null;
            }

            return React.createElement(
                WrapperComponent,
                _extends({}, _this.props, _this.getCustomProps(), props),
                children
            );
        };

        _this.state = {
            showModal: false,
            showTile: true
        };
        return _this;
    }

    _createClass(InspectElement, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var expanded = this.props.expanded;


            if (expanded) {
                this.openOverlay();
            } else {
                this.closeOverlay();
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var expanded = this.props.expanded;
            var showModal = this.state.showModal;


            if (expanded !== nextProps.expanded && nextProps.expanded !== showModal) {
                if (nextProps.expanded) {
                    this.openOverlay();
                } else {
                    this.closeOverlay();
                }
            }
        }
    }, {
        key: 'getCustomProps',
        value: function getCustomProps() {
            return {
                openOverlay: this.openOverlay,
                closeOverlay: this.closeOverlay
            };
        }
    }, {
        key: 'renderTile',
        value: function renderTile() {
            var _this2 = this;

            var _state = this.state,
                showTile = _state.showTile,
                modalWidth = _state.modalWidth;


            return React.createElement(
                'span',
                {
                    style: {
                        visibility: !showTile ? 'hidden' : 'visible',
                        width: modalWidth
                    },
                    className: 'inspect-element-animation__tile',
                    ref: function ref(_ref) {
                        _this2._container = _ref;
                    }
                },
                this.renderComponent()
            );
        }
    }, {
        key: 'renderModal',
        value: function renderModal() {
            var expandedWidth = this.props.expandedWidth;
            var _state2 = this.state,
                showModal = _state2.showModal,
                modalTop = _state2.modalTop,
                modalLeft = _state2.modalLeft,
                modalRight = _state2.modalRight,
                modalWidth = _state2.modalWidth,
                modalDirection = _state2.modalDirection;


            return React.createElement(
                ReactTransitionGroup,
                null,
                showModal && React.createElement(ModalTransition, {
                    show: showModal,
                    top: modalTop,
                    left: modalLeft,
                    right: modalRight,
                    width: modalWidth,
                    direction: modalDirection,
                    expandedWidth: expandedWidth,
                    renderComponent: this.renderComponent,
                    closeOverlay: this.closeOverlay
                })
            );
        }
    }, {
        key: 'render',
        value: function render() {
            if (window.debugLevel >= 1) {
                console.debug('render inspect-element component', this.props, this.state);
            }

            return React.createElement(
                'span',
                { className: 'inspect-element-animation' },
                this.renderTile(),
                this.renderModal()
            );
        }
    }]);

    return InspectElement;
}(Component), _class.defaultProps = {
    expanded: false,
    children: null,
    expandedWidth: null,
    onClose: null,
    onClosed: null
}, _temp);
export { InspectElement as default };