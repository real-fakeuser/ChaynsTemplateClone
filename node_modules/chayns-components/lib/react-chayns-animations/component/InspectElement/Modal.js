var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/click-events-have-key-events */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import * as Constants from './constants';
import { hideOverlay, showOverlay } from '../../../utils/chayns/setOverlay';

var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
var EXITED = 'exited';
var UNMOUNTED = 'unmounted';

var Modal = (_temp = _class = function (_Component) {
    _inherits(Modal, _Component);

    function Modal() {
        _classCallCheck(this, Modal);

        var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this));

        _this.state = {};
        return _this;
    }

    _createClass(Modal, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var status = this.props.status;

            var nextStatus = nextProps.status;

            if (status !== ENTERING && nextStatus === ENTERING) {
                return this.componentWillEnter();
            }

            if (status !== ENTERED && nextStatus === ENTERED) {
                return this.componentDidEnter();
            }

            if (status !== EXITING && nextStatus === EXITING) {
                return this.componentWillLeave();
            }

            return null;
        }
    }, {
        key: 'getModalWidth',
        value: function getModalWidth() {
            var _props = this.props,
                width = _props.width,
                left = _props.left,
                right = _props.right,
                direction = _props.direction;


            if (direction === Constants.DIRECTION_LEFT) {
                return parseFloat(width) + 2 * parseFloat(right) + 'px';
            }

            return parseFloat(width) + 2 * parseFloat(left) + 'px';
        }
    }, {
        key: 'getWidth',
        value: function getWidth() {
            var _props2 = this.props,
                width = _props2.width,
                expandedWidth = _props2.expandedWidth;
            var _state = this.state,
                didLeave = _state.didLeave,
                willEnter = _state.willEnter,
                willEnterActive = _state.willEnterActive,
                didEnter = _state.didEnter,
                willLeave = _state.willLeave,
                willLeaveActive = _state.willLeaveActive;


            if (!didLeave && !didEnter && !willEnterActive && !willEnter && !willLeave && !willLeaveActive) {
                return width;
            }

            if (willEnter || willLeaveActive) {
                return width;
            }

            return window.chayns.utils.isString(expandedWidth) ? expandedWidth : expandedWidth + 'px';
        }
    }, {
        key: 'componentWillEnter',
        value: function componentWillEnter() {
            var _this2 = this;

            var closeOverlay = this.props.closeOverlay;


            if (window.debugLevel >= 2) {
                console.debug('inspect-element (Modal) component: componentWillEnter', this.props, this.state);
            }

            this.setState({
                willEnter: true,
                willEnterActive: false,
                didEnter: false,
                willLeave: false,
                willLeaveActive: false,
                didLeave: false
            });

            window.setTimeout(function () {
                showOverlay({
                    color: 'rgba(0, 0, 0, 0.8)',
                    transition: '.55s',
                    mode: 1
                }).then(function () {
                    if (closeOverlay) {
                        closeOverlay();
                    }
                }).catch(function () {});

                _this2.setState({
                    willEnter: false,
                    willEnterActive: true,
                    didEnter: false,
                    willLeave: false,
                    willLeaveActive: false,
                    didLeave: false
                });
            }, 100);
        }
    }, {
        key: 'componentDidEnter',
        value: function componentDidEnter() {
            if (window.debugLevel >= 2) {
                console.debug('inspect-element (Modal) component: componentDidEnter', this.props, this.state);
            }

            this.setState({
                willEnter: false,
                willEnterActive: false,
                didEnter: true,
                willLeave: false,
                willLeaveActive: false,
                didLeave: false
            });

            if (this._content) {
                var _content$getBoundingC = this._content.getBoundingClientRect(),
                    bottom = _content$getBoundingC.bottom;

                var _document$body$getBou = document.body.getBoundingClientRect(),
                    height = _document$body$getBou.height;

                var newPadding = bottom - height + 25;
                var tapp = document.querySelector('.tapp') || document.body;

                if (tapp && bottom > height && tapp.style.borderBottomWidth < newPadding) {
                    tapp.style.borderBottomWidth = newPadding + 'px';
                    tapp.style.borderBottomStyle = 'solid';
                    tapp.style.borderBottomColor = 'transparent';
                }
            }
        }
    }, {
        key: 'componentWillLeave',
        value: function componentWillLeave() {
            var _this3 = this;

            if (window.debugLevel >= 2) {
                console.debug('inspect-element (Modal) component: componentWillLeave', this.props, this.state);
            }

            this.setState({
                willEnter: false,
                willEnterActive: false,
                didEnter: false,
                willLeave: true,
                willLeaveActive: false,
                didLeave: false
            });

            window.setTimeout(function () {
                _this3.setState({
                    willEnter: false,
                    willEnterActive: false,
                    didEnter: false,
                    willLeave: false,
                    willLeaveActive: true,
                    didLeave: false
                });

                hideOverlay({
                    transition: '.55s',
                    mode: 1
                });
            }, 100);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props3 = this.props,
                top = _props3.top,
                renderComponent = _props3.renderComponent,
                closeOverlay = _props3.closeOverlay,
                direction = _props3.direction;
            var _state2 = this.state,
                willEnter = _state2.willEnter,
                willEnterActive = _state2.willEnterActive,
                willLeave = _state2.willLeave,
                willLeaveActive = _state2.willLeaveActive,
                didEnter = _state2.didEnter;


            if (window.debugLevel >= 2) {
                console.debug('render inspect-element (Modal) component', this.props, this.state);
            }

            return React.createElement(
                'span',
                {
                    className: classnames('modal', {
                        'modal--visible': didEnter,
                        'modal--enter': willEnter,
                        'modal--enter--active': willEnterActive,
                        'modal--leave': willLeave,
                        'modal--leave--active': willLeaveActive,
                        'modal--left': direction === Constants.DIRECTION_LEFT,
                        'modal--right': direction === Constants.DIRECTION_RIGHT
                    }),
                    style: {
                        top: top,
                        left: direction === Constants.DIRECTION_RIGHT ? 0 : null,
                        right: direction === Constants.DIRECTION_LEFT ? 0 : null,
                        width: this.getModalWidth()
                    }
                },
                React.createElement('div', {
                    className: 'modal--overlay',
                    onClick: closeOverlay
                }),
                React.createElement(
                    'div',
                    {
                        className: 'modal--content',
                        style: {
                            width: this.getWidth()
                        },
                        ref: function ref(_ref) {
                            _this4._content = _ref;
                        }
                    },
                    renderComponent({
                        visible: didEnter,
                        enter: willEnter,
                        enterActive: willEnterActive,
                        leave: willLeave,
                        leaveActive: willLeaveActive
                    })
                )
            );
        }
    }]);

    return Modal;
}(Component), _class.defaultProps = {
    top: undefined,
    left: undefined,
    right: undefined,
    direction: undefined,
    width: undefined,
    expandedWidth: undefined
}, _temp);
export { Modal as default };