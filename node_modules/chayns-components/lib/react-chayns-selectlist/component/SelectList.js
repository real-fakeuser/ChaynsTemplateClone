var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var ANIMATION_TIMEOUT = 500;

var SelectList = (_temp = _class = function (_Component) {
    _inherits(SelectList, _Component);

    function SelectList(props) {
        _classCallCheck(this, SelectList);

        var _this = _possibleConstructorReturn(this, (SelectList.__proto__ || Object.getPrototypeOf(SelectList)).call(this, props));

        _this._changeActiveItem = function (id, value) {
            var selectedId = _this.state.selectedId;


            if (id === selectedId) return;

            if (_this.changing) return;

            var _this$props = _this.props,
                onChange = _this$props.onChange,
                propValue = _this$props.value;


            if (onChange) {
                onChange(id, value);
            }

            if (propValue) {
                return;
            }

            _this.changing = true;

            window.setTimeout(function () {
                _this.changing = false;
            }, ANIMATION_TIMEOUT);

            _this.setState({
                selectedId: id
            });
        };

        _this.state = {
            selectedId: props.defaultValue || 0
        };

        if (props.defaultValue && props.onChange) {
            props.onChange(props.defaultValue);
        }
        return _this;
    }

    _createClass(SelectList, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.selectListId = 'cc_selectlist__' + SelectList.maxId;
            SelectList.maxId += 1;

            var _props = this.props,
                children = _props.children,
                selectFirst = _props.selectFirst;

            if (selectFirst) {
                this.calculateFirst(children);
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var value = this.props.value;


            if (nextProps.value && nextProps.value !== value) {
                this.setState({
                    selectedId: nextProps.value
                });
            }
        }
    }, {
        key: 'calculateFirst',
        value: function calculateFirst(children) {
            if (!children) {
                return;
            }

            var firstItemId = 0;

            for (var i = 0, z = children.length; i < z; i += 1) {
                var child = children[i];
                if (React.isValidElement(child)) {
                    if (child && child.props && child.props.id && !child.props.disabled) {
                        firstItemId = child.props.id;
                        break;
                    }
                }
            }

            this.setState({
                selectedId: firstItemId
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                className = _props2.className,
                children = _props2.children;
            var selectedId = this.state.selectedId;


            if (children.length > 0) {
                return React.createElement(
                    'div',
                    { className: className },
                    React.Children.map(children, function (child) {
                        if (!React.isValidElement(child)) {
                            return null;
                        }

                        return React.cloneElement(child, {
                            changeListItem: _this2._changeActiveItem,
                            selectListId: _this2.selectListId,
                            selectListSelectedId: selectedId
                        });
                    })
                );
            }

            return null;
        }
    }]);

    return SelectList;
}(Component), _class.maxId = 0, _class.defaultProps = {
    className: null,
    defaultValue: null,
    value: null,
    onChange: null,
    selectFirst: null,
    children: null
}, _temp);
export { SelectList as default };