var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { TransitionGroup, CSSTransition } from 'react-transition-group';

var SelectItem = (_temp = _class = function (_Component) {
    _inherits(SelectItem, _Component);

    function SelectItem(props) {
        _classCallCheck(this, SelectItem);

        var _this = _possibleConstructorReturn(this, (SelectItem.__proto__ || Object.getPrototypeOf(SelectItem)).call(this, props));

        _this._handleChange = function () {
            var _this$props = _this.props,
                changeListItem = _this$props.changeListItem,
                id = _this$props.id,
                value = _this$props.value;


            if (changeListItem) {
                changeListItem(id, value);
            }
        };

        _this.radioId = _this._getRadioId(props.id);
        return _this;
    }

    _createClass(SelectItem, [{
        key: '_getRadioId',
        value: function _getRadioId(id) {
            var selectListId = this.props.selectListId;


            return selectListId + '-' + id;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                id = _props.id,
                className = _props.className,
                selectListId = _props.selectListId,
                disabled = _props.disabled,
                name = _props.name,
                selectListSelectedId = _props.selectListSelectedId,
                children = _props.children;


            var checked = id === selectListSelectedId;

            return React.createElement(
                'div',
                {
                    key: id,
                    className: className
                },
                React.createElement('input', {
                    name: selectListId,
                    type: 'radio',
                    className: 'radio',
                    id: this.radioId,
                    checked: checked,
                    onChange: this._handleChange,
                    disabled: disabled
                }),
                React.createElement(
                    'label',
                    { htmlFor: this.radioId },
                    name
                ),
                children && React.createElement(
                    TransitionGroup,
                    null,
                    checked && React.createElement(
                        CSSTransition,
                        {
                            key: 'children',
                            classNames: 'react-fade',
                            timeout: { enter: 500, exit: 500 }
                        },
                        React.createElement(
                            'div',
                            { className: 'selectlist__selectitem' },
                            children
                        )
                    )
                )
            );
        }
    }]);

    return SelectItem;
}(Component), _class.defaultProps = {
    id: null,
    className: '',
    disabled: false,
    children: null,
    changeListItem: null,
    name: '',
    value: null,
    selectListSelectedId: null
}, _temp);
export { SelectItem as default };