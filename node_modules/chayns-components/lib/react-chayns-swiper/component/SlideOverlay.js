var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

var SlideOverlay = (_temp = _class = function (_Component) {
    _inherits(SlideOverlay, _Component);

    function SlideOverlay() {
        _classCallCheck(this, SlideOverlay);

        var _this = _possibleConstructorReturn(this, (SlideOverlay.__proto__ || Object.getPrototypeOf(SlideOverlay)).call(this));

        console.warn('SlideOverlay is marked as deprecated');
        return _this;
    }

    _createClass(SlideOverlay, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                position = _props.position,
                gradient = _props.gradient,
                children = _props.children;


            var className = classNames(_defineProperty({
                slide__overlay__text: true
            }, 'slide__overlay__text--' + position, position));

            var classNamesTop = classNames({
                slide__overlay: true,
                'slide__overlay--gradient': gradient
            });

            return React.createElement(
                'div',
                { className: classNamesTop },
                React.createElement(
                    'div',
                    { className: className },
                    children
                )
            );
        }
    }]);

    return SlideOverlay;
}(Component), _class.defaultProps = {
    position: null,
    gradient: null
}, _temp);
export { SlideOverlay as default };