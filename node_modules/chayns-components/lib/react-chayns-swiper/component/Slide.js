var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var Slide = (_temp = _class = function (_Component) {
    _inherits(Slide, _Component);

    function Slide() {
        _classCallCheck(this, Slide);

        return _possibleConstructorReturn(this, (Slide.__proto__ || Object.getPrototypeOf(Slide)).apply(this, arguments));
    }

    _createClass(Slide, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var onClick = this.props.onClick;


            if (!window.react) {
                window.react = {};
            }

            if (!window.react.slider) {
                window.react.slider = {
                    callbacks: []
                };
            }

            if (onClick) {
                this._callbackId = window.react.slider.callbacks.length;
                window.react.slider.callbacks.push(onClick);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                image = _props.image;


            return React.createElement(
                'div',
                {
                    style: {
                        backgroundImage: 'url(\'' + image + '\')'
                    },
                    className: 'swiper-slide',
                    'data-callbackid': this._callbackId,
                    ref: function ref(div) {
                        _this2._div = div;
                    }
                },
                children
            );
        }
    }]);

    return Slide;
}(Component), _class.defaultProps = {
    onClick: null,
    children: null
}, _temp);
export { Slide as default };