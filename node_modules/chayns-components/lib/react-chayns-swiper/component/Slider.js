var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

/* global Swiper */

var App = (_temp = _class = function (_Component) {
    _inherits(App, _Component);

    function App() {
        _classCallCheck(this, App);

        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this));

        window.addEventListener('resize', function () {
            _this._onResize();
        }, true);

        _this._swiper = null;

        _this.state = {
            // eslint-disable-next-line react/no-unused-state
            swiperLoaded: false
        };
        return _this;
    }

    _createClass(App, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this._updateSwiper();

            var elements = this._swiperElement.querySelectorAll('.swiper-slide');

            var _loop = function _loop(i, x) {
                elements[i].addEventListener('click', function (event) {
                    if (elements[i].dataset && elements[i].dataset.callbackid) {
                        var callbackid = elements[i].dataset.callbackid;


                        if (callbackid && window.react && window.react.slider && window.react.slider.callbacks && window.react.slider.callbacks[callbackid]) {
                            window.react.slider.callbacks[callbackid](event);
                        }
                    }
                }, false);
            };

            for (var i = 0, x = elements.length; i < x; i += 1) {
                _loop(i, x);
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this._updateSwiper();
        }
    }, {
        key: '_updateSwiper',
        value: function _updateSwiper() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                length = _props.length,
                loop = _props.loop,
                autoplay = _props.autoplay,
                preloadImages = _props.preloadImages,
                lazyLoading = _props.lazyLoading;


            if (this._swiper) {
                if (this._swiper.destroy) {
                    this._swiper.destroy();
                }

                this._swiper = null;
            }

            if (window.chayns.utils.isArray(children) && children.length > 1 && (!length || length > 1)) {
                this._swiper = new Swiper(this._swiperElement, {
                    spaceBetween: 10,
                    loop: loop,
                    grabCursor: false,
                    pagination: this._paginationElement,
                    paginationClickable: true,
                    autoplay: autoplay,
                    autoplayDisableOnInteraction: false,
                    preloadImages: preloadImages,
                    lazyLoading: lazyLoading || false,
                    paginationBulletRender: function paginationBulletRender(index, className) {
                        return '<span class="swiper-pagination-bullet ' + className + '" style="background-color: ' + window.chayns.env.site.color + ' !important"></span>';
                    }
                });
            } else {
                window.setTimeout(function () {
                    _this2._swiperElement.classList.add('swiper-slide-active');
                    _this2._swiperElement.classList.add('swiper--single-slide');
                }, 0);
            }

            this._onResize();
        }
    }, {
        key: '_onResize',
        value: function _onResize() {
            if (this._swiperElement) {
                var _swiperElement$getBou = this._swiperElement.getBoundingClientRect(),
                    width = _swiperElement$getBou.width;

                var height = this._getHeight(width);

                this._swiperElement.style.height = height + 'px';
            }
        }
    }, {
        key: '_getHeight',
        value: function _getHeight(width) {
            var setHeight = this.props.setHeight;


            if (setHeight) {
                return setHeight(width);
            }

            return 9 / 16 * width;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                className = _props2.className,
                overlay = _props2.overlay,
                children = _props2.children;


            var classNames = classnames(_defineProperty({
                'swiper-container': true,
                'swiper-container-horizontal': true
            }, className, className));

            return React.createElement(
                'div',
                {
                    className: classNames
                },
                React.createElement(
                    'div',
                    {
                        ref: function ref(swiper) {
                            _this3._swiperElement = swiper;
                        },
                        className: 'swiper-overlay--wrapper'
                    },
                    overlay,
                    React.createElement(
                        'div',
                        { className: 'swiper-wrapper' },
                        children
                    )
                ),
                React.createElement('div', {
                    className: 'swiper-pagination',
                    ref: function ref(pagination) {
                        _this3._paginationElement = pagination;
                    }
                })
            );
        }
    }]);

    return App;
}(Component), _class.defaultProps = {
    loop: true,
    autoplay: null,
    lazyLoading: null,
    preloadImages: null,
    setHeight: null,
    overlay: null,
    className: null,
    children: null,
    length: null
}, _temp);
export { App as default };