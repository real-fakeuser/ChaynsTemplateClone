var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

var Week = (_temp = _class = function (_Component) {
    _inherits(Week, _Component);

    _createClass(Week, null, [{
        key: 'hexToRgb',
        value: function hexToRgb(hex) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }
    }]);

    function Week() {
        _classCallCheck(this, Week);

        var _this = _possibleConstructorReturn(this, (Week.__proto__ || Object.getPrototypeOf(Week)).call(this));

        _this.schemeColor = Week.hexToRgb(chayns.getSchemeColor());
        return _this;
    }

    _createClass(Week, [{
        key: 'renderDays',
        value: function renderDays() {
            var _this2 = this;

            var days = [],
                i = 0;

            var _loop = function _loop() {
                var background = '',
                    day = _this2.props.data[i],
                    percentage = void 0,
                    filled = '',
                    start = void 0,
                    color = _this2.schemeColor,
                    backgroundColor = day.date.getDate() === _this2.props.focus.getDate() && day.date.getMonth() === _this2.props.focus.getMonth() && day.date.getFullYear() === _this2.props.focus.getFullYear() ? 'rgba(' + _this2.schemeColor.r + ',' + _this2.schemeColor.g + ',' + _this2.schemeColor.b + ',0.3)' : '';
                var classes = classNames('week_item', {
                    'week_item_filled': day && day.id,
                    'week_item_focused': day && day.groupId && _this2.props.groupFocus === day.groupId
                });
                if (day && day.id) {
                    start = Math.round(new Date(day.startTime).getHours() / 24 * 100);
                    percentage = Math.round((day.endTime - day.startTime) / (24 * 60 * 60 * 1000) * 100);
                    if (day.color) {
                        /**
                         * For correct calculating of the percentage it is required, that the entry is in one day
                         * @type {Date}
                         */
                        color = Week.hexToRgb(day.color);
                    }
                    background = 'linear-gradient(to right, rgba(' + color.r + ',' + color.g + ',' + color.b + ',0.5) ' + start + '%,rgba(' + color.r + ',' + color.g + ',' + color.b + ',1) ' + (start + 1) + '%,rgba(' + color.r + ',' + color.g + ',' + color.b + ',1) ' + (start + percentage) + '%,rgba(' + color.r + ',' + color.g + ',' + color.b + ',0.5) ' + (start + percentage + 1) + '%)';
                }

                days.push(React.createElement('div', { className: classes, style: { background: background, backgroundColor: backgroundColor }, key: i, onClick: function onClick(event) {
                        return _this2.props.onClick(event, day);
                    } }));
            };

            for (i; i < this.props.data.length; i++) {
                _loop();
            }
            return days;
        }
    }, {
        key: 'render',
        value: function render() {
            var days = this.renderDays();
            return React.createElement(
                'div',
                { className: 'week', style: { width: this.props.weekWidth * 0.9 + 'px', marginRight: this.props.weekWidth * 0.1 + 'px' } },
                React.createElement(
                    'div',
                    { className: 'week_table' },
                    React.createElement(
                        'div',
                        { className: 'week_row' },
                        days
                    )
                )
            );
        }
    }]);

    return Week;
}(Component), _class.defaultProps = {
    data: []
}, _temp);
export { Week as default };