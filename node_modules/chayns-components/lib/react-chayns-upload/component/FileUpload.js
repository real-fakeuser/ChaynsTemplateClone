var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/click-events-have-key-events */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import selectFile from '../../utils/selectFile';
import getCompareFunction from '../utils/getCompareFunction';
import getMimeTypes from '../utils/getMimeTypes';
import uploadCloudImages from '../utils/uploadCloudImage';
import normalizeUploadResponse from '../utils/normalizeUploadResponse';

var FileUpload = (_temp = _class = function (_Component) {
    _inherits(FileUpload, _Component);

    function FileUpload() {
        _classCallCheck(this, FileUpload);

        var _this = _possibleConstructorReturn(this, (FileUpload.__proto__ || Object.getPrototypeOf(FileUpload)).call(this));

        _this.state = {
            hover: false
        };

        _this.onDrop = _this.onDrop.bind(_this);
        _this.onDragOver = _this.onDragOver.bind(_this);
        _this.onDragLeave = _this.onDragLeave.bind(_this);
        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }

    _createClass(FileUpload, [{
        key: 'onClick',
        value: function onClick(event) {
            var _this2 = this;

            var _props = this.props,
                type = _props.type,
                multiple = _props.multiple,
                upload = _props.upload,
                onUpload = _props.onUpload,
                onClick = _props.onClick;


            if (onClick) {
                return onClick(event);
            }

            if (onClick === false) {
                return false;
            }

            if (upload && onUpload && type === FileUpload.TYPE_IMAGE) {
                return chayns.uploadCloudImage().then(function (data) {
                    if (!data.response || data.response.statusCode !== 200 || !data.response.data) {
                        return null;
                    }

                    try {
                        var responseData = JSON.parse(data.response.data);
                        return normalizeUploadResponse(responseData);
                    } catch (ex) {
                        return null;
                    }
                }).then(function (uploadData) {
                    onUpload(uploadData);
                });
            }

            return selectFile({
                type: getMimeTypes(type),
                multiple: multiple
            }).then(function (files) {
                var fileList = !multiple ? [files] : files;
                _this2.checkFiles(fileList);
            });
        }
    }, {
        key: 'onDrop',
        value: function onDrop(event) {
            var _props2 = this.props,
                onChange = _props2.onChange,
                upload = _props2.upload,
                onUpload = _props2.onUpload,
                type = _props2.type,
                onDrop = _props2.onDrop;


            if (onDrop) {
                return onDrop(event);
            }

            if (onDrop === false) {
                return false;
            }

            event.stopPropagation();
            event.preventDefault();

            this.setState({
                hover: false
            });

            var files = event.dataTransfer.files;


            if (upload && onUpload && type === FileUpload.TYPE_IMAGE) {
                return uploadCloudImages(files).then(function (data) {
                    var uploadData = normalizeUploadResponse(data);
                    onUpload(uploadData);
                });
            }

            if (onChange) {
                return this.checkFiles(files);
            }

            return null;
        }
    }, {
        key: 'onDragOver',
        value: function onDragOver(event) {
            event.stopPropagation();
            event.preventDefault();

            this.setState({
                hover: true
            });

            // eslint-disable-next-line no-param-reassign
            event.dataTransfer.dropEffect = 'copy';
        }
    }, {
        key: 'onDragLeave',
        value: function onDragLeave() {
            this.setState({
                hover: false
            });
        }
    }, {
        key: 'checkFiles',
        value: function checkFiles(files) {
            var _props3 = this.props,
                type = _props3.type,
                multiple = _props3.multiple,
                onChange = _props3.onChange;
            var length = files.length;


            var compareFunction = getCompareFunction(type);

            var invalidFiles = [];
            var validFiles = [];

            for (var i = 0; i < length; i += 1) {
                if (!multiple && i > 0) {
                    invalidFiles.push(files[i]);
                } else if (!compareFunction(files[i])) {
                    invalidFiles.push(files[i]);
                } else {
                    validFiles.push(files[i]);
                }
            }

            if (onChange) {
                onChange(files, validFiles, invalidFiles);
            }
        }
    }, {
        key: 'renderPlaceholder',
        value: function renderPlaceholder() {
            var _props4 = this.props,
                type = _props4.type,
                className = _props4.className,
                uploadText = _props4.uploadText;
            var hover = this.state.hover;


            var classNames = classnames('cc__file-upload--placeholder', _defineProperty({
                'chayns__color--70': chayns.env.site.colorMode !== 1,
                'cc__file-upload--image': type === 'image',
                'cc__file-upload--audio': type === 'audio',
                'cc__file-upload--video': type === 'video',
                'cc__file-upload--documents': !type || type === 'all',
                'cc__file-upload--hover': hover
            }, className, className));

            return React.createElement(
                'div',
                {
                    className: classNames
                },
                React.createElement('i', {
                    className: 'cc__file-upload__icon',
                    'aria-hidden': 'true'
                }),
                React.createElement(
                    'div',
                    {
                        className: 'cc__file-upload__message'
                    },
                    uploadText || FileUpload.getText(type)
                )
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _props5 = this.props,
                children = _props5.children,
                disableListeners = _props5.disableListeners;


            var wrapperClassNames = classnames('cc__file-upload', {
                'cc__file-upload--custom': children
            });

            return React.createElement(
                'div',
                {
                    className: wrapperClassNames,
                    onClick: !disableListeners ? this.onClick : null,
                    onDrop: !disableListeners ? this.onDrop : null,
                    onDragOver: !disableListeners ? this.onDragOver : null,
                    onDragLeave: !disableListeners ? this.onDragLeave : null
                },
                children || this.renderPlaceholder()
            );
        }
    }], [{
        key: 'getText',
        value: function getText(type) {
            switch (type) {
                case 'image':
                    return 'Bild hochladen';
                case 'video':
                    return 'Video hochladen';
                case 'audio':
                    return 'Song hochladen';
                default:
                    return 'Datei hochladen';
            }
        }
    }]);

    return FileUpload;
}(Component), _class.TYPE_IMAGE = 'image', _class.TYPE_VIDEO = 'video', _class.TYPE_AUDIO = 'audio', _class.TYPE_ALL = 'all', _class.defaultProps = {
    type: 'all',
    multiple: true,
    onChange: null,
    className: '',
    upload: false,
    children: null,
    uploadText: null,
    onUpload: null,
    disableListeners: false,
    onClick: null,
    onDrop: null
}, _temp);
export { FileUpload as default };