var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/click-events-have-key-events */
import React, { Component } from 'react';
import PropTypes from 'prop-types';

import WorldWeather from '../utils/WorldWeatherOnline';
import { fetchDataFromApi } from '../../utils/fetch';

var Weather = (_temp = _class = function (_Component) {
    _inherits(Weather, _Component);

    function Weather() {
        _classCallCheck(this, Weather);

        var _this = _possibleConstructorReturn(this, (Weather.__proto__ || Object.getPrototypeOf(Weather)).call(this));

        _this._openWeather = function () {
            var _this$props = _this.props,
                city = _this$props.city,
                qa = _this$props.qa,
                server = _this$props.server;


            var url = 'https://tapp01.tobit.com/Tapps/Weather/Web/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&font=##fontid##&city=' + (city || '') + '&TappID=3'; // ${window.chayns.env.site.tapp.id}
            if (qa) {
                url = (server || 'https://tappqa.tobit.com/Tapps/WeatherTapp') + '/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&font=##fontid##&city=' + (city || '') + '&TappID=3';
            }

            return url;
            //
            // if(this.props.latitude && this.props.longitude) {
            //     url += `&lat=${encodeURI(this.props.latitude+"")}&lng=${encodeURI(this.props.longitude+"")}`;
            // }
            //
            // let title = 'Wetter';
            // if(this.props.city) {
            //     title += ' in ' + this.props.city;
            // }
            //
            // window.chayns.openUrl({
            //     "url": url,
            //     "exclusiveView": false,
            //     "title": title
            // });
        };

        _this.state = {};
        return _this;
    }

    _createClass(Weather, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                latitude = _props.latitude,
                longitude = _props.longitude;


            if (latitude && longitude) {
                this._fetch();
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            var _props2 = this.props,
                latitude = _props2.latitude,
                longitude = _props2.longitude;


            if (latitude && longitude && prevProps.latitude !== latitude && prevProps.longitude !== longitude) {
                this._fetch();
            }
        }
    }, {
        key: '_fetch',
        value: function _fetch() {
            var _this2 = this;

            var _props3 = this.props,
                lng = _props3.longitude,
                lat = _props3.latitude,
                server = _props3.server,
                locationId = _props3.locationId,
                qa = _props3.qa,
                onLoaded = _props3.onLoaded,
                onError = _props3.onError;


            this.setState({
                // eslint-disable-next-line react/no-unused-state
                isFetching: true
            });

            var url = (server || 'https://tapp01.tobit.com/Tapps/Weather/API/Weather') + '/' + (locationId || window.chayns.env.site.locationId) + '/?current=true&forecast=true';
            if (qa) {
                url = (server || 'https://tappqa.tobit.com/Tapps/WeatherProxy/Weather') + '/' + (locationId || window.chayns.env.site.locationId) + '/?current=true&forecast=true';
            }

            if (lat && lng) {
                url += '&lat=' + encodeURI('' + lat) + '&lng=' + encodeURI('' + lng);
            }

            fetchDataFromApi(url).then(function (data) {
                _this2.setState({
                    weather: new WorldWeather(data)
                });

                if (onLoaded) {
                    onLoaded(data);
                }
            }).catch(function (error) {
                console.warn('Error while fetching Weather-Data', error);

                if (onError) {
                    onError(error);
                }
            }).then(function () {
                _this2.setState({
                    // eslint-disable-next-line react/no-unused-state
                    isFetching: false
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var temp = 'no content';
            var icon = '';
            var minTemp = '';
            var maxTemp = '';

            var weather = this.state.weather;


            if (weather) {
                temp = weather.getCurrentCondition().getTemp();
                icon = weather.getCurrentCondition().getWeatherIcon();
                minTemp = weather.getForecast(1).getMinTemp();
                maxTemp = weather.getForecast(1).getMaxTemp();
            }

            if (weather && temp !== null && icon && minTemp !== null && maxTemp !== null) {
                return React.createElement(
                    'div',
                    {
                        className: 'weather-widget',
                        onClick: this._openWeather
                    },
                    React.createElement('div', { className: 'weather-widget__empty' }),
                    React.createElement(
                        'div',
                        { className: 'weather-widget__icon' },
                        React.createElement('i', { className: icon + ' chayns__color--100' })
                    ),
                    React.createElement(
                        'div',
                        { className: 'weather-widget__temp' },
                        temp || 'non content'
                    ),
                    React.createElement(
                        'div',
                        { className: 'weather-widget__celsius' },
                        'Â°C'
                    ),
                    React.createElement(
                        'div',
                        { className: 'weather-widget__info' },
                        React.createElement(
                            'div',
                            { className: 'weather-widget__info__max' },
                            React.createElement('i', { className: 'fa fa-caret-up' }),
                            ' ' + maxTemp + ' \xB0'
                        ),
                        React.createElement(
                            'div',
                            { className: 'weather-widget__info__min' },
                            React.createElement('i', { className: 'fa fa-caret-down' }),
                            ' ' + minTemp + ' \xB0'
                        )
                    )
                );
            }

            return null;
        }
    }]);

    return Weather;
}(Component), _class.defaultProps = {
    longitude: null,
    latitude: null,
    onLoaded: null,
    onError: null,
    server: null,
    city: null,
    qa: null,
    locationId: null
}, _temp);
export { Weather as default };