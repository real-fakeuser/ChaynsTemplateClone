var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import parseAstronomyTime from './parseAstronomyTime';

var Astronomy = function () {
    function Astronomy(jsonObject, parent) {
        _classCallCheck(this, Astronomy);

        if (jsonObject[0]) {
            // eslint-disable-next-line prefer-destructuring
            this._info = jsonObject[0];
        }

        if (parent) {
            this._parent = parent;
        }
    }

    _createClass(Astronomy, [{
        key: 'getMoonrise',
        value: function getMoonrise() {
            if (this._info) {
                return parseAstronomyTime(this._info.moonrise, this._parent) || null;
            }

            return null;
        }
    }, {
        key: 'getMoonset',
        value: function getMoonset() {
            if (this._info) {
                return parseAstronomyTime(this._info.moonset, this._parent) || null;
            }

            return null;
        }
    }, {
        key: 'getSunrise',
        value: function getSunrise() {
            if (this._info) {
                return parseAstronomyTime(this._info.sunrise, this._parent) || null;
            }

            return null;
        }
    }, {
        key: 'getSunset',
        value: function getSunset() {
            if (this._info) {
                return parseAstronomyTime(this._info.sunset, this._parent) || null;
            }

            return null;
        }
    }]);

    return Astronomy;
}();

export { Astronomy as default };