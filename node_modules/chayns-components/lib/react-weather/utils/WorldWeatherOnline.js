var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import WeatherForecast from './WeatherForecast';
import WeatherInfo from './WeatherInfo';
import { isInteger } from './utils';

var WorldWeatherOnline = function () {
    function WorldWeatherOnline(jsonString) {
        _classCallCheck(this, WorldWeatherOnline);

        if (jsonString) {
            this._error = this.parseJson(jsonString);
        } else {
            this._error = true;
        }
    }

    _createClass(WorldWeatherOnline, [{
        key: 'parseJson',
        value: function parseJson(json) {
            try {
                var weather = json;

                if (typeof json === 'string' || json instanceof String) {
                    weather = JSON.parse(json);
                }

                if (!weather.data) {
                    return true;
                }

                if (weather.data.current_condition) {
                    this._currentCondition = new WeatherInfo(weather.data.current_condition[0], this);
                }

                if (weather.data.weather) {
                    this._forecast = weather.data.weather;
                }

                return false;
            } catch (ex) {
                console.warn('Error while parsing Weather', ex, json);
            }

            return true;
        }
    }, {
        key: 'getCurrentCondition',
        value: function getCurrentCondition() {
            return this._currentCondition;
        }
    }, {
        key: 'getForecast',
        value: function getForecast(date) {
            if (isInteger(date) && this._forecast[date]) {
                return new WeatherForecast(this._forecast[date], this);
            }

            return null;
        }
    }, {
        key: 'getForecasts',
        value: function getForecasts() {
            var _this = this;

            return this._forecast.map(function (element) {
                return new WeatherForecast(element, _this);
            });
        }
    }, {
        key: 'setTexts',
        value: function setTexts(object) {
            this._textStrings = object;
        }
    }, {
        key: 'getWeatherString',
        value: function getWeatherString(weatherCode) {
            if (this._textStrings[weatherCode]) {
                return this._textStrings[weatherCode];
            }

            return null;
        }
    }]);

    return WorldWeatherOnline;
}();

export { WorldWeatherOnline as default };