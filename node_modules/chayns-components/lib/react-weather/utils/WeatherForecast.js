var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import Astronomy from './Astronomy';
import WeatherInfo from './WeatherInfo';

var WeatherForecast = function () {
    function WeatherForecast(jsonObject) {
        _classCallCheck(this, WeatherForecast);

        this._forecast = jsonObject;
    }

    _createClass(WeatherForecast, [{
        key: 'getMinTemp',
        value: function getMinTemp(fahrenheit) {
            if (!fahrenheit) {
                return parseInt(this._forecast.mintempC, 10) || 0;
            }

            return parseInt(this._forecast.mintempF, 10) || 0;
        }
    }, {
        key: 'getMaxTemp',
        value: function getMaxTemp(fahrenheit) {
            if (!fahrenheit) {
                return parseInt(this._forecast.maxtempC, 10) || 0;
            }

            return parseInt(this._forecast.maxtempF, 10) || 0;
        }
    }, {
        key: 'getAvgTemp',
        value: function getAvgTemp(fahrenheit) {
            var minTemp = this.getMinTemp(fahrenheit);
            var maxTemp = this.getMaxTemp(fahrenheit);

            if (minTemp !== null && maxTemp !== null) {
                return (minTemp + maxTemp) / 2;
            }

            return null;
        }
    }, {
        key: 'getAvgHoursTemp',
        value: function getAvgHoursTemp(fahrenheit) {
            var avgTemp = 0;
            var i = 0;

            this.getHours().map(function (element) {
                var temp = element.getTemp(fahrenheit);

                if (temp !== null) {
                    avgTemp += temp;
                    i += 1;
                }
            });

            if (avgTemp !== null && i) {
                return avgTemp / i;
            }

            return null;
        }
    }, {
        key: 'getUvIndex',
        value: function getUvIndex() {
            return parseInt(this._forecast.uvIndex, 10) || null;
        }
    }, {
        key: 'getAstronomy',
        value: function getAstronomy() {
            if (this._forecast.astronomy) {
                return new Astronomy(this._forecast.astronomy, this);
            }

            return null;
        }
    }, {
        key: 'getDate',
        value: function getDate() {
            if (this._forecast.date) {
                return new Date(this._forecast.date);
            }

            return null;
        }
    }, {
        key: 'getHour',
        value: function getHour(hour) {
            var hours = this.getHours();

            if (!hours) return null;

            return hours[hour];
        }
    }, {
        key: 'getHourByIndex',
        value: function getHourByIndex(index) {
            return new WeatherInfo(this._forecast.hourly[index]);
        }
    }, {
        key: 'getHours',
        value: function getHours() {
            if (this._forecast.hourly) {
                return this._forecast.hourly.map(function (element) {
                    return new WeatherInfo(element);
                });
            }

            return null;
        }
    }, {
        key: 'getPrecipitation',
        value: function getPrecipitation(inches) {
            var hours = this.getHours();
            var all = 0.0;
            var i = 0;

            hours.map(function (element) {
                var precip = element.getPrecipitation(inches);
                if (precip) {
                    i += 1;
                    all += precip;
                }
            });

            i = 0;
            if (i === 0) {
                return all;
            }

            return all / i;
        }
    }]);

    return WeatherForecast;
}();

export { WeatherForecast as default };