var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import _getWeatherIcon from './getWeatherIcon';
import parseHmmTime from './parseHmmTime';

var WeatherInfo = function () {
    function WeatherInfo(jsonObject) {
        _classCallCheck(this, WeatherInfo);

        this._info = jsonObject;
    }

    _createClass(WeatherInfo, [{
        key: 'getRaw',
        value: function getRaw() {
            return this._info;
        }
    }, {
        key: 'getCloudcover',
        value: function getCloudcover() {
            return this._info.cloudcover || null;
        }
    }, {
        key: 'getHumidity',
        value: function getHumidity() {
            return parseInt(this._info.humiditiy, 10) || null;
        }
    }, {
        key: 'getPressure',
        value: function getPressure() {
            return parseInt(this._info.pressure, 10) || null;
        }
    }, {
        key: 'getTemp',
        value: function getTemp(fahrenheit) {
            if (!fahrenheit) {
                return parseInt(this._info.temp_C, 10) || parseInt(this._info.tempC, 10) || null;
            }

            return parseInt(this._info.temp_F, 10) || parseInt(this._info.tempC, 10) || null;
        }
    }, {
        key: 'getWeatherIcon',
        value: function getWeatherIcon(isNight) {
            return _getWeatherIcon(this.getWeatherCode(), isNight);
        }
    }, {
        key: 'getWeatherCode',
        value: function getWeatherCode() {
            return parseInt(this._info.weatherCode, 10) || null;
        }
    }, {
        key: 'getWeatherText',
        value: function getWeatherText() {
            return parseInt(this._info.weatherCode, 10) || null;
        }
    }, {
        key: 'getWinddir',
        value: function getWinddir(point) {
            if (!point) {
                return parseInt(this._info.winddirDegree, 10) || null;
            }

            return this._info.winddir16Point || null;
        }
    }, {
        key: 'getWindspeed',
        value: function getWindspeed(miles) {
            if (!miles) {
                return parseInt(this._info.windspeedKmph, 10) || null;
            }

            return parseInt(this._info.windspeedMiles, 10) || null;
        }
    }, {
        key: 'getVisibility',
        value: function getVisibility() {
            return parseInt(this._info.visibility, 10) || null;
        }
    }, {
        key: 'getTime',
        value: function getTime() {
            if (!this._info.time) return null;

            return parseHmmTime(this._info.time, new Date());
        }
    }, {
        key: 'getPrecipitation',
        value: function getPrecipitation(inches) {
            if (!inches) {
                return parseFloat(this._info.precipMM) || 0;
            }

            return parseFloat(this._info.precipInches) || 0;
        }
    }]);

    return WeatherInfo;
}();

export { WeatherInfo as default };