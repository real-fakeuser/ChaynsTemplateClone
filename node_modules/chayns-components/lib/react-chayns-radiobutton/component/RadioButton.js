var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var currentId = 0;
var PREFIX = 'CC_RB_';

var RadioButton = (_temp = _class = function (_Component) {
    _inherits(RadioButton, _Component);

    function RadioButton() {
        _classCallCheck(this, RadioButton);

        var _this = _possibleConstructorReturn(this, (RadioButton.__proto__ || Object.getPrototypeOf(RadioButton)).call(this));

        _this.handleChange = function (event) {
            var _this$props = _this.props,
                disabled = _this$props.disabled,
                onChange = _this$props.onChange,
                value = _this$props.value;

            if (!disabled && onChange) {
                if (value !== undefined) {
                    onChange(value);
                } else {
                    onChange(event.target.value);
                }
            }
        };

        currentId += 1;
        _this._id = PREFIX + currentId;
        return _this;
    }

    /**
     * Handles check event and passes the checked state to the handler.
     * @param event
     */


    _createClass(RadioButton, [{
        key: 'render',


        /**
         * Renders a radio button.
         * @returns {XML}
         */
        value: function render() {
            var _props = this.props,
                checked = _props.checked,
                id = _props.id,
                children = _props.children,
                disabled = _props.disabled,
                name = _props.name,
                className = _props.className,
                onChange = _props.onChange,
                props = _objectWithoutProperties(_props, ['checked', 'id', 'children', 'disabled', 'name', 'className', 'onChange']);

            return React.createElement(
                'div',
                { className: className },
                React.createElement('input', _extends({}, props, {
                    id: id || this._id,
                    type: 'radio',
                    className: 'radio',
                    checked: checked,
                    onChange: this.handleChange,
                    name: name,
                    disabled: disabled
                })),
                React.createElement(
                    'label',
                    { htmlFor: id || this._id },
                    children
                )
            );
        }
    }]);

    return RadioButton;
}(Component), _class.defaultProps = {
    id: null,
    name: null,
    checked: undefined,
    onChange: null,
    disabled: false,
    children: null,
    value: undefined,
    className: null
}, _temp);
export { RadioButton as default };