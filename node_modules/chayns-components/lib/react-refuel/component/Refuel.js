var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

import { fetchDataFromApi } from '../../utils/fetch';

import RefuelCounter from './RefuelCounter';

var Refuel = (_temp = _class = function (_Component) {
    _inherits(Refuel, _Component);

    function Refuel() {
        _classCallCheck(this, Refuel);

        var _this = _possibleConstructorReturn(this, (Refuel.__proto__ || Object.getPrototypeOf(Refuel)).call(this));

        _this._openRefuel = function () {
            var _this$props = _this.props,
                qa = _this$props.qa,
                city = _this$props.city,
                latitude = _this$props.latitude,
                longitude = _this$props.longitude;


            var url = 'https://tapp01.tobit.com/Tapps/FuelPrice/Web/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&font=##fontid##&city=' + (city || '') + '&TappID=3'; // ${window.chayns.env.site.tapp.id}
            if (qa) {
                url = 'https://tappqa.tobit.com/Tapps/FuelStationTapp/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&font=##fontid##&city=' + (city || '') + '&TappID=3';
            }

            if (latitude && longitude) {
                url += '&lat=' + encodeURI('' + latitude) + '&lng=' + encodeURI('' + longitude);
            }

            var title = 'Tanken';
            if (city) {
                title += ' in ' + city;
            }

            window.chayns.openUrl({
                url: url,
                exclusiveView: false,
                title: title
            });
            // window.chayns.openUrl({
            //     url:`https://tappqa.tobit.com/Tapps/FuelStationTapp/?AppVersion=##version##&ColorScheme=##colorscheme##&OS=##os##&color=##color##&colormode=##colormode##&TappID=-7&lat=52.066879362577&lng=7.0164507166667`,
            //     exclusiveView:false
            // });
        };

        _this.state = {
            isFetching: false
        };
        return _this;
    }

    _createClass(Refuel, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this._fetch();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            var _props = this.props,
                latitude = _props.latitude,
                longitude = _props.longitude,
                onError = _props.onError;


            if (prevProps.latitude !== latitude || prevProps.longitude !== longitude) {
                if (latitude <= 90 && longitude <= 180) {
                    this._fetch(this);
                } else if (onError) {
                    onError();
                }
            }
        }
    }, {
        key: '_fetch',
        value: function _fetch() {
            var _this2 = this;

            var _props2 = this.props,
                server = _props2.server,
                locationId = _props2.locationId,
                tappId = _props2.tappId,
                qa = _props2.qa,
                latitude = _props2.latitude,
                longitude = _props2.longitude,
                onLoaded = _props2.onLoaded,
                onError = _props2.onError,
                waitForLatLng = _props2.waitForLatLng;


            this.setState({
                isFetching: true
            });

            var url = (server || 'https://tapp01.tobit.com/Tapps/FuelPrice/API/api/Fuel') + '/?locationId=' + (locationId || window.chayns.env.site.locationId) + '&tappId=' + (tappId || window.chayns.env.site.tapp && window.chayns.env.site.tapp.id || 1);
            if (qa) {
                url = 'https://tappqa.tobit.com/Tapps/RefuelApi/api/Fuel/?locationId=' + (locationId || window.chayns.env.site.locationId) + '&tappId=' + (tappId || window.chayns.env.site.tapp && window.chayns.env.site.tapp.id || 1);
            }

            if (latitude && longitude) {
                url += '&lat=' + encodeURI('' + latitude) + '&lng=' + encodeURI('' + longitude);
            }

            if (!waitForLatLng || latitude && longitude) {
                fetchDataFromApi(url).then(function (data) {
                    _this2._refuel = data;

                    if (onLoaded) {
                        onLoaded(data);
                    }
                }).catch(function (error) {
                    console.warn('Error while fetching Fuel-Data', error);

                    if (onError) {
                        onError(error);
                    }
                }).then(function () {
                    _this2.setState({
                        isFetching: false
                    });
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            if (this._refuel) {
                return React.createElement(
                    'div',
                    { className: 'refuel' },
                    this._refuel.map(function (element) {
                        var name = element.fuelId;
                        if (name === 2) {
                            name = 'Super';
                        } else if (name === 1) {
                            name = 'Diesel';
                        } else if (name === 3) {
                            name = 'Super E10';
                        }

                        return React.createElement(RefuelCounter, {
                            name: name,
                            value: element.data[0].cost,
                            key: element.fuelId,
                            onClick: _this3._openRefuel
                        });
                    })
                );
            }

            var isFetching = this.state.isFetching;
            var isFetchingText = this.props.isFetching;


            if (isFetching) {
                return React.createElement(
                    'div',
                    null,
                    isFetchingText || 'Tankdaten werden vom Server geladen.'
                );
            }

            var noContent = this.props.noContent;


            return React.createElement(
                'div',
                null,
                noContent || 'Es konnten keine Tankdaten zu ihrem Standort gefunden werden.'
            );
        }
    }]);

    return Refuel;
}(Component), _class.defaultProps = {
    locationId: null,
    tappId: null,
    noContent: null,
    isFetching: null,
    onLoaded: null,
    onError: null,
    latitude: null,
    longitude: null,
    server: null,
    waitForLatLng: null,
    city: null,
    qa: null
}, _temp);
export { Refuel as default };