var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/click-events-have-key-events */
import React, { Component } from 'react';
import PropTypes from 'prop-types';

var RefuelCounter = (_temp2 = _class = function (_Component) {
    _inherits(RefuelCounter, _Component);

    function RefuelCounter() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, RefuelCounter);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RefuelCounter.__proto__ || Object.getPrototypeOf(RefuelCounter)).call.apply(_ref, [this].concat(args))), _this), _this._onClick = function () {
            var onClick = _this.props.onClick;


            if (onClick) {
                onClick();
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(RefuelCounter, [{
        key: '_getUpper',
        value: function _getUpper() {
            var value = this.props.value;


            return React.createElement(
                'span',
                { className: 'refuel-counter refuel-counter__upper noselect' },
                (parseFloat(value) % 1).toFixed(3).substring(4)
            );
        }
    }, {
        key: '_getLower',
        value: function _getLower() {
            var value = this.props.value;


            return React.createElement(
                'span',
                { className: 'refuel-counter refuel-counter__lower noselect' },
                Math.floor(parseFloat(value)) + ',' + (parseFloat(value) % 1).toFixed(2).substring(2)
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var name = this.props.name;


            return React.createElement(
                'div',
                {
                    className: 'refuel-info',
                    onClick: this._onClick
                },
                React.createElement(
                    'div',
                    { className: 'refuel-info__name' },
                    name
                ),
                React.createElement(
                    'div',
                    { className: 'refuel-counter__container chayns__background-color--100' },
                    React.createElement(
                        'div',
                        { style: { verticalAlign: 'center' } },
                        this._getLower(),
                        this._getUpper()
                    )
                )
            );
        }
    }]);

    return RefuelCounter;
}(Component), _class.defaultProps = {
    onClick: null,
    value: null,
    name: null
}, _temp2);
export { RefuelCounter as default };