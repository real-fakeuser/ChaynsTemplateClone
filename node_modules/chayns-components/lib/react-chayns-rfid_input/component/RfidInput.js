var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import Input from '../../react-chayns-input/component/Input';
import ChooseButton from '../../react-chayns-button/component/ChooseButton';
import { VALID_RFID, SPLIT_RFID, RFID_CONTENT } from '../constants/regex';

var RfidInput = (_temp2 = _class = function (_Component) {
    _inherits(RfidInput, _Component);

    function RfidInput() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, RfidInput);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RfidInput.__proto__ || Object.getPrototypeOf(RfidInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            isScanning: false
        }, _this.onConfirm = function () {
            var _this$props = _this.props,
                onConfirm = _this$props.onConfirm,
                value = _this$props.value;

            onConfirm(value);
        }, _this.onInput = function (newRfid) {
            var onInput = _this.props.onInput;


            var newValue = newRfid.toUpperCase().replace(/\s/g, '');
            if (!RFID_CONTENT.test(newValue)) {
                return;
            }

            onInput(newValue);
        }, _this.onScan = function (rfid) {
            _this.endScan();
            if (VALID_RFID.test(rfid)) {
                var newRfid = rfid.toUpperCase();
                var _this$props2 = _this.props,
                    onConfirm = _this$props2.onConfirm,
                    onInput = _this$props2.onInput;

                onInput(newRfid);
                onConfirm(newRfid);
            }
        }, _this.startScan = function () {
            _this.setState({ isScanning: true });
            chayns.setNfcCallback(_this.onScan);
            chayns.showWaitCursor();
        }, _this.endScan = function () {
            var isScanning = _this.state.isScanning;


            if (!isScanning) {
                return;
            }
            chayns.removeNfcCallback();
            chayns.hideWaitCursor();
            _this.setState({ isScanning: false });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(RfidInput, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                placeholder = _props.placeholder,
                confirmNode = _props.confirmNode,
                enableScan = _props.enableScan,
                scanText = _props.scanText,
                value = _props.value;
            var isScanning = this.state.isScanning;


            var classNames = classnames(className, 'cc__rfid-input', {
                'cc__rfid-input--enable-scan': enableScan
            });
            var disabled = !VALID_RFID.test(value);

            return React.createElement(
                'div',
                { className: classNames },
                React.createElement(
                    'div',
                    { className: 'cc__rfid-input__wrapper' },
                    React.createElement(Input, {
                        className: 'cc__rfid-input__input',
                        placeholder: placeholder,
                        onChange: this.onInput,
                        value: RfidInput.pretifyRfid(value),
                        autoCorrect: 'off',
                        autoCapitalize: 'off',
                        spellCheck: 'false'
                    }),
                    enableScan && !value && React.createElement(
                        ChooseButton,
                        {
                            onClick: isScanning ? this.endScan : this.startScan,
                            className: 'cc__rfid-input__scan'
                        },
                        scanText
                    ),
                    (!enableScan || value) && React.createElement(
                        ChooseButton,
                        {
                            onClick: this.onConfirm,
                            disabled: disabled,
                            className: 'cc__rfid-input__confirm'
                        },
                        confirmNode
                    )
                )
            );
        }
    }], [{
        key: 'pretifyRfid',
        value: function pretifyRfid(rfid) {
            return rfid ? rfid.match(SPLIT_RFID).join(' ') : '';
        }
    }, {
        key: 'isNfcAvailable',
        value: function isNfcAvailable() {
            return chayns.env.isMyChaynsApp && (chayns.env.isAndroid || chayns.env.isIOS && chayns.env.appVersion >= 5764) || chayns.env.isApp && chayns.env.isAndroid;
        }
    }]);

    return RfidInput;
}(Component), _class.defaultProps = {
    className: null,
    placeholder: 'Kartennummer',
    confirmNode: 'OK',
    enableScan: false,
    scanText: 'Scannen'
}, _temp2);
export { RfidInput as default };