var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var ccPortals = {};

export default /* #__PURE__ */(function () {
    var _class, _temp2;

    return _temp2 = _class = function (_Component) {
        _inherits(Portal, _Component);

        function Portal() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, Portal);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Portal.__proto__ || Object.getPrototypeOf(Portal)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                children: null
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(Portal, [{
            key: 'componentDidMount',
            value: function componentDidMount() {
                var _props = this.props,
                    children = _props.children,
                    name = _props.name,
                    preventPortal = _props.preventPortal;


                if (!children && name && !preventPortal) {
                    ccPortals[name] = this;
                }

                if (children && name && ccPortals[name]) {
                    ccPortals[name].setChildren(children);
                }
            }
        }, {
            key: 'componentWillReceiveProps',
            value: function componentWillReceiveProps(nextProps) {
                var name = nextProps.name,
                    children = nextProps.children;


                if (children && name && ccPortals[name]) {
                    ccPortals[name].setChildren(children);
                }
            }
        }, {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
                var _props2 = this.props,
                    children = _props2.children,
                    name = _props2.name,
                    preventPortal = _props2.preventPortal;


                if (!children && !preventPortal && name && ccPortals[name] === this) {
                    delete ccPortals[name];
                }

                if ((children || preventPortal) && name && ccPortals[name]) {
                    ccPortals[name].setChildren(null);
                }
            }
        }, {
            key: 'setChildren',
            value: function setChildren(children) {
                this.setState({ children: children });
            }
        }, {
            key: 'render',
            value: function render() {
                var children = this.props.children;
                var childrenState = this.state.children;


                if (children || !childrenState) {
                    return null;
                }

                return React.createElement(
                    'div',
                    { className: 'cc__portal' },
                    childrenState
                );
            }
        }]);

        return Portal;
    }(Component), _class.defaultProps = {
        preventPortal: false,
        children: null
    }, _temp2;
})();