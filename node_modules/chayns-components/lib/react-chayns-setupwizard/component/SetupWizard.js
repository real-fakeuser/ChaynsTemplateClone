var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/click-events-have-key-events */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

/**
 * ############################
 * # HARRY, YOU ARE A WIZARD! #
 * ############################
 */
var SetupWizard = (_temp = _class = function (_Component) {
    _inherits(SetupWizard, _Component);

    function SetupWizard() {
        _classCallCheck(this, SetupWizard);

        var _this = _possibleConstructorReturn(this, (SetupWizard.__proto__ || Object.getPrototypeOf(SetupWizard)).call(this));

        _this.state = {
            currentStep: 0,
            maxProgress: 0,
            completedSteps: []
        };
        _this.stepComplete = _this.stepComplete.bind(_this);
        _this.previousStep = _this.previousStep.bind(_this);
        _this.nextStep = _this.nextStep.bind(_this);
        _this.toStep = _this.toStep.bind(_this);
        _this.resetToStep = _this.resetToStep.bind(_this);
        _this.ready = _this.ready.bind(_this);
        _this.notComplete = _this.notComplete.bind(_this);
        return _this;
    }

    _createClass(SetupWizard, [{
        key: 'getChildContext',
        value: function getChildContext() {
            return {
                stepComplete: this.stepComplete,
                previousStep: this.previousStep,
                nextStep: this.nextStep,
                toStep: this.toStep,
                resetToStep: this.resetToStep
            };
        }
    }, {
        key: 'stepComplete',
        value: function stepComplete(value) {
            var _state = this.state,
                currentStep = _state.currentStep,
                completedSteps = _state.completedSteps;

            if (value === true) {
                if (completedSteps.indexOf(currentStep) === -1) {
                    completedSteps.push(currentStep);
                    this.setState({ completedSteps: completedSteps });
                }
            } else if (completedSteps.indexOf(currentStep) >= 0) {
                var children = this.props.children;


                completedSteps.splice(completedSteps.indexOf(currentStep));
                this.setState({ completedSteps: completedSteps });

                if (children[currentStep].props.required === true) {
                    this.setState({ maxProgress: currentStep });
                }
            }
        }
    }, {
        key: 'previousStep',
        value: function previousStep() {
            var currentStep = this.state.currentStep;

            if (currentStep > 0) {
                this.updateContent(currentStep - 1);
            }
        }
    }, {
        key: 'nextStep',
        value: function nextStep() {
            var children = this.props.children;
            var currentStep = this.state.currentStep;

            if (chayns.utils.isArray(children) && children.length - 1 > currentStep) {
                this.updateContent(currentStep + 1);
            } else {
                this.ready();
            }
        }
    }, {
        key: 'toStep',
        value: function toStep(step) {
            var children = this.props.children;

            if (chayns.utils.isArray(children)) {
                if (children.length - 1 >= step) {
                    this.updateContent(step);
                } else if (children.length - 1 === step + 1) {
                    this.ready();
                }
            }
        }
    }, {
        key: 'resetToStep',
        value: function resetToStep(step) {
            var _state2 = this.state,
                completedSteps = _state2.completedSteps,
                maxProgress = _state2.maxProgress;

            for (var i = step; i < maxProgress; i += 1) {
                if (completedSteps.indexOf(i) >= 0) {
                    completedSteps.splice(completedSteps.indexOf(i));
                }
            }
            this.setState({ maxProgress: step, currentStep: step, completedSteps: completedSteps });
        }
    }, {
        key: 'ready',
        value: function ready() {
            var _props = this.props,
                ready = _props.ready,
                children = _props.children;
            var _state3 = this.state,
                completedSteps = _state3.completedSteps,
                currentStep = _state3.currentStep;

            if (!(children[currentStep].props.required === true && completedSteps.indexOf(currentStep) === -1)) {
                if (ready) {
                    ready();
                }
            } else {
                this.notComplete();
            }
        }
    }, {
        key: 'notComplete',
        value: function notComplete() {
            var notComplete = this.props.notComplete;

            if (notComplete) {
                notComplete();
            }
        }
    }, {
        key: 'updateContent',
        value: function updateContent(newCurrentStep) {
            var children = this.props.children;
            var maxProgress = this.state.maxProgress;
            var _state4 = this.state,
                completedSteps = _state4.completedSteps,
                currentStep = _state4.currentStep;

            if (!(children[currentStep].props.required === true && completedSteps.indexOf(currentStep) === -1)) {
                maxProgress = newCurrentStep > maxProgress ? newCurrentStep : maxProgress;
                this.setState({
                    currentStep: newCurrentStep,
                    maxProgress: maxProgress
                });
            } else {
                this.notComplete();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                style = _props2.style,
                contentStyle = _props2.contentStyle,
                title = _props2.title,
                description = _props2.description,
                children = _props2.children;
            var _state5 = this.state,
                maxProgress = _state5.maxProgress,
                currentStep = _state5.currentStep,
                completedSteps = _state5.completedSteps;

            return React.createElement(
                'div',
                { style: style },
                title && React.createElement(
                    'h1',
                    null,
                    title
                ),
                description && React.createElement('p', { dangerouslySetInnerHTML: { __html: description } }),
                children.map(function (child, index) {
                    return React.createElement(
                        'div',
                        {
                            className: classNames('accordion', 'accordion--fixed', {
                                'accordion--open': index === currentStep,
                                'accordion--disabled': index > maxProgress
                            })
                            // eslint-disable-next-line react/no-array-index-key
                            , key: index
                        },
                        React.createElement(
                            'div',
                            {
                                className: classNames('accordion__head', 'no-arrow', 'ellipsis', 'wizardHead', { pointer: index <= maxProgress }),
                                onClick: function onClick() {
                                    if (maxProgress >= index) {
                                        if (currentStep === index) {
                                            _this2.setState({ currentStep: -1 });
                                        } else {
                                            _this2.setState({ currentStep: index });
                                        }
                                    }
                                }
                            },
                            React.createElement(
                                'div',
                                {
                                    className: classNames('number', {
                                        numberDarkComplete: chayns.env.site.colorMode === 1 && completedSteps.indexOf(index) >= 0,
                                        numberDarkNotComplete: chayns.env.site.colorMode === 1 && completedSteps.indexOf(index) === -1,
                                        'chayns__background-color--70 chayns__color--5': chayns.env.site.colorMode !== 1 && completedSteps.indexOf(index) >= 0,
                                        'chayns__background-color--20 chayns__color--100': chayns.env.site.colorMode !== 1 && completedSteps.indexOf(index) === -1
                                    })
                                },
                                index + 1
                            ),
                            React.createElement(
                                'div',
                                { className: 'title' },
                                child.props.title
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'accordion__body', style: contentStyle },
                            child
                        )
                    );
                })
            );
        }
    }]);

    return SetupWizard;
}(Component), _class.childContextTypes = {
    stepComplete: PropTypes.func,
    previousStep: PropTypes.func,
    nextStep: PropTypes.func,
    toStep: PropTypes.func,
    resetToStep: PropTypes.func
}, _class.defaultProps = {
    ready: null,
    notComplete: null,
    children: null,
    style: null,
    contentStyle: null,
    title: null,
    description: null
}, _temp);
export { SetupWizard as default };