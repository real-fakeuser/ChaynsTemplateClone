var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import assign from 'object-assign';

var TextArea = (_temp2 = _class = function (_Component) {
    _inherits(TextArea, _Component);

    function TextArea() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, TextArea);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function () {
            var _this$props = _this.props,
                onChange = _this$props.onChange,
                autogrow = _this$props.autogrow;


            if (onChange) {
                onChange(_this._node.value);
            }

            if (autogrow) {
                if (_this._node.value === '') {
                    _this.grow(_this.initialHeight);
                } else {
                    _this.grow('0');
                }
            }
        }, _this.onBlur = function () {
            var onBlur = _this.props.onBlur;


            if (onBlur) {
                onBlur(_this._node.value); // TODO: Get data from event
            }
        }, _this.ref = function (node) {
            var reference = _this.props.reference;


            _this._node = node;

            if (reference) {
                reference(node);
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(TextArea, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                required = _props.required,
                autogrow = _props.autogrow;


            if (required) {
                this._node.setAttribute('required', '');
            }

            this._node.setAttribute('row', '1');
            this._node.style.overflow = 'hidden';

            if (autogrow) {
                this.offset = this._node.offsetHeight - this._node.clientHeight;

                this.initialHeight = '0px';

                this.grow('0');
            }
        }
    }, {
        key: 'grow',
        value: function grow(initHeight) {
            if (initHeight) {
                this._node.style.height = initHeight;
            }

            if (this._node.scrollHeight + this.offset > 0) {
                this._node.style.height = this._node.scrollHeight + this.offset + 'px';
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                styleProp = _props2.style,
                className = _props2.className,
                placeholder = _props2.placeholder,
                defaultValue = _props2.defaultValue,
                onChange = _props2.onChange,
                autogrow = _props2.autogrow,
                onBlur = _props2.onBlur,
                onKeyUp = _props2.onKeyUp,
                onKeyDown = _props2.onKeyDown,
                value = _props2.value;


            var style = assign({}, this.defaultStyle, styleProp);

            var classNames = classnames('input', className);

            return React.createElement('textarea', {
                className: classNames,
                ref: this.ref,
                placeholder: placeholder,
                style: style,
                defaultValue: defaultValue,
                onChange: onChange || autogrow ? this.onChange : null,
                onBlur: onBlur ? this.onBlur : null,
                onKeyUp: onKeyUp,
                onKeyDown: onKeyDown,
                value: value
            });
        }
    }]);

    return TextArea;
}(Component), _class.defaultStyle = {
    width: '100%',
    paddingBottom: '12px'
}, _class.defaultProps = {
    style: null,
    className: null,
    placeholder: null,
    required: null,
    onChange: null,
    onBlur: null,
    defaultValue: undefined,
    value: undefined,
    onKeyUp: null,
    onKeyDown: null,
    autogrow: null,
    reference: null
}, _temp2);
export { TextArea as default };