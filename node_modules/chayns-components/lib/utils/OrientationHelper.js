var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ORIENTATION_PORTRAIT = 0;
var ORIENTATION_LANDSCAPE = 1;

var HTML = document.documentElement;

var OrientationHelper = function () {
    function OrientationHelper() {
        var _this = this;

        _classCallCheck(this, OrientationHelper);

        this.update = function () {
            var orientation = _this.getOrientation();

            if (orientation === ORIENTATION_LANDSCAPE) {
                HTML.classList.add('chayns--landscape');
                HTML.classList.remove('chayns--portrait');
            } else {
                HTML.classList.add('chayns--portrait');
                HTML.classList.remove('chayns--landscape');
            }
        };

        if (chayns.env.isMobile || chayns.env.isApp) {
            window.addEventListener('orientationchange', this.update);
            this.update();
        }
    }

    // eslint-disable-next-line class-methods-use-this


    _createClass(OrientationHelper, [{
        key: 'getOrientation',
        value: function getOrientation() {
            if (window.screen && window.screen.orientation && (window.screen.orientation.angle || window.screen.orientation.angle === 0)) {
                var angle = window.screen.orientation.angle % 360;

                if (angle === 90 || angle === 270 || angle === -90) {
                    return ORIENTATION_LANDSCAPE;
                }

                return ORIENTATION_PORTRAIT;
            }

            if (window.orientation || window.orientation === 0) {
                return window.orientation === -90 || window.orientation === 90 ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT;
            }

            if (window.innerHeight > window.innerWidth) {
                return ORIENTATION_LANDSCAPE;
            }

            return ORIENTATION_PORTRAIT;
        }
    }]);

    return OrientationHelper;
}();

export default new OrientationHelper();