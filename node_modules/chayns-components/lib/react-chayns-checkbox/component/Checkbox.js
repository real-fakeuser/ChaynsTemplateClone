var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/label-has-associated-control */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

var Checkbox = (_temp = _class = function (_Component) {
    _inherits(Checkbox, _Component);

    function Checkbox() {
        _classCallCheck(this, Checkbox);

        var _this = _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this));

        _this.onChange = function () {
            var _this$props = _this.props,
                onChange = _this$props.onChange,
                disabled = _this$props.disabled;


            if (!disabled && onChange) {
                onChange(_this._node.checked);
            }
        };

        _this.id = Math.random();
        return _this;
    }

    _createClass(Checkbox, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var tooltip = this.props.tooltip;


            if (tooltip) {
                this._container.setAttribute('tooltip', tooltip);
                window.chayns.ui.tooltip.init(null, this._container.parentNode);
            }
        }
    }, {
        key: 'renderCheckbox',
        value: function renderCheckbox(classNames) {
            var _this2 = this;

            var _props = this.props,
                style = _props.style,
                disabled = _props.disabled,
                children = _props.children,
                label = _props.label,
                checked = _props.checked,
                defaultChecked = _props.defaultChecked,
                dangerouslySetLabel = _props.dangerouslySetLabel;


            return React.createElement(
                'div',
                {
                    style: style,
                    className: classNames,
                    ref: function ref(_ref2) {
                        _this2._container = _ref2;
                    }
                },
                React.createElement('input', {
                    type: 'checkbox',
                    className: 'checkbox',
                    ref: function ref(_ref) {
                        _this2._node = _ref;
                    },
                    onChange: this.onChange,
                    id: this.id,
                    disabled: disabled,
                    checked: checked,
                    defaultChecked: defaultChecked
                }),
                React.createElement(
                    'label',
                    {
                        htmlFor: this.id,
                        dangerouslySetInnerHTML: dangerouslySetLabel
                    },
                    !dangerouslySetLabel ? children || label || '' : null
                )
            );
        }
    }, {
        key: 'renderToggleButton',
        value: function renderToggleButton(classNames) {
            var _this3 = this;

            var _props2 = this.props,
                style = _props2.style,
                disabled = _props2.disabled,
                children = _props2.children,
                label = _props2.label,
                checked = _props2.checked,
                defaultChecked = _props2.defaultChecked;


            return React.createElement(
                'div',
                {
                    style: style,
                    className: classNames,
                    ref: function ref(_ref4) {
                        _this3._container = _ref4;
                    }
                },
                React.createElement('input', {
                    type: 'checkbox',
                    className: 'switch',
                    ref: function ref(_ref3) {
                        _this3._node = _ref3;
                    },
                    onChange: this.onChange,
                    id: this.id,
                    disabled: disabled,
                    checked: checked,
                    defaultChecked: defaultChecked
                }),
                React.createElement('label', {
                    htmlFor: this.id,
                    style: label ? { marginRight: '10px' } : null
                }),
                children || label || ''
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                className = _props3.className,
                toggleButton = _props3.toggleButton;

            var classNames = classnames(_defineProperty({}, className, className));

            return toggleButton ? this.renderToggleButton(classNames) : this.renderCheckbox(classNames);
        }
    }]);

    return Checkbox;
}(Component), _class.defaultProps = {
    style: null,
    className: null,
    label: null,
    children: null,
    onChange: null,
    toggleButton: false,
    checked: undefined,
    defaultChecked: undefined,
    disabled: false,
    tooltip: null,
    dangerouslySetLabel: null
}, _temp);
export { Checkbox as default };