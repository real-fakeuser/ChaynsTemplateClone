var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/click-events-have-key-events */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

var SelectButton = (_temp = _class = function (_Component) {
    _inherits(SelectButton, _Component);

    function SelectButton(props) {
        _classCallCheck(this, SelectButton);

        var _this = _possibleConstructorReturn(this, (SelectButton.__proto__ || Object.getPrototypeOf(SelectButton)).call(this, props));

        _this.state = {
            // eslint-disable-next-line react/no-unused-state
            selected: []
        };

        _this.onClick = _this.onClick.bind(_this);
        _this.onSelect = _this.onSelect.bind(_this);
        return _this;
    }

    _createClass(SelectButton, [{
        key: 'onSelect',
        value: function onSelect(selected) {
            var onSelect = this.props.onSelect;
            var selection = selected.selection;


            if (selection.length === 1) {
                this.setLabel(selection[0].name);
            }

            if (onSelect) {
                onSelect(this.getReturnList(selected));
            }
        }
    }, {
        key: 'onClick',
        value: function onClick() {
            var _this2 = this;

            var _props = this.props,
                quickFind = _props.quickFind,
                multiSelect = _props.multiSelect,
                title = _props.title,
                description = _props.description,
                list = _props.list,
                listKey = _props.listKey,
                listValue = _props.listValue;

            var _list = SelectButton.getDialogList(list, listKey, listValue);

            chayns.dialog.select({
                title: title,
                message: description,
                quickfind: quickFind,
                multiselect: multiSelect,
                list: _list
            }).then(function (selected) {
                _this2.onSelect(selected);
            }).catch(function (e) {
                console.error(e);
            });
        }
    }, {
        key: 'getReturnList',
        value: function getReturnList(selected) {
            var _props2 = this.props,
                list = _props2.list,
                listKey = _props2.listKey;
            var buttonType = selected.buttonType,
                selectedItems = selected.selection;

            var result = [];

            selectedItems.map(function (item) {
                list.map(function (listItem) {
                    if (listItem[listKey] === item.value) result.push(listItem);
                });
            });
            return { buttonType: buttonType, selection: result };
        }
    }, {
        key: 'setLabel',
        value: function setLabel(text) {
            var showSelection = this.props.showSelection;


            if (showSelection) {
                this._btn.innerText = text;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props3 = this.props,
                className = _props3.className,
                label = _props3.label;

            var classNames = classnames(_defineProperty({
                choosebutton: true
            }, className, className));

            return React.createElement(
                'div',
                {
                    className: classNames,
                    onClick: this.onClick,
                    ref: function ref(_ref) {
                        _this3._btn = _ref;
                    }
                },
                label
            );
        }
    }], [{
        key: 'getDialogList',
        value: function getDialogList(_list, listKey, listValue) {
            var list = [];

            if (_list) {
                _list.map(function (item, i) {
                    var curListKey = listKey || i;
                    if (item[curListKey] && item[listValue]) {
                        list.push({ name: item[listValue], value: item[curListKey], isSelected: !!item.isSelected });
                    }
                });
            }

            return list;
        }
    }]);

    return SelectButton;
}(Component), _class.defaultProps = {
    quickFind: false,
    multiSelect: false,
    title: 'Select Dialog',
    description: 'Please select an item',
    label: 'Select',
    showSelection: true,
    className: null,
    onSelect: null
}, _temp);
export { SelectButton as default };