var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var loaded = [];

var Loader = function () {
    function Loader() {
        _classCallCheck(this, Loader);
    }

    _createClass(Loader, null, [{
        key: 'loadScript',
        value: function loadScript(url) {
            if (loaded.indexOf(url) !== -1) return Promise.resolve();

            var head = Loader.getHead();
            var tag = Loader.getScriptTag(url);

            var retval = Loader.registerLoaders(tag).then(function () {
                loaded.push(url);
            });

            head.appendChild(tag);

            return retval;
        }
    }, {
        key: 'getHead',
        value: function getHead() {
            return document.getElementsByTagName('head')[0];
        }
    }, {
        key: 'getScriptTag',
        value: function getScriptTag(url) {
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = url;

            return script;
        }
    }, {
        key: 'registerLoaders',
        value: function registerLoaders(tag) {
            var scriptTag = tag;

            return new Promise(function (resolve) {
                scriptTag.onload = resolve;

                function ieLoadBugFix(scriptElement) {
                    if (scriptElement.readyState === 'loaded' || scriptElement.readyState === 'completed') {
                        resolve();
                    } else {
                        setTimeout(function () {
                            ieLoadBugFix(scriptElement);
                        }, 100);
                    }
                }

                // for IE Browsers
                ieLoadBugFix(scriptTag);
            });
        }
    }]);

    return Loader;
}();

export { Loader as default };