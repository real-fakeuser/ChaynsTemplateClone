var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import * as equalizer from '../../utils/equalizer';
import ChooseButton from '../../react-chayns-button/component/ChooseButton';
import Input from '../../react-chayns-input/component/Input';

var AUTO_HIDE_INPUT_MAX_AMOUNT = 9;

var AmountInput = (_temp = _class = function (_Component) {
    _inherits(AmountInput, _Component);

    function AmountInput() {
        _classCallCheck(this, AmountInput);

        var _this = _possibleConstructorReturn(this, (AmountInput.__proto__ || Object.getPrototypeOf(AmountInput)).call(this));

        _this.onButtonClick = function () {
            var _this$props = _this.props,
                amount = _this$props.amount,
                onAdd = _this$props.onAdd;


            if (amount > 0) {
                _this.setState({
                    showInput: true
                });
            } else {
                onAdd();
            }
        };

        _this.onInputChange = function (value) {
            var inputValue = value.replace(/[\D\s]+/g, '');
            inputValue = parseInt(inputValue, 10);

            if (!window.chayns.utils.isNumber(inputValue)) {
                inputValue = null;
            }

            _this.setState({
                value: inputValue
            });

            var onInput = _this.props.onInput;


            if (onInput) {
                onInput(inputValue);
            }
        };

        _this.onInputBlur = function () {
            var onChange = _this.props.onChange;
            var value = _this.state.value;


            if (onChange) {
                onChange(value);
            }

            _this.setState({
                showInput: false
            });
        };

        _this.state = {
            showInput: false
        };
        return _this;
    }

    _createClass(AmountInput, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var amount = this.props.amount;


            if (window.chayns.utils.isNumber(amount)) {
                this.setState({
                    value: amount
                });
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var equalize = this.props.equalize;


            if (equalize) {
                equalizer.init();
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var amount = this.props.amount;
            var value = this.state.value;


            if (nextProps.amount !== amount && value !== nextProps.amount) {
                this.setState({
                    value: nextProps.amount
                });
            }

            if (nextProps.equalize) {
                equalizer.init();
            }
        }
    }, {
        key: 'getButtonValue',
        value: function getButtonValue() {
            var _props = this.props,
                amount = _props.amount,
                buttonText = _props.buttonText,
                buttonFormatHandler = _props.buttonFormatHandler;


            if (buttonFormatHandler) {
                return buttonFormatHandler({ amount: amount, buttonText: buttonText });
            }

            if (amount > 0) {
                return '' + amount;
            }

            return buttonText;
        }
    }, {
        key: 'getInputValue',
        value: function getInputValue() {
            var amount = this.props.amount;
            var inputValue = this.state.value;


            if (inputValue || inputValue === 0 || inputValue === '') {
                return inputValue;
            }

            if (window.chayns.utils.isNumber(amount) && parseInt(amount, 10) !== 0) {
                return amount;
            }

            return '';
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                amount = _props2.amount,
                equalize = _props2.equalize,
                disabled = _props2.disabled,
                disableInput = _props2.disableInput,
                autoInput = _props2.autoInput,
                showInputProp = _props2.showInput,
                shopStyle = _props2.shopStyle;
            var showInput = this.state.showInput;


            if ((!autoInput || amount <= AUTO_HIDE_INPUT_MAX_AMOUNT) && !showInput && !showInputProp || disableInput || disabled) {
                var buttonClassName = classnames('cc__amount-control__button', {
                    'cc__amount-control__button--price': !amount,
                    'cc__amount-control__button--amount': amount
                });

                return React.createElement(
                    ChooseButton,
                    {
                        onClick: this.onButtonClick,
                        className: buttonClassName,
                        'data-cc-equalize-width': equalize,
                        disabled: disabled
                    },
                    this.getButtonValue()
                );
            }

            return React.createElement(Input, {
                type: 'number',
                value: this.getInputValue(),
                onChange: this.onInputChange,
                className: 'cc__amount-control__input',
                onBlur: this.onInputBlur,
                'data-cc-equalize-width': equalize,
                disabled: disabled,
                autoFocus: !shopStyle && window.chayns.env.isDesktop
            });
        }
    }]);

    return AmountInput;
}(Component), _class.defaultProps = {
    equalize: null,
    disabled: false,
    disableInput: false,
    autoInput: false,
    shopStyle: false,
    buttonFormatHandler: undefined
}, _temp);
export { AmountInput as default };