var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import ControlButton from './ControlButton';
import AmountInput from './AmountInput';

var AmountControl = (_temp = _class = function (_Component) {
    _inherits(AmountControl, _Component);

    function AmountControl() {
        _classCallCheck(this, AmountControl);

        var _this = _possibleConstructorReturn(this, (AmountControl.__proto__ || Object.getPrototypeOf(AmountControl)).call(this));

        _this.onInput = function (value) {
            _this.setState({
                tempValue: value
            });

            var onInput = _this.props.onInput;


            if (onInput && (value || value === 0)) {
                onInput(value);
            }
        };

        _this.addItem = function () {
            var _this$props = _this.props,
                amount = _this$props.amount,
                onAdd = _this$props.onAdd;


            if (onAdd) onAdd();

            _this.changeAmount(amount + 1);
        };

        _this.removeItem = function () {
            var _this$props2 = _this.props,
                amount = _this$props2.amount,
                onRemove = _this$props2.onRemove;


            if (onRemove) onRemove();

            if (amount - 1 >= 0) {
                _this.changeAmount(amount - 1);
            }
        };

        _this.changeAmount = function (amount) {
            var _this$props3 = _this.props,
                onChange = _this$props3.onChange,
                onInput = _this$props3.onInput;


            if (onChange) {
                onChange(amount);
            }

            if (onInput) {
                onInput(amount);
            }
        };

        _this.state = {
            tempValue: null
        };
        return _this;
    }

    _createClass(AmountControl, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps() {
            this.setState({
                tempValue: null
            });
        }
    }, {
        key: 'getRemoveIcon',
        value: function getRemoveIcon() {
            var amount = this.props.amount;
            var tempValue = this.state.tempValue;


            if (amount > 1 && tempValue > 1) {
                return 'fa-minus';
            }

            if (tempValue > 1) {
                return 'fa-minus';
            }

            if (amount > 1 && tempValue === null) {
                return 'fa-minus';
            }

            return 'fa-trash fa-2x';
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                amount = _props.amount,
                buttonText = _props.buttonText,
                equalize = _props.equalize,
                disabled = _props.disabled,
                disableInput = _props.disableInput,
                disableAdd = _props.disableAdd,
                disableRemove = _props.disableRemove,
                className = _props.className,
                autoInput = _props.autoInput,
                buttonFormatHandler = _props.buttonFormatHandler,
                showInput = _props.showInput,
                shopStyle = _props.shopStyle;


            if (window.debugLevel >= 3) {
                console.debug('render amount-control component', this.props, this.state);
            }

            var classNames = classnames('cc__amount-control', _defineProperty({
                'cc__amount-control--active': amount > 0,
                'cc__amount-control--shop': shopStyle
            }, className, className));

            return React.createElement(
                'div',
                {
                    className: classNames,
                    ref: function ref(node) {
                        _this2.node = node;
                    }
                },
                React.createElement(ControlButton, {
                    icon: this.getRemoveIcon(),
                    onClick: this.removeItem,
                    disabled: disabled || disableRemove,
                    className: 'cc__amount-control__remove'
                }),
                React.createElement(AmountInput, {
                    autoInput: autoInput,
                    amount: amount,
                    onChange: this.changeAmount,
                    onInput: this.onInput,
                    onAdd: this.addItem,
                    buttonText: buttonText,
                    disabled: disabled,
                    disableInput: disableInput,
                    equalize: equalize,
                    buttonFormatHandler: buttonFormatHandler,
                    showInput: !!showInput,
                    shopStyle: shopStyle
                }),
                React.createElement(ControlButton, {
                    icon: 'fa-plus',
                    onClick: this.addItem,
                    disabled: disabled || disableAdd,
                    className: 'cc__amount-control__add'
                })
            );
        }
    }]);

    return AmountControl;
}(Component), _class.defaultProps = {
    amount: 0,
    onChange: null,
    onInput: null,
    onAdd: null,
    onRemove: null,
    equalize: null,
    disabled: false,
    disableInput: false,
    disableAdd: false,
    disableRemove: false,
    className: '',
    autoInput: false,
    buttonFormatHandler: undefined,
    showInput: false,
    shopStyle: false
}, _temp);
export { AmountControl as default };