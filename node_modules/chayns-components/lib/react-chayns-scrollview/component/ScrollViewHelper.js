var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var lastPageY = void 0;

var requestAnimationFrameFallback = window.requestAnimationFrame.bind(window) || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (c) {
    return setTimeout(c, 0);
};

var ScrollViewHelper = function () {
    function ScrollViewHelper(el, _ref) {
        var wrapper = _ref.wrapper,
            content = _ref.content,
            bar = _ref.bar;

        _classCallCheck(this, ScrollViewHelper);

        this.target = el;
        this.bar = bar;
        this.wrapper = wrapper;
        this.content = content;

        this.direction = window.getComputedStyle(this.target).direction;

        if (this.direction === 'rtl') {
            this.content.classList.add('rtl');
        }

        this.dragDealer(this.bar);
        this.refresh();

        if (!chayns.env.isMobile) {
            this.content.addEventListener('scroll', this.moveBar.bind(this));
            this.content.addEventListener('mouseenter', this.moveBar.bind(this));
        }
    }

    _createClass(ScrollViewHelper, [{
        key: 'dragDealer',
        value: function dragDealer() {
            var _this = this;

            var drag = function drag(e) {
                var delta = e.pageY - lastPageY;
                lastPageY = e.pageY;

                requestAnimationFrameFallback(function () {
                    _this.content.scrollTop += delta / _this.scrollRatio;
                });
            };

            var stop = function stop() {
                _this.target.classList.remove('cc__scroll-view--grabbed');
                document.removeEventListener('mousemove', drag);
                document.removeEventListener('mouseup', stop);
            };

            this.bar.addEventListener('mousedown', function (e) {
                lastPageY = e.pageY;

                _this.target.classList.add('cc__scroll-view--grabbed');

                document.addEventListener('mousemove', drag);
                document.addEventListener('mouseup', stop);

                return false;
            });
        }
    }, {
        key: 'moveBar',
        value: function moveBar() {
            var _this2 = this;

            requestAnimationFrameFallback(function () {
                var totalHeight = _this2.content.scrollHeight;

                var _content$getBoundingC = _this2.content.getBoundingClientRect(),
                    height = _content$getBoundingC.height;

                var ownHeight = Math.ceil(height);

                _this2.scrollRatio = ownHeight / totalHeight;

                var right = (_this2.target.clientWidth - _this2.bar.clientWidth) * -1;

                if (_this2.scrollRatio >= 1) {
                    _this2.target.classList.add('cc__scroll-view--hidden');
                } else {
                    _this2.target.classList.remove('cc__scroll-view--hidden');

                    _this2.bar.style.height = Math.max(_this2.scrollRatio, 0.1) * ownHeight + 'px';
                    _this2.bar.style.top = _this2.content.scrollTop / totalHeight * ownHeight + 'px';
                    _this2.bar.style.right = right + 'px';
                }
            });
        }
    }, {
        key: 'refresh',
        value: function refresh() {
            this.moveBar();
        }
    }]);

    return ScrollViewHelper;
}();

export { ScrollViewHelper as default };