var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import ScrollViewHelper from './ScrollViewHelper';

var ScrollView = (_temp = _class = function (_Component) {
    _inherits(ScrollView, _Component);

    function ScrollView() {
        _classCallCheck(this, ScrollView);

        return _possibleConstructorReturn(this, (ScrollView.__proto__ || Object.getPrototypeOf(ScrollView)).apply(this, arguments));
    }

    _createClass(ScrollView, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.scrollView = new ScrollViewHelper(this.node, {
                wrapper: this.wrapper,
                content: this.content,
                bar: this.bar
            });
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            if (this.scrollView) {
                this.scrollView.refresh();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                style = _props.style,
                showScrollbar = _props.showScrollbar,
                className = _props.className,
                children = _props.children;


            var classNames = classnames('cc__scroll-view', _defineProperty({
                'cc__scroll-view--hide': !showScrollbar,
                'cc__scroll-view--mobile': chayns.env.isMobile
            }, className, className));

            return React.createElement(
                'div',
                {
                    ref: function ref(_ref4) {
                        _this2.node = _ref4;
                    },
                    style: style,
                    className: classNames
                },
                React.createElement(
                    'div',
                    {
                        className: 'cc__scroll-view__wrapper',
                        ref: function ref(_ref2) {
                            _this2.wrapper = _ref2;
                        }
                    },
                    React.createElement(
                        'div',
                        {
                            style: {
                                maxHeight: style && style.maxHeight ? style.maxHeight : undefined,
                                height: style && style.height ? style.height : undefined,
                                overflowY: 'scroll'
                            },
                            className: 'cc__scroll-view__content',
                            ref: function ref(_ref) {
                                _this2.content = _ref;
                            }
                        },
                        children
                    )
                ),
                React.createElement('div', {
                    className: 'cc__scroll-view__scrollbar',
                    ref: function ref(_ref3) {
                        _this2.bar = _ref3;
                    }
                })
            );
        }
    }]);

    return ScrollView;
}(Component), _class.defaultProps = {
    children: null,
    style: undefined,
    className: undefined,
    showScrollbar: false
}, _temp);
export { ScrollView as default };