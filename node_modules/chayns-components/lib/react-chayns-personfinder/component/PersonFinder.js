var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import assign from 'object-assign';

var PersonFinder = (_temp2 = _class = function (_Component) {
    _inherits(PersonFinder, _Component);

    function PersonFinder() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, PersonFinder);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PersonFinder.__proto__ || Object.getPrototypeOf(PersonFinder)).call.apply(_ref, [this].concat(args))), _this), _this.reference = function (node) {
            var reference = _this.props.reference;


            _this._node = node;

            if (reference) {
                reference(node);
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(PersonFinder, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var _props = this.props,
                onChange = _props.onChange,
                required = _props.required;


            this._node.setAttribute('finder', 'person');

            this._node.addEventListener('finderChange', function (data) {
                var user = data.user;

                onChange({ user: user, node: _this2._node });
            });

            if (required) {
                this._node.setAttribute('required', '');
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                styleProp = _props2.style,
                className = _props2.className,
                placeholder = _props2.placeholder,
                defaultValue = _props2.defaultValue;


            var style = assign({}, styleProp);

            var classNames = classnames(_defineProperty({
                input: true
            }, className, className));

            return React.createElement('input', {
                type: 'text',
                className: classNames,
                ref: function ref(node) {
                    return _this3.reference(node);
                },
                placeholder: placeholder || '',
                defaultValue: defaultValue,
                style: style
            });
        }
    }]);

    return PersonFinder;
}(Component), _class.defaultProps = {
    style: null,
    className: null,
    placeholder: null,
    required: null,
    reference: null,
    defaultValue: null,
    onChange: null
}, _temp2);
export { PersonFinder as default };