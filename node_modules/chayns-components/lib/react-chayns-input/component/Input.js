var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/label-has-associated-control */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

var Input = (_temp = _class = function (_Component) {
    _inherits(Input, _Component);

    function Input(props) {
        _classCallCheck(this, Input);

        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this));

        _this.onBlur = function () {
            return _this.handleEvent(_this.props.onBlur, true);
        };

        _this.onKeyUp = function () {
            return _this.handleEvent(_this.props.onKeyUp);
        };

        _this.onChange = function () {
            return _this.handleEvent(_this.props.onChange);
        };

        _this.handleEvent = function (callback) {
            var doInvalidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var isValid = _this.validateInput(doInvalidate);

            if (callback) {
                if (isValid) {
                    callback(_this._node.value);
                } else {
                    callback(null);
                }
            }
        };

        var defaultValue = props.defaultValue,
            value = props.value,
            regExp = props.regExp;


        var testValue = value || defaultValue;

        _this.state = {
            isValid: regExp && (testValue ? testValue.match(new RegExp(regExp)) : true)
        };
        return _this;
    }

    // eslint-disable-next-line react/destructuring-assignment


    /**
     * @deprecated
     */
    // eslint-disable-next-line react/destructuring-assignment


    // eslint-disable-next-line react/destructuring-assignment


    _createClass(Input, [{
        key: 'validateInput',
        value: function validateInput() {
            var doInvalidate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var regExp = this.props.regExp;

            var isValid = !regExp || regExp && this._node.value.match(new RegExp(regExp));

            if (isValid || doInvalidate) {
                this.setState({
                    isValid: isValid
                });
            }

            return isValid;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                type = _props.type,
                value = _props.value,
                defaultValue = _props.defaultValue,
                placeholder = _props.placeholder,
                className = _props.className,
                style = _props.style,
                responsive = _props.responsive,
                regExp = _props.regExp,
                inputRef = _props.inputRef,
                onChange = _props.onChange,
                onBlur = _props.onBlur,
                onKeyUp = _props.onKeyUp,
                invalid = _props.invalid,
                other = _objectWithoutProperties(_props, ['type', 'value', 'defaultValue', 'placeholder', 'className', 'style', 'responsive', 'regExp', 'inputRef', 'onChange', 'onBlur', 'onKeyUp', 'invalid']);

            var isValid = this.state.isValid;


            var classNames = classnames(_defineProperty({
                'input-group': responsive,
                input: !responsive
            }, className, className));

            var inputStyles = invalid || regExp && !isValid ? {
                color: '#d23f31',
                fontWeight: '700'
            } : null;

            var responsiveInput = function responsiveInput() {
                return React.createElement(
                    'div',
                    {
                        className: classNames,
                        style: style
                    },
                    React.createElement('input', _extends({
                        style: inputStyles,
                        ref: function ref(_ref) {
                            if (inputRef) inputRef(_ref);
                            _this2._node = _ref;
                        },
                        value: value,
                        defaultValue: defaultValue,
                        onKeyUp: _this2.onKeyUp,
                        onChange: _this2.onChange,
                        onBlur: _this2.onBlur,
                        className: 'input',
                        type: type || 'text',
                        required: true
                    }, other)),
                    React.createElement(
                        'label',
                        null,
                        placeholder
                    )
                );
            };

            var input = function input() {
                return React.createElement('input', _extends({
                    className: classNames,
                    ref: function ref(_ref2) {
                        if (inputRef) inputRef(_ref2);
                        _this2._node = _ref2;
                    },
                    value: value,
                    defaultValue: defaultValue,
                    placeholder: placeholder,
                    style: _extends({}, style, inputStyles),
                    onKeyUp: _this2.onKeyUp,
                    onChange: _this2.onChange,
                    onBlur: _this2.onBlur,
                    type: type || 'text',
                    required: true
                }, other));
            };

            return responsive ? responsiveInput() : input();
        }
    }]);

    return Input;
}(Component), _class.defaultProps = {
    style: {},
    responsive: false,
    className: null,
    value: undefined,
    defaultValue: undefined,
    placeholder: null,
    onKeyUp: null,
    onChange: null,
    onBlur: null,
    regExp: null,
    inputRef: null,
    type: 'text',
    invalid: false
}, _temp);
export { Input as default };