var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import requestAnimationFrame from '../../utils/requestAnimationFrame';

var CLOSED = 5;
var CLOSE = 1;

var OPENED = 6;
var OPEN = 2;

function hasFlag(value, flag) {
    return !!(value & flag); // eslint-disable-line no-bitwise
}

var Accordion = function (_Component) {
    _inherits(Accordion, _Component);

    function Accordion(props) {
        _classCallCheck(this, Accordion);

        var _this = _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).call(this));

        _this.firstRender = true;

        _this.state = {
            currentState: props && props.defaultOpened ? OPENED : CLOSED
        };
        return _this;
    }

    _createClass(Accordion, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _props = this.props,
                open = _props.open,
                className = _props.className;


            if (open || className && className.indexOf('accordion--open') !== -1) {
                this.setState({
                    currentState: OPENED
                });
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props2 = this.props,
                className = _props2.className,
                autogrow = _props2.autogrow;
            var currentState = this.state.currentState;


            this.accordion.addEventListener('closed', this.accordionClosedListener.bind(this));
            this.accordion.addEventListener('close', this.accordionCloseListener.bind(this));
            this.accordion.addEventListener('open', this.accordionOpenListener.bind(this));
            this.accordion.addEventListener('opened', this.accordionOpenedListener.bind(this));

            if (className.indexOf('accordion--open') !== -1) {
                this.accordion.classList.add('accordion--open');
            }

            if (currentState === OPENED) {
                if (autogrow && this._body) {
                    this._body.style.setProperty('max-height', 'initial', 'important');
                }
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.open !== undefined) {
                var open = this.props.open;
                var currentState = this.state.currentState;


                if (open !== nextProps.open) {
                    this.setState({
                        currentState: nextProps.open ? OPENED : CLOSED
                    });
                }

                if (nextProps.open && !hasFlag(currentState, OPEN)) {
                    this.setState({
                        currentState: OPENED
                    });
                }

                if (!nextProps.open && !hasFlag(currentState, CLOSE)) {
                    this.setState({
                        currentState: CLOSED
                    });
                }
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var autogrow = this.props.autogrow;
            var currentState = this.state.currentState;


            if (autogrow && this._body) {
                if (currentState === OPENED) {
                    this._body.style.setProperty('max-height', 'initial', 'important');
                } else if (hasFlag(currentState, CLOSE)) {
                    this._body.style.maxHeight = null;
                }
            }
        }
    }, {
        key: '_getBody',
        value: function _getBody() {
            var _props3 = this.props,
                renderClosed = _props3.renderClosed,
                children = _props3.children;
            var currentState = this.state.currentState;


            if (hasFlag(currentState, OPEN) || currentState === CLOSE || renderClosed) {
                return children;
            }

            return null;
        }
    }, {
        key: '_renderHead',
        value: function _renderHead() {
            var _props4 = this.props,
                badge = _props4.badge,
                badgeStyle = _props4.badgeStyle,
                right = _props4.right,
                head = _props4.head;


            if (!badge && !right) {
                return head;
            }

            return [React.createElement(
                'span',
                {
                    key: 'head',
                    className: 'accordion--trigger'
                },
                head
            ), React.createElement(
                'div',
                {
                    key: 'right',
                    className: 'right',
                    style: {
                        display: 'flex',
                        flexDirection: 'row'
                    }
                },
                right,
                badge && React.createElement(
                    'div',
                    {
                        key: 'badge',
                        className: 'badge accordion--trigger',
                        style: badgeStyle
                    },
                    badge
                )
            )];
        }
    }, {
        key: 'accordionClosedListener',
        value: function accordionClosedListener(event) {
            var onClosed = this.props.onClosed;


            this.setState({
                currentState: CLOSED
            });

            if (onClosed) {
                onClosed(event);
            }
        }
    }, {
        key: 'accordionCloseListener',
        value: function accordionCloseListener(event) {
            var _this2 = this;

            var _props5 = this.props,
                onClose = _props5.onClose,
                autogrow = _props5.autogrow;


            if (autogrow && this._body) {
                this._body.style.setProperty('max-height', '9999px', 'important');
            }

            requestAnimationFrame(function () {
                _this2.setState({
                    currentState: CLOSE
                });

                _this2._body.style.removeProperty('max-height');
            });

            if (onClose) {
                onClose(event);
            }

            this.firstRender = false;
        }
    }, {
        key: 'accordionOpenListener',
        value: function accordionOpenListener(event) {
            var onOpen = this.props.onOpen;


            this.setState({
                currentState: OPEN
            });

            if (onOpen) {
                onOpen(event);
            }
        }
    }, {
        key: 'accordionOpenedListener',
        value: function accordionOpenedListener(event) {
            var onOpened = this.props.onOpened;


            this.setState({
                currentState: OPENED
            });

            if (onOpened) {
                onOpened(event);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props6 = this.props,
                dataGroup = _props6.dataGroup,
                id = _props6.id,
                style = _props6.style,
                isWrapped = _props6.isWrapped,
                className = _props6.className,
                ellipsis = _props6.ellipsis,
                styleBody = _props6.styleBody,
                reference = _props6.reference,
                open = _props6.open,
                badge = _props6.badge,
                badgeStyle = _props6.badgeStyle,
                right = _props6.right,
                head = _props6.head,
                defaultOpened = _props6.defaultOpened,
                children = _props6.children,
                autogrow = _props6.autogrow,
                renderClosed = _props6.renderClosed,
                onOpen = _props6.onOpen,
                onOpened = _props6.onOpened,
                onClose = _props6.onClose,
                onClosed = _props6.onClosed,
                customProps = _objectWithoutProperties(_props6, ['dataGroup', 'id', 'style', 'isWrapped', 'className', 'ellipsis', 'styleBody', 'reference', 'open', 'badge', 'badgeStyle', 'right', 'head', 'defaultOpened', 'children', 'autogrow', 'renderClosed', 'onOpen', 'onOpened', 'onClose', 'onClosed']);

            var currentState = this.state.currentState;


            var others = {};

            if (id !== '') {
                others.id = id;
            }

            if (style) {
                others.style = style;
            }

            var classNames = classnames(_defineProperty({
                accordion: true,
                'accordion--wrapped': isWrapped === true,
                'accordion--open': hasFlag(currentState, OPEN)
            }, className, className));

            var classNamesHead = classnames({
                accordion__head: true,
                ellipsis: ellipsis
            });

            var othersBody = {
                style: {}
            };

            if (styleBody) {
                othersBody.style = styleBody;
            }

            return React.createElement(
                'div',
                _extends({
                    className: classNames,
                    'data-group': dataGroup,
                    ref: function ref(_ref2) {
                        _this3.accordion = _ref2;
                        if (reference) reference(_ref2);
                    }
                }, others, customProps),
                React.createElement(
                    'div',
                    { className: classNamesHead },
                    this._renderHead()
                ),
                React.createElement(
                    'div',
                    _extends({
                        className: 'accordion__body',
                        ref: function ref(_ref) {
                            _this3._body = _ref;
                        }
                    }, othersBody),
                    this._getBody()
                )
            );
        }
    }]);

    return Accordion;
}(Component);

Accordion.defaultProps = {
    className: '',
    dataGroup: null,
    id: null,
    style: null,
    styleBody: null,
    onOpen: null,
    onOpened: null,
    onClose: null,
    onClosed: null,
    ellipsis: false,
    defaultOpened: null,
    reference: null,
    isWrapped: false,
    renderClosed: false,
    badge: null,
    right: null,
    autogrow: false,
    badgeStyle: null,
    open: undefined
};

export default Accordion;