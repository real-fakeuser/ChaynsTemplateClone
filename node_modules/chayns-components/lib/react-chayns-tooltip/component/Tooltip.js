var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

var Tooltip = (_temp = _class = function (_Component) {
    _inherits(Tooltip, _Component);

    function Tooltip() {
        _classCallCheck(this, Tooltip);

        var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this));

        _this.state = {
            active: false,
            removed: true
        };

        _this.show = _this.show.bind(_this);
        _this.hide = _this.hide.bind(_this);
        return _this;
    }

    _createClass(Tooltip, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var bindListeners = this.props.bindListeners;


            if (bindListeners) {
                this.node.addEventListener('mouseover', this.show, false);
                this.node.addEventListener('mouseleave', this.hide, false);
            }

            this.show();
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.node.removeEventListener('mouseover', this.show, false);
            this.node.removeEventListener('mouseleave', this.hide, false);
        }
    }, {
        key: 'show',
        value: function show() {
            var _this2 = this;

            window.clearTimeout(this.timeout);

            this.setState({
                active: false,
                removed: false
            });

            this.timeout = window.setTimeout(function () {
                _this2.setState({
                    active: true,
                    removed: false
                });
            });
        }
    }, {
        key: 'hide',
        value: function hide() {
            var _this3 = this;

            this.setState({
                active: false,
                removed: false
            });

            this.timeout = window.setTimeout(function () {
                _this3.setState({
                    active: false,
                    removed: true
                });
            }, 500);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props = this.props,
                children = _props.children,
                text = _props.text;
            var _state = this.state,
                active = _state.active,
                removed = _state.removed;


            var className = classnames('cc__tooltip', {
                'cc__tooltip--active': active
            });

            return React.createElement(
                'div',
                {
                    className: className,
                    ref: function ref(node) {
                        _this4.node = node;
                    }
                },
                !removed && React.createElement(
                    'div',
                    {
                        className: 'cc__tooltip__overlay'
                    },
                    text
                ),
                children
            );
        }
    }]);

    return Tooltip;
}(Component), _class.defaultProps = {
    children: null,
    bindListeners: false
}, _temp);
export { Tooltip as default };