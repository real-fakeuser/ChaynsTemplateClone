var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'react';
import PropTypes from 'prop-types';

import ModeSwitchHelper from './ModeSwitchHelper';

var ModeSwitch = (_temp = _class = function (_Component) {
    _inherits(ModeSwitch, _Component);

    function ModeSwitch() {
        _classCallCheck(this, ModeSwitch);

        return _possibleConstructorReturn(this, (ModeSwitch.__proto__ || Object.getPrototypeOf(ModeSwitch)).apply(this, arguments));
    }

    _createClass(ModeSwitch, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                groups = _props.groups,
                save = _props.save,
                onChange = _props.onChange,
                defaultMode = _props.defaultMode;


            ModeSwitchHelper.init({
                groups: groups,
                save: save,
                onChange: onChange,
                defaultMode: defaultMode
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return null;
        }
    }], [{
        key: 'init',
        value: function init(config) {
            if (!config) return false;

            ModeSwitchHelper.init(config);

            return true;
        }
    }, {
        key: 'isUserInGroup',
        value: function isUserInGroup(groupId) {
            if (!window.chayns.env.user.isAuthenticated) return false;

            for (var j = 0, userGroups = window.chayns.env.user.groups, k = userGroups.length; j < k; j += 1) {
                if (groupId === userGroups[j].id) {
                    return true;
                }
            }

            return false;
        }
    }]);

    return ModeSwitch;
}(Component), _class.defaultProps = {
    groups: null,
    save: false,
    onChange: null,
    defaultMode: null
}, _temp);


ModeSwitch.getCurrentMode = ModeSwitchHelper.getCurrentMode;
ModeSwitch.addChangeListener = ModeSwitchHelper.onChange;
ModeSwitch.removeChangeListener = ModeSwitchHelper.unregisterOnChange;
ModeSwitch.show = ModeSwitchHelper.show;
ModeSwitch.hide = ModeSwitchHelper.hide;
ModeSwitch.isUserInGroup = ModeSwitchHelper.isUserInGroup;
ModeSwitch.isChaynsManager = ModeSwitchHelper.isChaynsManager;

export default ModeSwitch;