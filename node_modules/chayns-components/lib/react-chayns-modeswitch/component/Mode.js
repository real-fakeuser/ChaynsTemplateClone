var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ModeSwitchHelper from './ModeSwitchHelper';

var Mode = (_temp = _class = function (_Component) {
    _inherits(Mode, _Component);

    function Mode() {
        _classCallCheck(this, Mode);

        var _this = _possibleConstructorReturn(this, (Mode.__proto__ || Object.getPrototypeOf(Mode)).call(this));

        _this.updatedMode = function (group) {
            _this.setState({
                modeId: group.id
            });
        };

        _this.state = {
            modeId: ModeSwitchHelper.getCurrentMode().id
        };
        return _this;
    }

    _createClass(Mode, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            ModeSwitchHelper.onChange(this.updatedMode);

            this.setState({
                // eslint-disable-next-line react/no-unused-state
                group: ModeSwitchHelper.getCurrentMode().id
            });
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            ModeSwitchHelper.unregisterOnChange(this.updatedMode);
        }
    }, {
        key: 'renderChildren',
        value: function renderChildren() {
            var children = this.props.children;


            if (window.chayns.utils.isArray(children)) {
                return React.createElement(
                    'div',
                    { className: 'modeswitch__mode' },
                    children.map(function (element) {
                        return element;
                    })
                );
            }

            return children;
        }
    }, {
        key: 'render',
        value: function render() {
            var modeId = this.state.modeId;
            var _props = this.props,
                mode = _props.mode,
                modes = _props.modes,
                group = _props.group;


            if (!ModeSwitchHelper.isInitialized()) return null;

            if (window.chayns.utils.isNumber(mode) && modeId === mode) {
                return this.renderChildren();
            }

            if (window.chayns.utils.isArray(modes) && modes.indexOf(modeId) !== -1) {
                return this.renderChildren();
            }

            if (window.chayns.utils.isNumber(group) && group === modeId) {
                return this.renderChildren();
            }

            if (window.chayns.utils.isArray(group) && group.indexOf(modeId) !== -1) {
                return this.renderChildren();
            }

            return null;
        }
    }]);

    return Mode;
}(Component), _class.defaultProps = {
    group: null,
    mode: null,
    modes: null
}, _temp);
export { Mode as default };