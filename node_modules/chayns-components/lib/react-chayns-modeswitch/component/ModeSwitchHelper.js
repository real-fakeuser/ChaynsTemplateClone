var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import '../../polyfills/array-find';

var callbacks = [];
var allowedGroups = [];
var currentMode = null;
var initialized = false;
var managerItem = null;
var userItem = null;
var modeSwitchInitialized = false;

function callCallbacks(data) {
    callbacks.map(function (callback) {
        if (callback && window.chayns.utils.isFunction(callback)) {
            callback(data);
        }
    });
}

function getChangeListener() {
    return function (data) {
        callCallbacks(data);

        currentMode = data;
    };
}

function setDefaultGroup() {
    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    initialized = true;

    getChangeListener()({
        id: mode
    });

    window.chayns.ui.modeSwitch.changeMode(0);
}

function getUacIds(group) {
    var retval = [];

    if (group.uacId && window.chayns.utils.isNumber(group.uacId)) {
        retval.push(group.uacId);
    }

    if (group.uacIds && window.chayns.utils.isArray(group.uacIds)) {
        retval = retval.concat(group.uacIds);
    }

    return retval;
}

function getAllowedUacIdsFromArray(uacArray) {
    var userGroups = window.chayns.env.user.groups;

    var allowedUacIds = [];

    for (var i = 0, x = userGroups.length; i < x; i += 1) {
        if (uacArray.indexOf(userGroups[i].id) !== -1) {
            allowedUacIds.push(userGroups[i].id);
        }
    }

    return allowedUacIds;
}

function convertToGroupObject(element) {
    if (window.chayns.utils.isObject(element)) {
        return element;
    }

    return {
        id: element,
        uacIds: [element]
    };
}

function getGroupObject(id, name, uacs) {
    return {
        id: id,
        uacIds: uacs,
        name: name
    };
}

function getSavedMode() {
    return window.chayns.utils.ls.get('react__modeSwitch--currentMode');
}

function setSavedMode(mode) {
    return window.chayns.utils.ls.set('react__modeSwitch--currentMode', mode.id);
}

function getDefaultMode() {
    var name = window.chayns.env.user.isAuthenticated ? window.chayns.env.user.name : '';

    return getGroupObject(0, name, null);
}

function hasAdminSwitch() {
    return !chayns.env.isApp || chayns.env.isAndroid && chayns.env.appVersion >= 5735 || chayns.env.isIOS && chayns.env.appVersion >= 5795;
}

function addAdminSwitchListener() {
    if (!hasAdminSwitch()) {
        return;
    }

    window.chayns.setAdminSwitchCallback(function (_ref) {
        var mode = _ref.mode;

        var modeSwitchMode = null;

        if (mode === 1) {
            modeSwitchMode = managerItem;
        } else {
            modeSwitchMode = userItem;
        }

        if (modeSwitchInitialized) {
            chayns.ui.modeSwitch.updateItem(0, modeSwitchMode);

            if (currentMode.id === userItem.id || currentMode.id === managerItem.id) {
                chayns.ui.modeSwitch.changeMode(modeSwitchMode);
            }
        } else {
            getChangeListener()(modeSwitchMode);
        }
    });
}

function getPermittedGroupObject(id, name, uacIds) {
    if (!uacIds || uacIds.length === 0 || uacIds.length === 1 && uacIds[0] === 0) {
        return getGroupObject(id, name, [0]);
    }

    if (hasAdminSwitch() && managerItem && id === managerItem.id) {
        return null;
    }

    var allowedUacIds = getAllowedUacIdsFromArray(uacIds);

    if (allowedUacIds.length === 0) {
        return null;
    }

    return getGroupObject(id, name, allowedUacIds);
}

function getPreferredMode(options) {
    var savedModeId = null;

    if (options.save) {
        savedModeId = getSavedMode();
    }

    if (savedModeId === null && options.defaultMode) {
        savedModeId = options.defaultMode;
    }

    return savedModeId;
}

function setModeSwitchGroups(groups, data, preferredMode) {
    var modeSwitchItems = [];
    var isChaynsIdAdmin = false;
    // Condition if adminMode ChaynsId
    var groupObject = void 0;

    if (managerItem && data && data.AppUser.AdminMode && hasAdminSwitch()) {
        groupObject = managerItem;
        isChaynsIdAdmin = true;
    } else {
        groupObject = userItem;
    }

    modeSwitchItems.push(groupObject);

    var changeGroupIndex = 0;
    var changeGroupValue = null;

    for (var i = 0, x = groups.length; i < x; i += 1) {
        var uacIds = getUacIds(groups[i]);
        var addGroupObject = getPermittedGroupObject(groups[i].id, groups[i].name, uacIds);

        if (addGroupObject) {
            modeSwitchItems.push(addGroupObject);

            if (addGroupObject.id === preferredMode) {
                changeGroupIndex = modeSwitchItems.length - 1;
                changeGroupValue = addGroupObject;
            }
        }
    }

    if (modeSwitchItems.length > 1) {
        window.chayns.ui.modeSwitch.init({
            items: modeSwitchItems,
            callback: getChangeListener()
        });

        window.init = {
            items: modeSwitchItems,
            callback: getChangeListener()
        };

        modeSwitchInitialized = true;
        initialized = true;

        if (changeGroupIndex) {
            getChangeListener()(changeGroupValue);

            window.chayns.ui.modeSwitch.changeMode(changeGroupIndex);
        } else {
            setDefaultGroup(isChaynsIdAdmin && managerItem ? managerItem.id : 0);
        }
    } else {
        setDefaultGroup(isChaynsIdAdmin && managerItem ? managerItem.id : 0);
    }
}

var ModeSwitchHelper = function () {
    function ModeSwitchHelper() {
        _classCallCheck(this, ModeSwitchHelper);
    }

    _createClass(ModeSwitchHelper, null, [{
        key: 'init',
        value: function init(options) {
            userItem = null;
            managerItem = null;

            if (options.groups) {
                if (window.chayns.utils.isFunction(options.onChange)) {
                    callbacks.push(options.onChange);
                }

                if (options.save) {
                    callbacks.push(setSavedMode);
                }

                var preferredMode = getPreferredMode(options);

                if (options.groups) {
                    options.groups.map(function (element) {
                        var group = convertToGroupObject(element);

                        allowedGroups.push(group);
                    });
                }

                if (window.chayns.env.user.isAuthenticated) {
                    userItem = getGroupObject(0, window.chayns.env.user.name, [0]);
                    userItem.default = true;

                    var managerGroup = ModeSwitchHelper.findManagerGroup(allowedGroups);
                    if (managerGroup) {
                        var id = managerGroup.id,
                            name = managerGroup.name,
                            uacIds = managerGroup.uacIds;


                        managerItem = getGroupObject(id, name, uacIds);
                    }
                }

                chayns.ready.then(function (data) {
                    if (window.chayns.env.user.isAuthenticated) {
                        setModeSwitchGroups(allowedGroups, data, preferredMode);

                        addAdminSwitchListener();
                    } else {
                        setDefaultGroup();
                    }
                });
            } else {
                console.warn('No groups specified');
            }
        }
    }, {
        key: 'getCurrentMode',
        value: function getCurrentMode() {
            if (currentMode) return currentMode;

            return getDefaultMode();
        }
    }, {
        key: 'onChange',
        value: function onChange(callback) {
            if (window.chayns.utils.isFunction(callback)) {
                callbacks.push(callback);

                return true;
            }

            return false;
        }
    }, {
        key: 'unregisterOnChange',
        value: function unregisterOnChange(callback) {
            var index = callbacks.indexOf(callback);

            if (index > -1) {
                callbacks.splice(index, 1);
            }
        }
    }, {
        key: 'isInitialized',
        value: function isInitialized() {
            return initialized;
        }
    }, {
        key: 'hide',
        value: function hide() {
            window.chayns.ui.modeSwitch.remove();
        }
    }, {
        key: 'show',
        value: function show() {
            window.chayns.ui.modeSwitch.add();
        }
    }, {
        key: 'isUserInGroup',
        value: function isUserInGroup(uacId) {
            if (!window.chayns.env.user.isAuthenticated) return false;

            return !!window.chayns.env.user.groups.find(function (element) {
                return element.id === uacId;
            });
        }
    }, {
        key: 'findManagerGroup',
        value: function findManagerGroup(groups) {
            if (!window.chayns.env.user.isAuthenticated) return false;

            return groups.find(function (uac) {
                return uac.uacIds && uac.uacIds.length === 1 && uac.uacIds[0] === 1;
            }) || groups.find(function (uac) {
                return uac.uacIds && uac.uacIds.find(function (id) {
                    return id === 1;
                });
            });
        }
    }, {
        key: 'isChaynsManager',
        value: function isChaynsManager() {
            return this.isUserInGroup(1);
        }
    }]);

    return ModeSwitchHelper;
}();

export { ModeSwitchHelper as default };