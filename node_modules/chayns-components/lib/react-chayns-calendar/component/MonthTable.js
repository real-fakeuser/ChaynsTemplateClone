var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable react/no-array-index-key */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import DayItem from './DayItem';

var DAYS = ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'];

var MonthTable = (_temp = _class = function (_Component) {
    _inherits(MonthTable, _Component);

    function MonthTable() {
        _classCallCheck(this, MonthTable);

        return _possibleConstructorReturn(this, (MonthTable.__proto__ || Object.getPrototypeOf(MonthTable)).apply(this, arguments));
    }

    _createClass(MonthTable, [{
        key: 'createTable',
        value: function createTable() {
            var startDate = this.props.startDate;


            var _table = [];
            var normalWeekStart = void 0;

            if (startDate.getDay() > 0) {
                normalWeekStart = new Date(startDate.getFullYear(), startDate.getMonth(), 9 - startDate.getDay());
            } else {
                normalWeekStart = new Date(startDate.getFullYear(), startDate.getMonth(), 2 - startDate.getDay());
            }

            for (var i = 0; i < 6; i += 1) {
                var _row = [];

                if (i === 0) {
                    if (startDate.getDay() > 0) {
                        for (var j = 2; j <= startDate.getDay(); j += 1) {
                            _row.push({
                                date: new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDay() * -1 + j),
                                inMonth: false
                            });
                        }
                        for (var k = 1; k <= 8 - startDate.getDay(); k += 1) {
                            _row.push({
                                date: new Date(startDate.getFullYear(), startDate.getMonth(), k),
                                inMonth: true
                            });
                        }
                    } else {
                        for (var _j = 6; _j > 0; _j -= 1) {
                            _row.push({
                                date: new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDay() - _j),
                                inMonth: false
                            });
                        }

                        _row.push({
                            date: new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate()),
                            inMonth: true
                        });
                    }
                } else {
                    for (var _j2 = 0; _j2 < 7; _j2 += 1) {
                        var _date = new Date(normalWeekStart.getFullYear(), normalWeekStart.getMonth(), normalWeekStart.getDate() + _j2);
                        if (_date.getMonth() === startDate.getMonth()) {
                            _row.push({
                                date: _date,
                                inMonth: true
                            });
                        } else {
                            _row.push({
                                date: _date,
                                inMonth: false
                            });
                        }
                    }
                    normalWeekStart = new Date(normalWeekStart.getFullYear(), normalWeekStart.getMonth(), normalWeekStart.getDate() + 7);
                }
                _table.push(_row);
            }
            return _table;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                activateAll = _props.activateAll,
                activated = _props.activated,
                selected = _props.selected,
                highlighted = _props.highlighted,
                onDateSelect = _props.onDateSelect;

            var _table = this.createTable();

            return React.createElement(
                'div',
                { className: 'month__table noselect' },
                React.createElement(
                    'div',
                    { className: 'day__row' },
                    DAYS.map(function (day, index) {
                        return React.createElement(
                            'div',
                            {
                                className: 'day__item day-text chayns__color--100',
                                key: index
                            },
                            day
                        );
                    })
                ),
                _table.map(function (row, index) {
                    return React.createElement(
                        'div',
                        {
                            className: 'day__row',
                            key: index
                        },
                        row.map(function (day) {
                            return React.createElement(DayItem, {
                                key: day.date.getTime(),
                                day: day,
                                activateAll: activateAll,
                                activated: activated,
                                selected: selected,
                                highlighted: highlighted,
                                onDateSelect: onDateSelect
                            });
                        })
                    );
                })
            );
        }
    }]);

    return MonthTable;
}(Component), _class.defaultProps = {
    selected: null,
    activated: false,
    highlighted: false,
    activateAll: null
}, _temp);
export { MonthTable as default };