var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable react/no-array-index-key,jsx-a11y/click-events-have-key-events */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { TransitionGroup, CSSTransition } from 'react-transition-group';

import Month from './Month';
import areDatesEqual from '../utils/areDatesEqual';

var TODAY = new Date();
var TRANSITION_TIME = 300;
var MONTH_NAMES = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];

var Calendar = (_temp = _class = function (_Component) {
    _inherits(Calendar, _Component);

    function Calendar() {
        _classCallCheck(this, Calendar);

        var _this = _possibleConstructorReturn(this, (Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call(this));

        _this.state = {
            focus: new Date(),
            animationKey: 0.05,
            months: [],
            animation: ''
        };

        _this.navigateLeftOnClick = _this.navigateLeftOnClick.bind(_this);
        _this.navigateRightOnClick = _this.navigateRightOnClick.bind(_this);

        _this.handleTouchStart = _this.handleTouchStart.bind(_this);
        _this.handleTouchMove = _this.handleTouchMove.bind(_this);
        _this.handleTouchEnd = _this.handleTouchEnd.bind(_this);
        return _this;
    }

    _createClass(Calendar, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var selected = this.props.selected; // TODO: SELECTED SHOULD NOT BE OUTSIDE THE START AND END TIME. ADDITIONALLY SELECTED SHOULD BE THE FIRST DATE IN TIME CONTEXT, NOT THE FIRST DATE OF THE LIST

            var active = new Date(selected.getFullYear(), selected.getMonth(), selected.getDate());
            this.setMonths(active);
        }
    }, {
        key: 'setMonths',
        value: function setMonths(_focus) {
            var _leftHidden = new Date(_focus.getFullYear(), _focus.getMonth() - 1, 1);
            var _rightShown = new Date(_focus.getFullYear(), _focus.getMonth() + 1, 1);
            var _rightHidden = new Date(_focus.getFullYear(), _focus.getMonth() + 2, 1);

            this.setState({
                focus: _focus,
                months: [{
                    title: MONTH_NAMES[_leftHidden.getMonth()],
                    className: 'left__hidden month',
                    startDate: _leftHidden,
                    endDate: new Date(_leftHidden.getFullYear(), _leftHidden.getMonth() + 1, 0)
                }, {
                    title: MONTH_NAMES[_focus.getMonth()],
                    className: 'left__shown month',
                    startDate: new Date(_focus.getFullYear(), _focus.getMonth(), 1),
                    endDate: new Date(_focus.getFullYear(), _focus.getMonth() + 1, 0)
                }, {
                    title: MONTH_NAMES[_rightShown.getMonth()],
                    className: 'right__shown month',
                    startDate: _rightShown,
                    endDate: new Date(_rightShown.getFullYear(), _rightShown.getMonth() + 1, 0)
                }, {
                    title: MONTH_NAMES[_rightHidden.getMonth()],
                    className: 'right__hidden month',
                    startDate: _rightHidden,
                    endDate: new Date(_rightHidden.getFullYear(), _rightHidden.getMonth() + 1, 0)
                }]
            });
        }
    }, {
        key: 'getNavigateLeft',
        value: function getNavigateLeft() {
            var _props = this.props,
                activateAll = _props.activateAll,
                startDate = _props.startDate;
            var focus = this.state.focus;


            if (!startDate) {
                return !!activateAll;
            }

            if (startDate.getFullYear() < focus.getFullYear()) {
                return true;
            }

            if (startDate.getFullYear() === focus.getFullYear() && startDate.getMonth() < focus.getMonth()) {
                return true;
            }

            return false;
        }
    }, {
        key: 'getNavigateRight',
        value: function getNavigateRight() {
            var _props2 = this.props,
                activateAll = _props2.activateAll,
                endDate = _props2.endDate;
            var focus = this.state.focus;


            var FOCUS_FACTOR = window.screen.width < 450 ? 0 : 1;

            if (!endDate) {
                return !!activateAll;
            }

            if (endDate.getFullYear() > focus.getFullYear()) {
                return true;
            }

            if (endDate.getFullYear() === focus.getFullYear() && endDate.getMonth() - FOCUS_FACTOR > focus.getMonth()) {
                return true;
            }

            return false;
        }
    }, {
        key: 'navigateRightOnClick',
        value: function navigateRightOnClick() {
            if (!this.getNavigateRight()) {
                return;
            }

            var _state = this.state,
                focus = _state.focus,
                animationKey = _state.animationKey;


            var newFocus = new Date(focus.getFullYear(), focus.getMonth() + 1, 1);

            this.setMonths(newFocus);
            this.setState({
                animationKey: animationKey + 1,
                animation: 'right'
            });
        }
    }, {
        key: 'navigateLeftOnClick',
        value: function navigateLeftOnClick() {
            if (!this.getNavigateLeft()) {
                return;
            }

            var _state2 = this.state,
                focus = _state2.focus,
                animationKey = _state2.animationKey;


            var newFocus = new Date(focus.getFullYear(), focus.getMonth() - 1, 1);

            this.setMonths(newFocus);
            this.setState({
                animationKey: animationKey + 1,
                animation: 'left'
            });
        }

        /*
         TODO: DER KALENDAR MUSS SICH MIT POSITION VON HANDLE TOUCH MOVE BEWEGEN
         */

    }, {
        key: 'handleTouchStart',
        value: function handleTouchStart(event) {
            this.swipeX = event.touches[0].clientX;
        }
    }, {
        key: 'handleTouchMove',
        value: function handleTouchMove(event) {
            // console.log('ELEMENT',this.calendarMonths.offsetWidth);
            // this.move = -1*(this.swipeX-event.touches[0].clientX);
            // this.calendarMonths.style.transform= `translateX(${-1*(this.swipeX-event.touches[0].clientX)}px)`;

            this.moveSwipeX = event.touches[0].clientX;
        }
    }, {
        key: 'handleTouchEnd',
        value: function handleTouchEnd() {
            if (this.swipeX && this.moveSwipeX) {
                if (this.moveSwipeX >= this.swipeX + 60) {
                    this.navigateLeftOnClick();
                    this.swipeX = null;
                    this.moveSwipeX = null;
                    // this.move=null;
                } else if (this.moveSwipeX <= this.swipeX - 60) {
                    this.navigateRightOnClick();
                    this.swipeX = null;
                    this.moveSwipeX = null;
                }
            }
        }
    }, {
        key: 'renderMonths',
        value: function renderMonths() {
            var _props3 = this.props,
                startDate = _props3.startDate,
                activatedProp = _props3.activated,
                highlighted = _props3.highlighted,
                selected = _props3.selected,
                activateAll = _props3.activateAll,
                onDateSelect = _props3.onDateSelect;
            var _state3 = this.state,
                months = _state3.months,
                animation = _state3.animation;

            /**
             * TODO
             *
             * Hier müssen die Monate gerendert werden. Für jeden Monat sollten an dieser Stelle alle Tage in ein Array gespeichert werden.
             * Das ersparrt der 'MonthTable'-Komponente noch einmal über sämtliche Einträge eines Monats zu gehen um die aktive/highlighted/etc Tage
             * zu finden
             *
             * @type {null}
             * @private
             */

            var _startDate = startDate || null;
            var _activated = activatedProp && activatedProp.length > 0 ? activatedProp : null;
            var _highlighted = highlighted || null;

            return months.map(function (month, index) {
                var activated = [];
                var tempDates = [];
                var tempObj = [];
                var _selected = void 0;
                var tempHighlighted = [];

                if (month.startDate.getYear() === selected.getYear() && month.startDate.getMonth() === selected.getMonth()) {
                    _selected = selected;
                }

                for (var i = 0; _activated && i < _activated.length; i += 1) {
                    if (month.startDate.getYear() === _activated[i].getYear() && month.startDate.getMonth() === _activated[i].getMonth()) {
                        if (_startDate) {
                            if (_startDate.getYear() < _activated[i].getYear() || _startDate.getYear() === _activated[i].getYear() && _startDate.getMonth() < _activated[i].getMonth() || _startDate.getMonth() === _activated[i].getMonth() && _startDate.getDate() <= _activated[i].getDate()) {
                                activated.push(_activated[i]);
                            }
                        } else {
                            activated.push(_activated[i]);
                        }
                    }
                }

                if (activateAll) {
                    if (_highlighted instanceof Array) {
                        for (var j = 0; j < _highlighted.length; j += 1) {
                            var dates = [];

                            for (var k = 0; k < _highlighted[j].dates.length; k += 1) {
                                if (_highlighted[j].dates[k].getTime() >= month.startDate && _highlighted[j].dates[k].getTime() <= month.endDate) {
                                    dates.push(_highlighted[j].dates[k]);
                                }
                            }

                            if (dates.length > 0) {
                                tempObj.push({
                                    dates: dates,
                                    color: _highlighted[j].color
                                });
                            }
                        }
                    } else {
                        // TODO
                    }
                } else if (activated) {
                    for (var _i = 0; _i < activated.length; _i += 1) {
                        if (_highlighted instanceof Array) {
                            for (var _j = 0; _j < _highlighted.length; _j += 1) {
                                var _dates = [];

                                for (var _k = 0; _k < _highlighted[_j].dates.length; _k += 1) {
                                    if (areDatesEqual(_highlighted[_j].dates[_k], activated[_i])) {
                                        _dates.push(_highlighted[_j].dates[_k]);
                                    }
                                }

                                if (_dates.length > 0) {
                                    tempObj.push({
                                        dates: _dates,
                                        color: _highlighted[_j].color
                                    });
                                }
                            }
                        } else if (_highlighted && _highlighted.dates) {
                            for (var _j2 = 0; _highlighted.dates.length < _j2; _j2 += 1) {
                                if (areDatesEqual(_highlighted.dates[_j2], activated[_i])) {
                                    tempDates.push(_highlighted.dates[_j2]);
                                }
                            }
                        }
                    }
                }

                if (tempDates.length > 0) {
                    tempHighlighted = {
                        dates: tempDates,
                        color: _highlighted.color
                    };
                }

                if (tempObj.length > 0) {
                    tempHighlighted = tempObj;
                }

                return React.createElement(
                    CSSTransition,
                    {
                        classNames: animation,
                        timeout: {
                            enter: TRANSITION_TIME
                        },
                        appear: true,
                        exit: false,
                        key: month.startDate.getTime() * (index + 1)
                    },
                    React.createElement(Month, {
                        onDateSelect: onDateSelect,
                        title: month.title,
                        className: month.className,
                        startDate: month.startDate,
                        endDate: month.endDate,
                        selected: _selected,
                        activated: activated,
                        highlighted: tempHighlighted,
                        activateAll: activateAll,
                        key: month.startDate.getTime() * (index + 1)
                    })
                );
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _navigateLeft = !this.getNavigateLeft();
            var _navigateRight = !this.getNavigateRight();

            var _months = this.renderMonths();

            return React.createElement(
                'div',
                {
                    className: 'buffer',
                    onTouchMove: this.handleTouchMove,
                    onTouchStart: this.handleTouchStart,
                    onTouchEnd: this.handleTouchEnd
                },
                React.createElement(
                    'div',
                    { className: 'absolute' },
                    React.createElement(
                        'div',
                        { className: 'calendar__navigation' },
                        React.createElement(
                            'div',
                            {
                                onClick: this.navigateLeftOnClick,
                                className: 'calendar__navigate left',
                                hidden: _navigateLeft
                            },
                            React.createElement('i', { className: 'fa fa-chevron-left' })
                        ),
                        React.createElement(
                            'div',
                            {
                                onClick: this.navigateRightOnClick,
                                className: 'calendar__navigate right',
                                hidden: _navigateRight
                            },
                            React.createElement('i', { className: 'fa fa-chevron-right' })
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'calendar__months' },
                    React.createElement(
                        TransitionGroup,
                        null,
                        _months
                    )
                )
            );
        }
    }]);

    return Calendar;
}(Component), _class.defaultProps = {
    selected: TODAY,
    activateAll: true,
    activated: null,
    highlighted: null
}, _temp);
export { Calendar as default };