var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable react/no-array-index-key, jsx-a11y/click-events-have-key-events */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

import areDatesEqual from '../utils/areDatesEqual';

var DayItem = (_temp = _class = function (_Component) {
    _inherits(DayItem, _Component);

    function DayItem() {
        _classCallCheck(this, DayItem);

        var _this = _possibleConstructorReturn(this, (DayItem.__proto__ || Object.getPrototypeOf(DayItem)).call(this));

        _this.onClick = _this.onClick.bind(_this);
        return _this;
    }

    _createClass(DayItem, [{
        key: 'onClick',
        value: function onClick() {
            var _props = this.props,
                onDateSelect = _props.onDateSelect,
                day = _props.day;


            if (onDateSelect) {
                onDateSelect(day.date);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                day = _props2.day,
                activateAll = _props2.activateAll,
                activated = _props2.activated,
                selected = _props2.selected,
                highlighted = _props2.highlighted;


            var _active = activateAll;
            var _selected = false;
            var _marked = false;
            var _highlighted = false;
            var _onClick = false;
            var _className = 'day__item day-in-month';
            var _style = {};

            if (_active) {
                _onClick = true;
            }

            if (activated) {
                for (var i = 0; i < activated.length; i += 1) {
                    if (areDatesEqual(activated[i], day.date)) {
                        _active = true;
                        _marked = true;
                        _onClick = true;
                        break;
                    }
                }
            }

            if (selected && areDatesEqual(selected, day.date)) {
                _active = true;
                _selected = true; // `-is-active-is-selected${_marked} chayns__color--100`;
            }

            if (highlighted instanceof Array) {
                // TODO: Merge data in MonthTable
                for (var k = 0; k < highlighted.length; k += 1) {
                    for (var l = 0; highlighted[k].dates && l < highlighted[k].dates.length; l += 1) {
                        if (areDatesEqual(highlighted[k].dates[l], day.date)) {
                            _active = true;
                            _marked = true;
                            _onClick = true;
                            _highlighted = true;
                            if (highlighted[k].color) {
                                _style.backgroundColor = '' + highlighted[k].color;
                            }
                        }
                    }
                }
            } else if (highlighted && highlighted.dates) {
                for (var _k = 0; _k < highlighted.dates.length; _k += 1) {
                    if (areDatesEqual(highlighted.dates[_k], day.date)) {
                        _active = true;
                        _marked = true;
                        _onClick = true;
                        _highlighted = true;
                        if (highlighted.color) {
                            _style.backgroundColor = '' + highlighted.color;
                        }
                        break;
                    }
                }
            }

            if (day.inMonth) {
                _className = classNames('day__item day-in-month', {
                    'is-active': _active,
                    'is-deactive': !_active,
                    'is-selected': _selected,
                    'is-marked': _marked,
                    'is-marked-is-highlighted': _marked && _highlighted,
                    'chayns__background-color--80 chayns__color--5': _active && _marked,
                    'chayns__background-color--80': !_active && _marked && !_selected

                });

                return React.createElement(
                    'div',
                    {
                        className: _className,
                        style: _style,
                        onClick: _onClick && this.onClick
                    },
                    day.date.getDate()
                );
            }

            return React.createElement(
                'div',
                {
                    className: 'day__item day-out-month'
                },
                day.date.getDate()
            );
        }
    }]);

    return DayItem;
}(Component), _class.defaultProps = {
    selected: null,
    activated: false,
    highlighted: false,
    activateAll: null
}, _temp);


export default DayItem;